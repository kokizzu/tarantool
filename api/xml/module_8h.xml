<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="module_8h" kind="file" language="C++">
    <compoundname>module.h</compoundname>
    <includes local="no">stddef.h</includes>
    <includes local="no">stdarg.h</includes>
    <includes local="no">errno.h</includes>
    <includes local="no">string.h</includes>
    <includes local="no">stdint.h</includes>
    <includes local="no">stdbool.h</includes>
    <includes local="no">stdio.h</includes>
    <includes local="no">sys/types.h</includes>
    <includes local="yes">lua.h</includes>
    <incdepgraph>
      <node id="7">
        <label>stdbool.h</label>
      </node>
      <node id="3">
        <label>stdarg.h</label>
      </node>
      <node id="10">
        <label>lua.h</label>
      </node>
      <node id="6">
        <label>stdint.h</label>
      </node>
      <node id="4">
        <label>errno.h</label>
      </node>
      <node id="1">
        <label>src/module.h</label>
        <link refid="module_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>stddef.h</label>
      </node>
      <node id="9">
        <label>sys/types.h</label>
      </node>
      <node id="5">
        <label>string.h</label>
      </node>
      <node id="8">
        <label>stdio.h</label>
      </node>
    </incdepgraph>
    <innerclass refid="unionPACKED" prot="public">PACKED</innerclass>
    <innerclass refid="structbox__decimal" prot="public">box_decimal</innerclass>
      <sectiondef kind="define">
      <memberdef kind="define" id="module_8h_1ac5f2c7580fd5bf200c5027443420902f" prot="public" static="no">
        <name>PACKAGE_VERSION_MAJOR</name>
        <initializer>2</initializer>
        <briefdescription>
<para>Package major version - 1 for 1.6.7. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/module.h" line="58" column="9" bodyfile="src/module.h" bodystart="58" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="module_8h_1a4ab155eaff0a115e522c1faae631196e" prot="public" static="no">
        <name>PACKAGE_VERSION_MINOR</name>
        <initializer>6</initializer>
        <briefdescription>
<para>Package minor version - 6 for 1.6.7. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/module.h" line="62" column="9" bodyfile="src/module.h" bodystart="62" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="module_8h_1abd1dbec4fd6761084d3e0c05afe2b138" prot="public" static="no">
        <name>PACKAGE_VERSION_PATCH</name>
        <initializer>0</initializer>
        <briefdescription>
<para>Package patch version - 7 for 1.6.7. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/module.h" line="66" column="9" bodyfile="src/module.h" bodystart="66" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="module_8h_1aa326a05d5e30f9e9a4bb0b4469d5d0c0" prot="public" static="no">
        <name>PACKAGE_VERSION</name>
        <initializer>&quot;2.6.0-2268-g02fae15a3&quot;</initializer>
        <briefdescription>
<para>A string with major-minor-patch-commit-id identifier of the release, e.g. </para>
        </briefdescription>
        <detaileddescription>
<para>1.6.6-113-g8399d0e. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/module.h" line="71" column="9" bodyfile="src/module.h" bodystart="71" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="module_8h_1adb6d1259777e8f56c6260be6faed183e" prot="public" static="no">
        <name>SYSCONF_DIR</name>
        <initializer>&quot;etc&quot;</initializer>
        <briefdescription>
<para>public </para>
        </briefdescription>
        <detaileddescription>
<para>System configuration dir (e.g /etc) </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/module.h" line="77" column="9" bodyfile="src/module.h" bodystart="77" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="module_8h_1a643b6b7ac15874197420e2adbea8b6bb" prot="public" static="no">
        <name>INSTALL_PREFIX</name>
        <initializer>&quot;/usr/local&quot;</initializer>
        <briefdescription>
<para>Install prefix (e.g. </para>
        </briefdescription>
        <detaileddescription>
<para>/usr) </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/module.h" line="79" column="9" bodyfile="src/module.h" bodystart="79" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="module_8h_1a040141d0f88e012c0b915e3531fef5cc" prot="public" static="no">
        <name>BUILD_TYPE</name>
        <initializer>&quot;Debug&quot;</initializer>
        <briefdescription>
<para>Build type, e.g. </para>
        </briefdescription>
        <detaileddescription>
<para>Debug or Release </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/module.h" line="81" column="9" bodyfile="src/module.h" bodystart="81" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="module_8h_1ac8c9f90a1d4b7435c509fd2020e4aa88" prot="public" static="no">
        <name>BUILD_INFO</name>
        <initializer>&quot;Linux-x86_64-Debug&quot;</initializer>
        <briefdescription>
<para>CMake build type signature, e.g. </para>
        </briefdescription>
        <detaileddescription>
<para>Linux-x86_64-Debug </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/module.h" line="83" column="9" bodyfile="src/module.h" bodystart="83" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="module_8h_1a2863d95c06ae4d073ea443a8ae48c5b6" prot="public" static="no">
        <name>BUILD_OPTIONS</name>
        <initializer>&quot;cmake . -DCMAKE_INSTALL_PREFIX=/usr/local -DENABLE_BACKTRACE=TRUE&quot;</initializer>
        <briefdescription>
<para>Command line used to run CMake. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/module.h" line="85" column="9" bodyfile="src/module.h" bodystart="85" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="module_8h_1a835dbb7b4216a8258c588d9781a3b66b" prot="public" static="no">
        <name>COMPILER_INFO</name>
        <initializer>&quot;/usr/bin/cc /usr/bin/c++&quot;</initializer>
        <briefdescription>
<para>Pathes to C and CXX compilers. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/module.h" line="87" column="9" bodyfile="src/module.h" bodystart="87" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="module_8h_1adc01d1a8b018ef75d112a8f51dde4e27" prot="public" static="no">
        <name>TARANTOOL_C_FLAGS</name>
        <initializer>&quot; -fexceptions -funwind-tables -fno-common -fopenmp -msse2 -std=c11 -Wall -Wextra -Wno-strict-aliasing -Wno-char-subscripts -Wno-format-truncation -Wno-gnu-<ref refid="module_8h_1a3ed9482331696beaadb8ab2e6b4dfead" kindref="member">alignof</ref>-expression -fno-gnu89-inline -Wno-cast-function-type -Werror&quot;</initializer>
        <briefdescription>
<para>C compile flags used to build Tarantool. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/module.h" line="89" column="9" bodyfile="src/module.h" bodystart="89" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="module_8h_1a2118c0a1a997878f04f860b4049ca934" prot="public" static="no">
        <name>TARANTOOL_CXX_FLAGS</name>
        <initializer>&quot; -fexceptions -funwind-tables -fno-common -fopenmp -msse2 -std=c++11 -Wall -Wextra -Wno-strict-aliasing -Wno-char-subscripts -Wno-format-truncation -Wno-invalid-<ref refid="module_8h_1afd049f7ad59dbe455f460807475c2841" kindref="member">offsetof</ref> -Wno-gnu-<ref refid="module_8h_1a3ed9482331696beaadb8ab2e6b4dfead" kindref="member">alignof</ref>-expression -Wno-cast-function-type -Werror&quot;</initializer>
        <briefdescription>
<para>CXX compile flags used to build Tarantool. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/module.h" line="91" column="9" bodyfile="src/module.h" bodystart="91" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="module_8h_1a44bca7e3d39f063be25a9d61a0a9d421" prot="public" static="no">
        <name>MODULE_LIBDIR</name>
        <initializer>&quot;/usr/local/lib/tarantool&quot;</initializer>
        <briefdescription>
<para>A path to install *.lua module files. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/module.h" line="94" column="9" bodyfile="src/module.h" bodystart="94" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="module_8h_1a8114e8df5bc35951db601268ec25d600" prot="public" static="no">
        <name>MODULE_LUADIR</name>
        <initializer>&quot;/usr/local/share/tarantool&quot;</initializer>
        <briefdescription>
<para>A path to install *.so / *.dylib module files. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/module.h" line="96" column="9" bodyfile="src/module.h" bodystart="96" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="module_8h_1a516a42b6eee771a85d83b371c0f22337" prot="public" static="no">
        <name>MODULE_INCLUDEDIR</name>
        <initializer>&quot;/usr/local/include/tarantool&quot;</initializer>
        <briefdescription>
<para>A path to Lua includes (the same directory where this file is contained) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/module.h" line="98" column="9" bodyfile="src/module.h" bodystart="98" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="module_8h_1a5e471f2a326d5e86e09a56f9da3d383f" prot="public" static="no">
        <name>MODULE_LUAPATH</name>
        <initializer>&quot;/usr/local/share/tarantool/?.lua;/usr/local/share/tarantool/?/init.lua;/usr/share/tarantool/?.lua;/usr/share/tarantool/?/init.lua;/usr/local/share/lua/5.1/?.lua;/usr/local/share/lua/5.1/?/init.lua;/usr/share/lua/5.1/?.lua;/usr/share/lua/5.1/?/init.lua&quot;</initializer>
        <briefdescription>
<para>A constant added to package.path in Lua to find *.lua module files. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/module.h" line="100" column="9" bodyfile="src/module.h" bodystart="100" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="module_8h_1a83a0a80ad0559e26298ce670050609e2" prot="public" static="no">
        <name>MODULE_LIBPATH</name>
        <initializer>&quot;/usr/local/lib/x86_64-linux-gnu/tarantool/?.so;/usr/local/lib/tarantool/?.so;/usr/lib/x86_64-linux-gnu/tarantool/?.so;/usr/local/lib/x86_64-linux-gnu/lua/5.1/?.so;/usr/local/lib/lua/5.1/?.so;/usr/lib/x86_64-linux-gnu/lua/5.1/?.so&quot;</initializer>
        <briefdescription>
<para>A constant added to package.cpath in Lua to find *.so module files. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/module.h" line="102" column="9" bodyfile="src/module.h" bodystart="102" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="module_8h_1a894125cfa770b79267d0eb49e83c2279" prot="public" static="no">
        <name>MODULE_LIBSUFFIX</name>
        <initializer>&quot;.so&quot;</initializer>
        <briefdescription>
<para>Shared library suffix - &quot;.so&quot; on Linux, &quot;.dylib&quot; on Mac. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/module.h" line="104" column="9" bodyfile="src/module.h" bodystart="104" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="module_8h_1af989845e24678c452b9222afdac95e7f" prot="public" static="no">
        <name>__has_feature</name>
        <param><defname>x</defname></param>
        <initializer>0</initializer>
        <briefdescription>
<para>public </para>
        </briefdescription>
        <detaileddescription>
<para>Feature test macros for -std=c11 / -std=c++11</para>
<para>Sic: clang aims to be gcc-compatible and thus defines <bold>GNUC</bold> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/module.h" line="115" column="11" bodyfile="src/module.h" bodystart="115" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="module_8h_1a447121dcab4275b7839a56082b7a1ab8" prot="public" static="no">
        <name>__has_builtin</name>
        <param><defname>x</defname></param>
        <initializer>0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/module.h" line="118" column="11" bodyfile="src/module.h" bodystart="118" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="module_8h_1a54d2d7742701f3f112afbcd8d4f9ccdb" prot="public" static="no">
        <name>__has_attribute</name>
        <param><defname>x</defname></param>
        <initializer>0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/module.h" line="121" column="11" bodyfile="src/module.h" bodystart="121" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="module_8h_1aeed0a618f017e128a5d8654754f792db" prot="public" static="no">
        <name>__has_cpp_attribute</name>
        <param><defname>x</defname></param>
        <initializer>0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/module.h" line="124" column="11" bodyfile="src/module.h" bodystart="124" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="module_8h_1a217a0bd562b98ae8c2ffce44935351e1" prot="public" static="no">
        <name>likely</name>
        <param><defname>x</defname></param>
        <initializer>(x)</initializer>
        <briefdescription>
<para>Compiler-independent built-ins. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://gcc.gnu.org/onlinedocs/gcc/Other-Builtins.html">https://gcc.gnu.org/onlinedocs/gcc/Other-Builtins.html</ulink></para>
</simplesect>
{{{ Built-ins You may use <ref refid="module_8h_1a217a0bd562b98ae8c2ffce44935351e1" kindref="member">likely()</ref>/unlikely() to provide the compiler with branch prediction information. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/module.h" line="144" column="12" bodyfile="src/module.h" bodystart="144" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="module_8h_1ac6c45889010c1bd68631771b64f18101" prot="public" static="no">
        <name>unlikely</name>
        <param><defname>x</defname></param>
        <initializer>(x)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/module.h" line="145" column="11" bodyfile="src/module.h" bodystart="145" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="module_8h_1add6458adcc00e90c64bc87db324d1602" prot="public" static="no">
        <name>prefetch</name>
        <param><defname>addr</defname></param>
        <param><defname>...</defname></param>
        <initializer>((void) addr)</initializer>
        <briefdescription>
<para>This macro is used to minimize cache-miss latency by moving data into a cache before it is accessed. </para>
        </briefdescription>
        <detaileddescription>
<para>You can insert calls to <ref refid="module_8h_1add6458adcc00e90c64bc87db324d1602" kindref="member">prefetch()</ref> into code for which you know addresses of data in memory that is likely to be accessed soon. If the target supports them, data prefetch instructions will be generated. If the prefetch is done early enough before the access then the data will be in the cache by the time it is accessed.</para>
<para>The value of addr is the address of the memory to prefetch. There are two optional arguments, rw and locality. The value of rw is a compile-time constant one or zero; one means that the prefetch is preparing for a write to the memory address and zero, the default, means that the prefetch is preparing for a read. The value locality must be a compile-time constant integer between zero and three. A value of zero means that the data has no temporal locality, so it need not be left in the cache after the access. A value of three means that the data has a high degree of temporal locality and should be left in all levels of cache possible. Values of one and two mean, respectively, a low or moderate degree of temporal locality. The default is three. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/module.h" line="171" column="12" bodyfile="src/module.h" bodystart="171" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="module_8h_1a86d08c1b23d67eca942da0ac012d89f3" prot="public" static="no">
        <name>unreachable</name>
        <param></param>
        <initializer>(assert(0))</initializer>
        <briefdescription>
<para>If control flow reaches the point of the <ref refid="module_8h_1a86d08c1b23d67eca942da0ac012d89f3" kindref="member">unreachable()</ref>, the program is undefined. </para>
        </briefdescription>
        <detaileddescription>
<para>It is useful in situations where the compiler cannot deduce the unreachability of the code. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/module.h" line="182" column="12" bodyfile="src/module.h" bodystart="182" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="module_8h_1afd049f7ad59dbe455f460807475c2841" prot="public" static="no">
        <name>offsetof</name>
        <param><defname>type</defname></param>
        <param><defname>member</defname></param>
        <initializer>((size_t) &amp;((type *)0)-&gt;member)</initializer>
        <briefdescription>
<para>The macro offsetof expands to an integral constant expression of type size_t, the value of which is the offset, in bytes, from the beginning of an object of specified type to its specified member, including padding if any. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/module.h" line="192" column="9" bodyfile="src/module.h" bodystart="192" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="module_8h_1af8c317a42292b61c93aae91e59118a46" prot="public" static="no">
        <name>container_of</name>
        <param><defname>ptr</defname></param>
        <param><defname>type</defname></param>
        <param><defname>member</defname></param>
        <initializer>	({ \
	const typeof( ((type *)0)-&gt;member  ) *__mptr = (ptr); \
	(type *)( (char *)__mptr - <ref refid="module_8h_1afd049f7ad59dbe455f460807475c2841" kindref="member">offsetof</ref>(type,member)  );})</initializer>
        <briefdescription>
<para>This macro is used to retrieve an enclosing structure from a pointer to a nested element. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/module.h" line="200" column="9" bodyfile="src/module.h" bodystart="200" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="module_8h_1a131f3cf1114cea323f428ee90a531c62" prot="public" static="no">
        <name>alignas</name>
        <param><defname>_n</defname></param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/module.h" line="224" column="16" bodyfile="src/module.h" bodystart="224" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="module_8h_1a3ed9482331696beaadb8ab2e6b4dfead" prot="public" static="no">
        <name>alignof</name>
        <param><defname>_T</defname></param>
        <initializer><ref refid="module_8h_1afd049f7ad59dbe455f460807475c2841" kindref="member">offsetof</ref>(struct { char c; _T member; }, member)</initializer>
        <briefdescription>
<para>C11/C++11 operator. </para>
        </briefdescription>
        <detaileddescription>
<para>Returns the alignment, in bytes, required for any instance of the type indicated by type-id, which is either complete type, an array type, or a reference type. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/module.h" line="240" column="16" bodyfile="src/module.h" bodystart="240" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="module_8h_1ac7779ca95ec13deccfed1299cf0bb571" prot="public" static="no">
        <name>__alignof_is_defined</name>
        <initializer>1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/module.h" line="241" column="13" bodyfile="src/module.h" bodystart="241" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="module_8h_1a07d932791f722cd5b75c111e51ef2023" prot="public" static="no">
        <name>MAYBE_UNUSED</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/module.h" line="270" column="12" bodyfile="src/module.h" bodystart="270" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="module_8h_1abf13e44576a768044e199191d4f26f7e" prot="public" static="no">
        <name>NODISCARD</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/module.h" line="285" column="12" bodyfile="src/module.h" bodystart="285" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="module_8h_1a1b173d22e57d9395897acbd8de62d505" prot="public" static="no">
        <name>NOINLINE</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/module.h" line="297" column="12" bodyfile="src/module.h" bodystart="297" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="module_8h_1aa1728270d73c5d1598de1fd691762eb1" prot="public" static="no">
        <name>NORETURN</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/module.h" line="312" column="12" bodyfile="src/module.h" bodystart="312" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="module_8h_1a033c6face33bc7db165c0ba591696fcc" prot="public" static="no">
        <name>DEPRECATED</name>
        <param><defname>_msg</defname></param>
        <briefdescription>
<para>The DEPRECATED attribute can be applied to a function, a variable, or a type. </para>
        </briefdescription>
        <detaileddescription>
<para>This is useful when identifying functions, variables, or types that are expected to be removed in a future version of a program. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/module.h" line="325" column="12" bodyfile="src/module.h" bodystart="325" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="module_8h_1a5e3652cae8b48c1ad174f0b06bbd06d0" prot="public" static="no">
        <name>API_EXPORT</name>
        <initializer>extern</initializer>
        <briefdescription>
<para>The API_EXPORT attribute declares public C API function. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/module.h" line="338" column="12" bodyfile="src/module.h" bodystart="338" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="module_8h_1a75df7795fe4158ac681564ae0520d975" prot="public" static="no">
        <name>CFORMAT</name>
        <param><defname>archetype</defname></param>
        <param><defname>stringindex</defname></param>
        <param><defname>firsttocheck</defname></param>
        <briefdescription>
<para>The CFORMAT attribute specifies that a function takes printf, scanf, strftime or strfmon style arguments that should be type-checked against a format string. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://gcc.gnu.org/onlinedocs/gcc/Common-Function-Attributes.html">https://gcc.gnu.org/onlinedocs/gcc/Common-Function-Attributes.html</ulink> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/module.h" line="352" column="12" bodyfile="src/module.h" bodystart="352" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="module_8h_1a36d525cf4d116b2fe4ecc00222b256f1" prot="public" static="no">
        <name>PACKED</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/module.h" line="368" column="12" bodyfile="src/module.h" bodystart="368" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="module_8h_1a0cf2d82c57a09723ab59e6f4dcc45b84" prot="public" static="no">
        <name>FALLTHROUGH</name>
        <briefdescription>
<para>Function Attributes }}}. </para>
        </briefdescription>
        <detaileddescription>
<para>{{{ Statement Attributes The fallthrough attribute with a null statement serves as a fallthrough statement. It hints to the compiler that a statement that falls through to another case label, or user-defined label in a switch statement is intentional and thus the -Wimplicit-fallthrough warning must not trigger. The fallthrough attribute may appear at most once in each attribute list, and may not be mixed with other attributes. It can only be used in a switch statement (the compiler will issue an error otherwise), after a preceding statement and before a logically succeeding case label, or user-defined label. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/module.h" line="391" column="12" bodyfile="src/module.h" bodystart="391" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="module_8h_1aed82e9747a226e287b0355deecfee5d1" prot="public" static="no">
        <name>say_file_line</name>
        <param><defname>level</defname></param>
        <param><defname>file</defname></param>
        <param><defname>line</defname></param>
        <param><defname>error</defname></param>
        <param><defname>format</defname></param>
        <param><defname>...</defname></param>
        <initializer>	({ \
	if (say_log_level_is_enabled(level)) \
		_say(level, file, line, error, format, ##__VA_ARGS__); })</initializer>
        <briefdescription>
<para>Format and print a message to Tarantool log file. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>level</parametername>
</parameternamelist>
<parameterdescription>
<para>(int) - log level (see enum <ref refid="module_8h_1af667a90dfe6a8cc25b510af73d98bb82" kindref="member">say_level</ref>) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>file</parametername>
</parameternamelist>
<parameterdescription>
<para>(const char * ) - file name to print </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>line</parametername>
</parameternamelist>
<parameterdescription>
<para>(int) - line number to print </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>error</parametername>
</parameternamelist>
<parameterdescription>
<para>(const char * ) - error description, may be NULL </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>format</parametername>
</parameternamelist>
<parameterdescription>
<para>(const char * ) - printf()-like format string </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>...</parametername>
</parameternamelist>
<parameterdescription>
<para>- format arguments </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para>printf() </para>
</simplesect>
<simplesect kind="see"><para>enum <ref refid="module_8h_1af667a90dfe6a8cc25b510af73d98bb82" kindref="member">say_level</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/module.h" line="470" column="9" bodyfile="src/module.h" bodystart="470" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="module_8h_1a5b2bb360001f6dfb4f946335950cabbf" prot="public" static="no">
        <name>say</name>
        <param><defname>level</defname></param>
        <param><defname>error</defname></param>
        <param><defname>format</defname></param>
        <param><defname>...</defname></param>
        <initializer>	({ \
	<ref refid="module_8h_1aed82e9747a226e287b0355deecfee5d1" kindref="member">say_file_line</ref>(level, __FILE__, __LINE__, error, format, ##__VA_ARGS__); })</initializer>
        <briefdescription>
<para>Format and print a message to Tarantool log file. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>level</parametername>
</parameternamelist>
<parameterdescription>
<para>(int) - log level (see enum <ref refid="module_8h_1af667a90dfe6a8cc25b510af73d98bb82" kindref="member">say_level</ref>) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>error</parametername>
</parameternamelist>
<parameterdescription>
<para>(const char * ) - error description, may be NULL </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>format</parametername>
</parameternamelist>
<parameterdescription>
<para>(const char * ) - printf()-like format string </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>...</parametername>
</parameternamelist>
<parameterdescription>
<para>- format arguments </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para>printf() </para>
</simplesect>
<simplesect kind="see"><para>enum <ref refid="module_8h_1af667a90dfe6a8cc25b510af73d98bb82" kindref="member">say_level</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/module.h" line="484" column="9" bodyfile="src/module.h" bodystart="484" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="module_8h_1a0a7d66a81cb7c12fdb2bf2c16b9c563e" prot="public" static="no">
        <name>say_error</name>
        <param><defname>format</defname></param>
        <param><defname>...</defname></param>
        <initializer><ref refid="module_8h_1a5b2bb360001f6dfb4f946335950cabbf" kindref="member">say</ref>(S_ERROR, NULL, format, ##__VA_ARGS__)</initializer>
        <briefdescription>
<para>Format and print a message to Tarantool log file. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>format</parametername>
</parameternamelist>
<parameterdescription>
<para>(const char * ) - printf()-like format string </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>...</parametername>
</parameternamelist>
<parameterdescription>
<para>- format arguments </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para>printf() </para>
</simplesect>
<simplesect kind="see"><para>enum <ref refid="module_8h_1af667a90dfe6a8cc25b510af73d98bb82" kindref="member">say_level</ref> Example: <programlisting><codeline><highlight class="normal">say_info(&quot;Some<sp/>useful<sp/>information:<sp/>%s&quot;,<sp/>status);</highlight></codeline>
</programlisting> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/module.h" line="499" column="9" bodyfile="src/module.h" bodystart="499" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="module_8h_1a7971b0f41c615be5a0b7100b5e42dcb3" prot="public" static="no">
        <name>say_crit</name>
        <param><defname>format</defname></param>
        <param><defname>...</defname></param>
        <initializer><ref refid="module_8h_1a5b2bb360001f6dfb4f946335950cabbf" kindref="member">say</ref>(S_CRIT, NULL, format, ##__VA_ARGS__)</initializer>
        <briefdescription>
<para>Format and print a message to Tarantool log file. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>format</parametername>
</parameternamelist>
<parameterdescription>
<para>(const char * ) - printf()-like format string </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>...</parametername>
</parameternamelist>
<parameterdescription>
<para>- format arguments </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para>printf() </para>
</simplesect>
<simplesect kind="see"><para>enum <ref refid="module_8h_1af667a90dfe6a8cc25b510af73d98bb82" kindref="member">say_level</ref> Example: <programlisting><codeline><highlight class="normal">say_info(&quot;Some<sp/>useful<sp/>information:<sp/>%s&quot;,<sp/>status);</highlight></codeline>
</programlisting> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/module.h" line="501" column="9" bodyfile="src/module.h" bodystart="501" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="module_8h_1ac1ea95f80b8aa81fe56ca4291814b8a3" prot="public" static="no">
        <name>say_warn</name>
        <param><defname>format</defname></param>
        <param><defname>...</defname></param>
        <initializer><ref refid="module_8h_1a5b2bb360001f6dfb4f946335950cabbf" kindref="member">say</ref>(S_WARN, NULL, format, ##__VA_ARGS__)</initializer>
        <briefdescription>
<para>Format and print a message to Tarantool log file. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>format</parametername>
</parameternamelist>
<parameterdescription>
<para>(const char * ) - printf()-like format string </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>...</parametername>
</parameternamelist>
<parameterdescription>
<para>- format arguments </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para>printf() </para>
</simplesect>
<simplesect kind="see"><para>enum <ref refid="module_8h_1af667a90dfe6a8cc25b510af73d98bb82" kindref="member">say_level</ref> Example: <programlisting><codeline><highlight class="normal">say_info(&quot;Some<sp/>useful<sp/>information:<sp/>%s&quot;,<sp/>status);</highlight></codeline>
</programlisting> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/module.h" line="503" column="9" bodyfile="src/module.h" bodystart="503" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="module_8h_1ae02d530f5d4ff18fd7786c3648dac2cf" prot="public" static="no">
        <name>say_info</name>
        <param><defname>format</defname></param>
        <param><defname>...</defname></param>
        <initializer><ref refid="module_8h_1a5b2bb360001f6dfb4f946335950cabbf" kindref="member">say</ref>(S_INFO, NULL, format, ##__VA_ARGS__)</initializer>
        <briefdescription>
<para>Format and print a message to Tarantool log file. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>format</parametername>
</parameternamelist>
<parameterdescription>
<para>(const char * ) - printf()-like format string </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>...</parametername>
</parameternamelist>
<parameterdescription>
<para>- format arguments </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para>printf() </para>
</simplesect>
<simplesect kind="see"><para>enum <ref refid="module_8h_1af667a90dfe6a8cc25b510af73d98bb82" kindref="member">say_level</ref> Example: <programlisting><codeline><highlight class="normal">say_info(&quot;Some<sp/>useful<sp/>information:<sp/>%s&quot;,<sp/>status);</highlight></codeline>
</programlisting> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/module.h" line="505" column="9" bodyfile="src/module.h" bodystart="505" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="module_8h_1a01a0037b2d3389e850c9bd7d66996b42" prot="public" static="no">
        <name>say_verbose</name>
        <param><defname>format</defname></param>
        <param><defname>...</defname></param>
        <initializer><ref refid="module_8h_1a5b2bb360001f6dfb4f946335950cabbf" kindref="member">say</ref>(S_VERBOSE, NULL, format, ##__VA_ARGS__)</initializer>
        <briefdescription>
<para>Format and print a message to Tarantool log file. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>format</parametername>
</parameternamelist>
<parameterdescription>
<para>(const char * ) - printf()-like format string </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>...</parametername>
</parameternamelist>
<parameterdescription>
<para>- format arguments </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para>printf() </para>
</simplesect>
<simplesect kind="see"><para>enum <ref refid="module_8h_1af667a90dfe6a8cc25b510af73d98bb82" kindref="member">say_level</ref> Example: <programlisting><codeline><highlight class="normal">say_info(&quot;Some<sp/>useful<sp/>information:<sp/>%s&quot;,<sp/>status);</highlight></codeline>
</programlisting> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/module.h" line="507" column="9" bodyfile="src/module.h" bodystart="507" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="module_8h_1ab318c2435df2b04c7180df57a3c217ae" prot="public" static="no">
        <name>say_debug</name>
        <param><defname>format</defname></param>
        <param><defname>...</defname></param>
        <initializer><ref refid="module_8h_1a5b2bb360001f6dfb4f946335950cabbf" kindref="member">say</ref>(S_DEBUG, NULL, format, ##__VA_ARGS__)</initializer>
        <briefdescription>
<para>Format and print a message to Tarantool log file. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>format</parametername>
</parameternamelist>
<parameterdescription>
<para>(const char * ) - printf()-like format string </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>...</parametername>
</parameternamelist>
<parameterdescription>
<para>- format arguments </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para>printf() </para>
</simplesect>
<simplesect kind="see"><para>enum <ref refid="module_8h_1af667a90dfe6a8cc25b510af73d98bb82" kindref="member">say_level</ref> Example: <programlisting><codeline><highlight class="normal">say_info(&quot;Some<sp/>useful<sp/>information:<sp/>%s&quot;,<sp/>status);</highlight></codeline>
</programlisting> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/module.h" line="509" column="9" bodyfile="src/module.h" bodystart="509" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="module_8h_1a39929109aefade22a76048b9ac73bd8d" prot="public" static="no">
        <name>say_syserror</name>
        <param><defname>format</defname></param>
        <param><defname>...</defname></param>
        <initializer>	<ref refid="module_8h_1a5b2bb360001f6dfb4f946335950cabbf" kindref="member">say</ref>(S_SYSERROR, strerror(errno), format, \
	##__VA_ARGS__)</initializer>
        <briefdescription>
<para>Format and print a message to Tarantool log file. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>format</parametername>
</parameternamelist>
<parameterdescription>
<para>(const char * ) - printf()-like format string </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>...</parametername>
</parameternamelist>
<parameterdescription>
<para>- format arguments </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para>printf() </para>
</simplesect>
<simplesect kind="see"><para>enum <ref refid="module_8h_1af667a90dfe6a8cc25b510af73d98bb82" kindref="member">say_level</ref> Example: <programlisting><codeline><highlight class="normal">say_info(&quot;Some<sp/>useful<sp/>information:<sp/>%s&quot;,<sp/>status);</highlight></codeline>
</programlisting> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/module.h" line="511" column="9" bodyfile="src/module.h" bodystart="511" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="module_8h_1aef61141a7db6fda3c9710bbc8c340e2e" prot="public" static="no">
        <name>box_error_raise</name>
        <param><defname>code</defname></param>
        <param><defname>format</defname></param>
        <param><defname>...</defname></param>
        <initializer><ref refid="module_8h_1aa6e6803bc4309c3f59b93e2709cb418b" kindref="member">box_error_set</ref>(__FILE__, __LINE__, code, format, ##__VA_ARGS__)</initializer>
        <briefdescription>
<para>A backward-compatible API define. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/module.h" line="2543" column="9" bodyfile="src/module.h" bodystart="2543" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="module_8h_1afd0415940d06f795e1f4dcfd40dd6c5b" prot="public" static="no">
        <name>BOX_DECIMAL_STRING_BUFFER_SIZE</name>
        <initializer>128</initializer>
        <briefdescription>
<para>Buffer of this size is enough to hold any <ref refid="module_8h_1a7a20acf8704e0a8de6b2c6e70cabda94" kindref="member">box_decimal_to_string()</ref> result. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/module.h" line="2785" column="9" bodyfile="src/module.h" bodystart="2785" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="module_8h_1af667a90dfe6a8cc25b510af73d98bb82" prot="public" static="no" strong="no">
        <type></type>
        <name>say_level</name>
        <enumvalue id="module_8h_1af667a90dfe6a8cc25b510af73d98bb82ad9bdef35e63680685491cabd5243d786" prot="public">
          <name>S_FATAL</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="module_8h_1af667a90dfe6a8cc25b510af73d98bb82ad0c2c7d381ce3e0b9f57baabeebf2de6" prot="public">
          <name>S_SYSERROR</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="module_8h_1af667a90dfe6a8cc25b510af73d98bb82aa09fa5ed5be816eeb89a11be5a00c477" prot="public">
          <name>S_ERROR</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="module_8h_1af667a90dfe6a8cc25b510af73d98bb82aeb9d5f7b228ac56db758b2c3ac1e88b1" prot="public">
          <name>S_CRIT</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="module_8h_1af667a90dfe6a8cc25b510af73d98bb82a73a2d2de70f4b2251dd160cc4318b559" prot="public">
          <name>S_WARN</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="module_8h_1af667a90dfe6a8cc25b510af73d98bb82a563669ac6b6a356e9e8d2725859dc153" prot="public">
          <name>S_INFO</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="module_8h_1af667a90dfe6a8cc25b510af73d98bb82a84814c47aa9cd388403ec916fe810d22" prot="public">
          <name>S_VERBOSE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="module_8h_1af667a90dfe6a8cc25b510af73d98bb82a2320c9e0ae890f89c4ed2de201eb8101" prot="public">
          <name>S_DEBUG</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>public </para>
        </briefdescription>
        <detaileddescription>
<para>Log levels </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/module.h" line="424" column="15" bodyfile="src/module.h" bodystart="424" bodyend="433"/>
      </memberdef>
      <memberdef kind="enum" id="module_8h_1ade0789f1bee95be5f9005c6ff4e0b2ad" prot="public" static="no" strong="no">
        <type></type>
        <name>say_format</name>
        <enumvalue id="module_8h_1ade0789f1bee95be5f9005c6ff4e0b2ada2596d2f88ab84ec5fad0d37c77bf1f4d" prot="public">
          <name>SF_PLAIN</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="module_8h_1ade0789f1bee95be5f9005c6ff4e0b2adafe62145e440f6041a22a79d6abfeefc6" prot="public">
          <name>SF_JSON</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="module_8h_1ade0789f1bee95be5f9005c6ff4e0b2ada0f11e5d06e463c58dbf3a7e8079124bf" prot="public">
          <name>say_format_MAX</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Log formats. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/module.h" line="436" column="16" bodyfile="src/module.h" bodystart="436" bodyend="440"/>
      </memberdef>
      <memberdef kind="enum" id="module_8h_1a06fc87d81c62e9abb8790b6e5713c55b" prot="public" static="no" strong="no">
        <type></type>
        <name>@0</name>
        <enumvalue id="module_8h_1a06fc87d81c62e9abb8790b6e5713c55ba4e556d3f75a54e162feaa8e9451cfce7" prot="public">
          <name>COIO_READ</name>
          <initializer>= 0x1</initializer>
          <briefdescription>
<para>READ event. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="module_8h_1a06fc87d81c62e9abb8790b6e5713c55ba9ccd504861956d107f717efa66b3f1b7" prot="public">
          <name>COIO_WRITE</name>
          <initializer>= 0x2</initializer>
          <briefdescription>
<para>WRITE event. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>public </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/module.h" line="906" column="6" bodyfile="src/module.h" bodystart="906" bodyend="911"/>
      </memberdef>
      <memberdef kind="enum" id="module_8h_1af2d527c62a52f85cb173c79c31d20ce1" prot="public" static="no" strong="no">
        <type></type>
        <name>txn_isolation_level</name>
        <enumvalue id="module_8h_1af2d527c62a52f85cb173c79c31d20ce1a4f9fb36818af61558b13124ca0e02363" prot="public">
          <name>TXN_ISOLATION_DEFAULT</name>
          <briefdescription>
<para>Take isolation level from global default_isolation_level. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="module_8h_1af2d527c62a52f85cb173c79c31d20ce1a351aceaaa55693a90f5e33103d051947" prot="public">
          <name>TXN_ISOLATION_READ_COMMITTED</name>
          <briefdescription>
<para>Allow to read committed, but not confirmed changes. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="module_8h_1af2d527c62a52f85cb173c79c31d20ce1ab2411f8d6a9d68367da464d9fcff932f" prot="public">
          <name>TXN_ISOLATION_READ_CONFIRMED</name>
          <briefdescription>
<para>Allow to read only confirmed changes. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="module_8h_1af2d527c62a52f85cb173c79c31d20ce1afa0bc338b3e678625a61d16254991c7b" prot="public">
          <name>TXN_ISOLATION_BEST_EFFORT</name>
          <briefdescription>
<para>Determine isolation level automatically. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="module_8h_1af2d527c62a52f85cb173c79c31d20ce1a8e225c05de0c630a787eb113f64e3af4" prot="public">
          <name>txn_isolation_level_MAX</name>
          <briefdescription>
<para>Upper bound of valid values. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>public </para>
        </briefdescription>
        <detaileddescription>
<para>When a transaction calls <computeroutput>commit</computeroutput>, this action can last for some time until redo data is written to WAL. While such a <computeroutput>commit</computeroutput> call is in progress we call changes of such a transaction as &apos;committed&apos;, and when the process is finished - we call the changes as &apos;confirmed&apos;. One of the main options of a transaction is to see or not to see &apos;committed&apos; changes. Note that now there are different terminologies in different places. This enum uses new &apos;committed&apos; and &apos;confirmed&apos; states of transactions. Meanwhile in engined the first state is usually called as &apos;prepared&apos;, and the second as &apos;committed&apos; or &apos;completed&apos;. Warning: this enum is exposed in lua via ffi, and thus any change in items must be correspondingly modified on ffi.cdef(), see schema.lua. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/module.h" line="1229" column="25" bodyfile="src/module.h" bodystart="1229" bodyend="1240"/>
      </memberdef>
      <memberdef kind="enum" id="module_8h_1adf764cbdea00d65edcd07bb9953ad2b7" prot="public" static="no" strong="no">
        <type></type>
        <name>@1</name>
        <enumvalue id="module_8h_1adf764cbdea00d65edcd07bb9953ad2b7afdc4a3a1343ddde9cd823989746b952c" prot="public">
          <name>BOX_KEY_PART_DEF_IS_NULLABLE</name>
          <initializer>= 1 &lt;&lt; 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="module_8h_1adf764cbdea00d65edcd07bb9953ad2b7ad2e98bad103f326bc113cd03b1d16279" prot="public">
          <name>BOX_KEY_PART_DEF_EXCLUDE_NULL</name>
          <initializer>= 1 &lt;&lt; 1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Key part definition flags. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/module.h" line="1579" column="6" bodyfile="src/module.h" bodystart="1579" bodyend="1582"/>
      </memberdef>
      <memberdef kind="enum" id="module_8h_1a99fb83031ce9923c84392b4e92f956b5" prot="public" static="no" strong="no">
        <type></type>
        <name>@2</name>
        <enumvalue id="module_8h_1a99fb83031ce9923c84392b4e92f956b5a372d10ebd12378fbc28f503f5c14a433" prot="public">
          <name>BOX_KEY_PART_DEF_T_SIZE</name>
          <initializer>= 64</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>It is recommended to verify size of &lt;box_key_part_def_t&gt; against this constant on the module side at build time. </para>
        </briefdescription>
        <detaileddescription>
<para>Example:</para>
<para>| #if !defined(__cplusplus) &amp;&amp; !defined(static_assert) | #define static_assert _Static_assert | #endif | | (slash)* | * Verify that &lt;box_key_part_def_t&gt; has the same size when | * compiled within tarantool and within the module. | * | * It is important, because the module allocates an array of key | * parts and passes it to &lt;box_key_def_new_v2&gt;() tarantool | * function. | *(slash) | static_assert(sizeof(box_key_part_def_t) == BOX_KEY_PART_DEF_T_SIZE, | &quot;sizeof(box_key_part_def_t)&quot;);</para>
<para>This snippet is not part of <ref refid="module_8h" kindref="compound">module.h</ref>, because portability of static_assert() / _Static_assert() is dubious. It should be decision of a module author how portable its code should be. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/module.h" line="1608" column="6" bodyfile="src/module.h" bodystart="1608" bodyend="1610"/>
      </memberdef>
      <memberdef kind="enum" id="module_8h_1af4e6ca114114786cc23f3d5a1f8d14bf" prot="public" static="no" strong="no">
        <type></type>
        <name>field_type</name>
        <enumvalue id="module_8h_1af4e6ca114114786cc23f3d5a1f8d14bfa1496dbae1e5afd77be84e66d25eb0ce7" prot="public">
          <name>FIELD_TYPE_ANY</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="module_8h_1af4e6ca114114786cc23f3d5a1f8d14bfafd1efe86932fdd2e5d18fd32874c5c3b" prot="public">
          <name>FIELD_TYPE_UNSIGNED</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="module_8h_1af4e6ca114114786cc23f3d5a1f8d14bfa8b9861e133d87b6185ccafaeaf6bdc87" prot="public">
          <name>FIELD_TYPE_STRING</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="module_8h_1af4e6ca114114786cc23f3d5a1f8d14bfac731b5a0b1a08bd9f0ac6155acdc1f61" prot="public">
          <name>FIELD_TYPE_NUMBER</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="module_8h_1af4e6ca114114786cc23f3d5a1f8d14bfa8eae205ec4d6d151257362d6d83508e4" prot="public">
          <name>FIELD_TYPE_DOUBLE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="module_8h_1af4e6ca114114786cc23f3d5a1f8d14bfa989c69b141fcd3006979cd0a7cb363b8" prot="public">
          <name>FIELD_TYPE_INTEGER</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="module_8h_1af4e6ca114114786cc23f3d5a1f8d14bfabed56ffc9be37160e92b2a369d165fcd" prot="public">
          <name>FIELD_TYPE_BOOLEAN</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="module_8h_1af4e6ca114114786cc23f3d5a1f8d14bfaa9f637a8753d51e2ce7059f3f3cddc40" prot="public">
          <name>FIELD_TYPE_VARBINARY</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="module_8h_1af4e6ca114114786cc23f3d5a1f8d14bfaf018032109e6352e5bfbdf7f40013285" prot="public">
          <name>FIELD_TYPE_SCALAR</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="module_8h_1af4e6ca114114786cc23f3d5a1f8d14bfa3f791371bd78deeb15ea12226e076750" prot="public">
          <name>FIELD_TYPE_DECIMAL</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="module_8h_1af4e6ca114114786cc23f3d5a1f8d14bfa536ed6d452c5b1f82a8141f28829b8e6" prot="public">
          <name>FIELD_TYPE_UUID</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="module_8h_1af4e6ca114114786cc23f3d5a1f8d14bfa4670f3d742973be1d4d7236da42ae267" prot="public">
          <name>FIELD_TYPE_DATETIME</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="module_8h_1af4e6ca114114786cc23f3d5a1f8d14bfa12d7241945474251750a8c0e0a7117cc" prot="public">
          <name>FIELD_TYPE_INTERVAL</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="module_8h_1af4e6ca114114786cc23f3d5a1f8d14bfafbcca017643e1cedae264ae95b6c57f9" prot="public">
          <name>FIELD_TYPE_ARRAY</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="module_8h_1af4e6ca114114786cc23f3d5a1f8d14bfa54cefef16d36f636ad1ad146cd5c503b" prot="public">
          <name>FIELD_TYPE_MAP</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="module_8h_1af4e6ca114114786cc23f3d5a1f8d14bfad9d9ff6bc850b99a8230934e8257c79e" prot="public">
          <name>field_type_MAX</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>public </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/module.h" line="1914" column="16" bodyfile="src/module.h" bodystart="1914" bodyend="1931"/>
      </memberdef>
      <memberdef kind="enum" id="module_8h_1ac42b7e2d98df6589252f8ede07932619" prot="public" static="no" strong="no">
        <type></type>
        <name>on_conflict_action</name>
        <enumvalue id="module_8h_1ac42b7e2d98df6589252f8ede07932619aa9b27bf642c85cef5f63d92c1f880e63" prot="public">
          <name>ON_CONFLICT_ACTION_NONE</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="module_8h_1ac42b7e2d98df6589252f8ede07932619a6d155826ca6e1558368cc97992972760" prot="public">
          <name>ON_CONFLICT_ACTION_ROLLBACK</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="module_8h_1ac42b7e2d98df6589252f8ede07932619a43daf43f591f1749c7c808f78210681d" prot="public">
          <name>ON_CONFLICT_ACTION_ABORT</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="module_8h_1ac42b7e2d98df6589252f8ede07932619a2175ed647e746dea238b796d0b90dacd" prot="public">
          <name>ON_CONFLICT_ACTION_FAIL</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="module_8h_1ac42b7e2d98df6589252f8ede07932619a77780123eb51a8a3610058c60a7954aa" prot="public">
          <name>ON_CONFLICT_ACTION_IGNORE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="module_8h_1ac42b7e2d98df6589252f8ede07932619af3b9d80be641d3c38797a1cdeafad937" prot="public">
          <name>ON_CONFLICT_ACTION_REPLACE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="module_8h_1ac42b7e2d98df6589252f8ede07932619a659240554bae9c60e93814b09f78cbd9" prot="public">
          <name>ON_CONFLICT_ACTION_DEFAULT</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="module_8h_1ac42b7e2d98df6589252f8ede07932619aad32695f29bf98295ae2df20a3974d46" prot="public">
          <name>on_conflict_action_MAX</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/module.h" line="1933" column="24" bodyfile="src/module.h" bodystart="1933" bodyend="1942"/>
      </memberdef>
      <memberdef kind="enum" id="module_8h_1abc6126af1d45847bc59afa0aa3216b04" prot="public" static="no" strong="no">
        <type></type>
        <name>@3</name>
        <enumvalue id="module_8h_1abc6126af1d45847bc59afa0aa3216b04a05cae1bfc9671a38779ffd9dde4d7f58" prot="public">
          <name>BOX_SYSTEM_ID_MIN</name>
          <initializer>= 256</initializer>
          <briefdescription>
<para>Start of the reserved range of system spaces. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="module_8h_1abc6126af1d45847bc59afa0aa3216b04ab14386b6fac3c938ed3a3b614510bb72" prot="public">
          <name>BOX_VINYL_DEFERRED_DELETE_ID</name>
          <initializer>= 257</initializer>
          <briefdescription>
<para>Space if of _vinyl_deferred_delete. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="module_8h_1abc6126af1d45847bc59afa0aa3216b04a97f8ff937bc22208ebe19175eb0016a0" prot="public">
          <name>BOX_SCHEMA_ID</name>
          <initializer>= 272</initializer>
          <briefdescription>
<para>Space id of _schema. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="module_8h_1abc6126af1d45847bc59afa0aa3216b04a3bcd934a5e27f4aee628e875fd422af5" prot="public">
          <name>BOX_COLLATION_ID</name>
          <initializer>= 276</initializer>
          <briefdescription>
<para>Space id of _collation. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="module_8h_1abc6126af1d45847bc59afa0aa3216b04a3879bb29a2f51b4de4a923e4d6ba1b63" prot="public">
          <name>BOX_VCOLLATION_ID</name>
          <initializer>= 277</initializer>
          <briefdescription>
<para>Space id of _vcollation. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="module_8h_1abc6126af1d45847bc59afa0aa3216b04a2f5e17bb60cab866ec35b516c75c686a" prot="public">
          <name>BOX_SPACE_ID</name>
          <initializer>= 280</initializer>
          <briefdescription>
<para>Space id of _space. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="module_8h_1abc6126af1d45847bc59afa0aa3216b04abd4d512ca7fdebf9ec1a6bf7f11e1840" prot="public">
          <name>BOX_VSPACE_ID</name>
          <initializer>= 281</initializer>
          <briefdescription>
<para>Space id of _vspace view. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="module_8h_1abc6126af1d45847bc59afa0aa3216b04a43c8f5e53b0c9db9be2da424c152cec9" prot="public">
          <name>BOX_SEQUENCE_ID</name>
          <initializer>= 284</initializer>
          <briefdescription>
<para>Space id of _sequence. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="module_8h_1abc6126af1d45847bc59afa0aa3216b04ad41b03d39d656d7612c911d8a60582c3" prot="public">
          <name>BOX_SEQUENCE_DATA_ID</name>
          <initializer>= 285</initializer>
          <briefdescription>
<para>Space id of _sequence_data. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="module_8h_1abc6126af1d45847bc59afa0aa3216b04adb9d519142826402c9efc166df12428e" prot="public">
          <name>BOX_VSEQUENCE_ID</name>
          <initializer>= 286</initializer>
          <briefdescription>
<para>Space id of _vsequence view. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="module_8h_1abc6126af1d45847bc59afa0aa3216b04a482bf0fb6fc52ff01f40edb92705c95f" prot="public">
          <name>BOX_INDEX_ID</name>
          <initializer>= 288</initializer>
          <briefdescription>
<para>Space id of _index. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="module_8h_1abc6126af1d45847bc59afa0aa3216b04ac27ac3d0508d4e5f19f91053f7971cb7" prot="public">
          <name>BOX_VINDEX_ID</name>
          <initializer>= 289</initializer>
          <briefdescription>
<para>Space id of _vindex view. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="module_8h_1abc6126af1d45847bc59afa0aa3216b04a744b39a5e9efc8559776daba88b01dd3" prot="public">
          <name>BOX_FUNC_ID</name>
          <initializer>= 296</initializer>
          <briefdescription>
<para>Space id of _func. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="module_8h_1abc6126af1d45847bc59afa0aa3216b04a8cb7f39326f7dfc0afcf9dc32f5314da" prot="public">
          <name>BOX_VFUNC_ID</name>
          <initializer>= 297</initializer>
          <briefdescription>
<para>Space id of _vfunc view. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="module_8h_1abc6126af1d45847bc59afa0aa3216b04a0f673849e4f92136273e92af04637e81" prot="public">
          <name>BOX_USER_ID</name>
          <initializer>= 304</initializer>
          <briefdescription>
<para>Space id of _user. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="module_8h_1abc6126af1d45847bc59afa0aa3216b04ab508bf1accff87e8422bb32785e505bb" prot="public">
          <name>BOX_VUSER_ID</name>
          <initializer>= 305</initializer>
          <briefdescription>
<para>Space id of _vuser view. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="module_8h_1abc6126af1d45847bc59afa0aa3216b04a1bbd73fc6936dfa1977c7ea18677c4f9" prot="public">
          <name>BOX_PRIV_ID</name>
          <initializer>= 312</initializer>
          <briefdescription>
<para>Space id of _priv. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="module_8h_1abc6126af1d45847bc59afa0aa3216b04a37bb51c69ca47d95c4ce5777c9640613" prot="public">
          <name>BOX_VPRIV_ID</name>
          <initializer>= 313</initializer>
          <briefdescription>
<para>Space id of _vpriv view. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="module_8h_1abc6126af1d45847bc59afa0aa3216b04ab05d38e39c97e255ecaf3e48db943d62" prot="public">
          <name>BOX_CLUSTER_ID</name>
          <initializer>= 320</initializer>
          <briefdescription>
<para>Space id of _cluster. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="module_8h_1abc6126af1d45847bc59afa0aa3216b04add17b7c9ec4c6322a8344e00e8c25c62" prot="public">
          <name>BOX_TRIGGER_ID</name>
          <initializer>= 328</initializer>
          <briefdescription>
<para>Space id of _trigger. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="module_8h_1abc6126af1d45847bc59afa0aa3216b04a41c61daeecfce31f01f55ac6eb971f72" prot="public">
          <name>BOX_TRUNCATE_ID</name>
          <initializer>= 330</initializer>
          <briefdescription>
<para>Space id of _truncate. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="module_8h_1abc6126af1d45847bc59afa0aa3216b04ad4db1b50b1f6446f75a8db82e0327374" prot="public">
          <name>BOX_SPACE_SEQUENCE_ID</name>
          <initializer>= 340</initializer>
          <briefdescription>
<para>Space id of _space_sequence. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="module_8h_1abc6126af1d45847bc59afa0aa3216b04a99e954bd1de658ba6586d7354fe06378" prot="public">
          <name>BOX_FK_CONSTRAINT_ID</name>
          <initializer>= 356</initializer>
          <briefdescription>
<para>Space id of _fk_constraint. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="module_8h_1abc6126af1d45847bc59afa0aa3216b04ae97c7da44f193fcfea35afe2dfe98dc8" prot="public">
          <name>BOX_CK_CONSTRAINT_ID</name>
          <initializer>= 364</initializer>
          <briefdescription>
<para>Space id of _ck_contraint. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="module_8h_1abc6126af1d45847bc59afa0aa3216b04a5590980099004e7b53cd73cd5418f98b" prot="public">
          <name>BOX_FUNC_INDEX_ID</name>
          <initializer>= 372</initializer>
          <briefdescription>
<para>Space id of _func_index. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="module_8h_1abc6126af1d45847bc59afa0aa3216b04a03e08a677af627a4199839a08b9020e8" prot="public">
          <name>BOX_SESSION_SETTINGS_ID</name>
          <initializer>= 380</initializer>
          <briefdescription>
<para>Space id of _session_settings. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="module_8h_1abc6126af1d45847bc59afa0aa3216b04abb87df1b61192ee3aea178534071b9cd" prot="public">
          <name>BOX_SYSTEM_ID_MAX</name>
          <initializer>= 511</initializer>
          <briefdescription>
<para>End of the reserved range of system spaces. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="module_8h_1abc6126af1d45847bc59afa0aa3216b04a4816eb59cfbc3b8d480e61cab1cf26d4" prot="public">
          <name>BOX_ID_NIL</name>
          <initializer>= 2147483647</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>public </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/module.h" line="1976" column="6" bodyfile="src/module.h" bodystart="1976" bodyend="2032"/>
      </memberdef>
      <memberdef kind="enum" id="module_8h_1a2693ce4bd8fa71e8ac1e5272fc64d17e" prot="public" static="no" strong="no">
        <type></type>
        <name>iterator_type</name>
        <enumvalue id="module_8h_1a2693ce4bd8fa71e8ac1e5272fc64d17ea8396fa34bbd5b7136bbbb9686f5e5615" prot="public">
          <name>ITER_EQ</name>
          <initializer>=  0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="module_8h_1a2693ce4bd8fa71e8ac1e5272fc64d17ea99186231b0ac5ec676a71afc0612b934" prot="public">
          <name>ITER_REQ</name>
          <initializer>=  1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="module_8h_1a2693ce4bd8fa71e8ac1e5272fc64d17eae09d7cec3013e9257317edec9b0a84f5" prot="public">
          <name>ITER_ALL</name>
          <initializer>=  2</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="module_8h_1a2693ce4bd8fa71e8ac1e5272fc64d17eadac2b1ae459e929b958e8d9e16d597fd" prot="public">
          <name>ITER_LT</name>
          <initializer>=  3</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="module_8h_1a2693ce4bd8fa71e8ac1e5272fc64d17ea30fcfd7a077493529639a79b6ef65f26" prot="public">
          <name>ITER_LE</name>
          <initializer>=  4</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="module_8h_1a2693ce4bd8fa71e8ac1e5272fc64d17ea77cb460ef7655f96706db717c7da4978" prot="public">
          <name>ITER_GE</name>
          <initializer>=  5</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="module_8h_1a2693ce4bd8fa71e8ac1e5272fc64d17ea8d1b8656e9dcc74659ca3be3bc9853b9" prot="public">
          <name>ITER_GT</name>
          <initializer>=  6</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="module_8h_1a2693ce4bd8fa71e8ac1e5272fc64d17ea36639c9296e659aa5327291341d5c684" prot="public">
          <name>ITER_BITS_ALL_SET</name>
          <initializer>=  7</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="module_8h_1a2693ce4bd8fa71e8ac1e5272fc64d17ea414a9f1e27fd3107a08a6d4ae82d487c" prot="public">
          <name>ITER_BITS_ANY_SET</name>
          <initializer>=  8</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="module_8h_1a2693ce4bd8fa71e8ac1e5272fc64d17ea7932b409a1ac013cf61882260176e7b7" prot="public">
          <name>ITER_BITS_ALL_NOT_SET</name>
          <initializer>=  9</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="module_8h_1a2693ce4bd8fa71e8ac1e5272fc64d17ea7061ef582ade83934ff59be90e9d2506" prot="public">
          <name>ITER_OVERLAPS</name>
          <initializer>= 10</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="module_8h_1a2693ce4bd8fa71e8ac1e5272fc64d17ea5ba34edc565f08fc941fa73e517bc413" prot="public">
          <name>ITER_NEIGHBOR</name>
          <initializer>= 11</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="module_8h_1a2693ce4bd8fa71e8ac1e5272fc64d17ea092f494fc2a6fa3346a2b3a322efc66e" prot="public">
          <name>iterator_type_MAX</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>public </para>
        </briefdescription>
        <detaileddescription>
<para>Controls how to iterate over tuples in an index. Different index types support different iterator types. For example, one can start iteration from a particular value (request key) and then retrieve all tuples where keys are greater or equal (= GE) to this key.</para>
<para>If iterator type is not supported by the selected index type, iterator constructor must fail with ER_UNSUPPORTED. To be selectable for primary key, an index must support at least ITER_EQ and ITER_GE types.</para>
<para>NULL value of request key corresponds to the first or last key in the index, depending on iteration direction. (first key for GE and GT types, and last key for LE and LT). Therefore, to iterate over all tuples in an index, one can use ITER_GE or ITER_LE iteration types with start key equal to NULL. For ITER_EQ, the key must not be NULL. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/module.h" line="2446" column="19" bodyfile="src/module.h" bodystart="2446" bodyend="2461"/>
      </memberdef>
      <memberdef kind="enum" id="module_8h_1a029e9d16d637a97b37560ccf24c4adce" prot="public" static="no" strong="no">
        <type></type>
        <name>box_error_code</name>
        <enumvalue id="module_8h_1a029e9d16d637a97b37560ccf24c4adcead62756b0ef341430c318e631713512dc" prot="public">
          <name>ER_UNKNOWN</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="module_8h_1a029e9d16d637a97b37560ccf24c4adcea083785e356837f4303efb5294c0fcf25" prot="public">
          <name>ER_ILLEGAL_PARAMS</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="module_8h_1a029e9d16d637a97b37560ccf24c4adcea3148df88f7c2ac93774e87f732aaa5ee" prot="public">
          <name>ER_MEMORY_ISSUE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="module_8h_1a029e9d16d637a97b37560ccf24c4adcea555ec8745bbad48c3ca3eacdc189c946" prot="public">
          <name>ER_TUPLE_FOUND</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="module_8h_1a029e9d16d637a97b37560ccf24c4adcea915cf379edd725b9e2fca241275af237" prot="public">
          <name>ER_TUPLE_NOT_FOUND</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="module_8h_1a029e9d16d637a97b37560ccf24c4adcea18f0b006529c8960bc7afc8555c43118" prot="public">
          <name>ER_UNSUPPORTED</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="module_8h_1a029e9d16d637a97b37560ccf24c4adceab3758597613f16aeb557c3642e8b63ed" prot="public">
          <name>ER_NONMASTER</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="module_8h_1a029e9d16d637a97b37560ccf24c4adceac1d18087eba24577c745d2f407216763" prot="public">
          <name>ER_READONLY</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="module_8h_1a029e9d16d637a97b37560ccf24c4adcea795138f05d99522d4d9164647e70cb54" prot="public">
          <name>ER_INJECTION</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="module_8h_1a029e9d16d637a97b37560ccf24c4adcea7d5818c3d9be87d07d5ef4976f3bf171" prot="public">
          <name>ER_CREATE_SPACE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="module_8h_1a029e9d16d637a97b37560ccf24c4adcea1c51665a15567a23818bb9f9ae997592" prot="public">
          <name>ER_SPACE_EXISTS</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="module_8h_1a029e9d16d637a97b37560ccf24c4adcea52847681ecc21b03359aee4e45561099" prot="public">
          <name>ER_DROP_SPACE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="module_8h_1a029e9d16d637a97b37560ccf24c4adcea522a6590530df738e72bef3ffffa4ceb" prot="public">
          <name>ER_ALTER_SPACE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="module_8h_1a029e9d16d637a97b37560ccf24c4adceae035090b06ee956c3956e2ec3a80819a" prot="public">
          <name>ER_INDEX_TYPE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="module_8h_1a029e9d16d637a97b37560ccf24c4adcea22b12f501d3ba37794f49edb71272615" prot="public">
          <name>ER_MODIFY_INDEX</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="module_8h_1a029e9d16d637a97b37560ccf24c4adcea7331c3c0e9746481f46313638289bad9" prot="public">
          <name>ER_LAST_DROP</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="module_8h_1a029e9d16d637a97b37560ccf24c4adcea22de5f99ce56a257db455ae1bec5ccc1" prot="public">
          <name>ER_TUPLE_FORMAT_LIMIT</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="module_8h_1a029e9d16d637a97b37560ccf24c4adcea49ca969a2a007412fadf57209de4e83c" prot="public">
          <name>ER_DROP_PRIMARY_KEY</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="module_8h_1a029e9d16d637a97b37560ccf24c4adcea5a55ddcc3c2b1d7fd00c1d0e6b6e2f78" prot="public">
          <name>ER_KEY_PART_TYPE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="module_8h_1a029e9d16d637a97b37560ccf24c4adcea737d869ee35f9a30896f7a431fb7820e" prot="public">
          <name>ER_EXACT_MATCH</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="module_8h_1a029e9d16d637a97b37560ccf24c4adcea3bed78a895978f985c4175e5f7add9a4" prot="public">
          <name>ER_INVALID_MSGPACK</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="module_8h_1a029e9d16d637a97b37560ccf24c4adcea089d7a2f7a86ca6b41c6d81daa93bed8" prot="public">
          <name>ER_PROC_RET</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="module_8h_1a029e9d16d637a97b37560ccf24c4adceac95c00dd2a6e6b2c00f94f4c86827a60" prot="public">
          <name>ER_TUPLE_NOT_ARRAY</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="module_8h_1a029e9d16d637a97b37560ccf24c4adcea8566015030ef6c9358d1c8de84997354" prot="public">
          <name>ER_FIELD_TYPE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="module_8h_1a029e9d16d637a97b37560ccf24c4adceaec78f6c6801993be56674cab8c03a10c" prot="public">
          <name>ER_INDEX_PART_TYPE_MISMATCH</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="module_8h_1a029e9d16d637a97b37560ccf24c4adcea6e08daeedafc6b6c27a30d28e1b4c7b0" prot="public">
          <name>ER_UPDATE_SPLICE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="module_8h_1a029e9d16d637a97b37560ccf24c4adceaeb3d713a18373881dc0edaba61c4af45" prot="public">
          <name>ER_UPDATE_ARG_TYPE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="module_8h_1a029e9d16d637a97b37560ccf24c4adcea1470af30949764265336ac82d0fada57" prot="public">
          <name>ER_FORMAT_MISMATCH_INDEX_PART</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="module_8h_1a029e9d16d637a97b37560ccf24c4adceaa9c66a7cade20a35b8488725a8ce820e" prot="public">
          <name>ER_UNKNOWN_UPDATE_OP</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="module_8h_1a029e9d16d637a97b37560ccf24c4adcea6e8d29c4e259e5a054a78a6f941bb6e0" prot="public">
          <name>ER_UPDATE_FIELD</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="module_8h_1a029e9d16d637a97b37560ccf24c4adceaf3f0d8ade3c8e46d5a6c61bf3fa01ae8" prot="public">
          <name>ER_FUNCTION_TX_ACTIVE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="module_8h_1a029e9d16d637a97b37560ccf24c4adcea42a453366abe6ac41fbdbcaa66e6f5bc" prot="public">
          <name>ER_KEY_PART_COUNT</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="module_8h_1a029e9d16d637a97b37560ccf24c4adceab4ad4d4958b12e8781c8487e40e8f74e" prot="public">
          <name>ER_PROC_LUA</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="module_8h_1a029e9d16d637a97b37560ccf24c4adceac017215ce215ee8a12639c8b7c81aac9" prot="public">
          <name>ER_NO_SUCH_PROC</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="module_8h_1a029e9d16d637a97b37560ccf24c4adcea472ad97a11cef075c155134e4cda5902" prot="public">
          <name>ER_NO_SUCH_TRIGGER</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="module_8h_1a029e9d16d637a97b37560ccf24c4adcea9120706b962660717ccd4596bd097b22" prot="public">
          <name>ER_NO_SUCH_INDEX_ID</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="module_8h_1a029e9d16d637a97b37560ccf24c4adceaf6a8ea01c74a4403c565d0658f9f4129" prot="public">
          <name>ER_NO_SUCH_SPACE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="module_8h_1a029e9d16d637a97b37560ccf24c4adceaa14309045d0e450b74c42b349fb4aae1" prot="public">
          <name>ER_NO_SUCH_FIELD_NO</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="module_8h_1a029e9d16d637a97b37560ccf24c4adceaf9060d625dfb665537bf3ec39c1d0b6d" prot="public">
          <name>ER_EXACT_FIELD_COUNT</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="module_8h_1a029e9d16d637a97b37560ccf24c4adcea95d6c495b13373efbdec9578c2cc0f26" prot="public">
          <name>ER_FIELD_MISSING</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="module_8h_1a029e9d16d637a97b37560ccf24c4adceaa6ff6ed88c3f4bdb1b54677cae7655e6" prot="public">
          <name>ER_WAL_IO</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="module_8h_1a029e9d16d637a97b37560ccf24c4adcea1328ef0f8682f590ea0911db19cfc476" prot="public">
          <name>ER_MORE_THAN_ONE_TUPLE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="module_8h_1a029e9d16d637a97b37560ccf24c4adceac4dcd43183c95741c9e77c7f889ca593" prot="public">
          <name>ER_ACCESS_DENIED</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="module_8h_1a029e9d16d637a97b37560ccf24c4adcea64c45b86c425a4e26301274a52f69312" prot="public">
          <name>ER_CREATE_USER</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="module_8h_1a029e9d16d637a97b37560ccf24c4adcea55679bb71c755ac0257ca128a297a984" prot="public">
          <name>ER_DROP_USER</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="module_8h_1a029e9d16d637a97b37560ccf24c4adcea0c0deeaff648cf677945f747bd18ba7f" prot="public">
          <name>ER_NO_SUCH_USER</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="module_8h_1a029e9d16d637a97b37560ccf24c4adcead4dff6d559cc784b715f1d877d49f843" prot="public">
          <name>ER_USER_EXISTS</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="module_8h_1a029e9d16d637a97b37560ccf24c4adceab1a4cc23e6ca3a9f7d40dbd4d043f38f" prot="public">
          <name>ER_PASSWORD_MISMATCH</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="module_8h_1a029e9d16d637a97b37560ccf24c4adcea9ea6d40263cfa80cce7fbb0f5dbd8ae6" prot="public">
          <name>ER_UNKNOWN_REQUEST_TYPE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="module_8h_1a029e9d16d637a97b37560ccf24c4adcea38d5a4bf290665417189dcb4f5de0e7d" prot="public">
          <name>ER_UNKNOWN_SCHEMA_OBJECT</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="module_8h_1a029e9d16d637a97b37560ccf24c4adcea00afe88d993452ecb57bd2f0be78606b" prot="public">
          <name>ER_CREATE_FUNCTION</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="module_8h_1a029e9d16d637a97b37560ccf24c4adceac84d49703711e511d91d49edd06154f5" prot="public">
          <name>ER_NO_SUCH_FUNCTION</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="module_8h_1a029e9d16d637a97b37560ccf24c4adcea5f97d70b658bef8efd7d44e5336c8f50" prot="public">
          <name>ER_FUNCTION_EXISTS</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="module_8h_1a029e9d16d637a97b37560ccf24c4adcea853c238c6bfd81fbe0af889f7dd1fcf1" prot="public">
          <name>ER_BEFORE_REPLACE_RET</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="module_8h_1a029e9d16d637a97b37560ccf24c4adceacfa83feb9c515e8970164977c227343a" prot="public">
          <name>ER_MULTISTATEMENT_TRANSACTION</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="module_8h_1a029e9d16d637a97b37560ccf24c4adcea82438877d2ad82fc2375b99682b9bdd0" prot="public">
          <name>ER_TRIGGER_EXISTS</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="module_8h_1a029e9d16d637a97b37560ccf24c4adceaf95ab9c663e55898207b85fd61872d60" prot="public">
          <name>ER_USER_MAX</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="module_8h_1a029e9d16d637a97b37560ccf24c4adceae7e52ace70161560a252257435c081b2" prot="public">
          <name>ER_NO_SUCH_ENGINE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="module_8h_1a029e9d16d637a97b37560ccf24c4adcea732ca2c4d1eca1da0301ab6786c5eda0" prot="public">
          <name>ER_RELOAD_CFG</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="module_8h_1a029e9d16d637a97b37560ccf24c4adceae5865d06fcf35d099f775a77911cb1da" prot="public">
          <name>ER_CFG</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="module_8h_1a029e9d16d637a97b37560ccf24c4adceaf9db722401d00e11dc98f40ad99f89b3" prot="public">
          <name>ER_SAVEPOINT_EMPTY_TX</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="module_8h_1a029e9d16d637a97b37560ccf24c4adcea83c059fca85f85fa5a7e7702e7bf4eb3" prot="public">
          <name>ER_NO_SUCH_SAVEPOINT</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="module_8h_1a029e9d16d637a97b37560ccf24c4adcea3709ada2cbee1d56a71de7e969663425" prot="public">
          <name>ER_UNKNOWN_REPLICA</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="module_8h_1a029e9d16d637a97b37560ccf24c4adcea5da84c579837d52cd965317665839c55" prot="public">
          <name>ER_REPLICASET_UUID_MISMATCH</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="module_8h_1a029e9d16d637a97b37560ccf24c4adcea09b6b42b6817cd0bfdc6c889e440fa97" prot="public">
          <name>ER_INVALID_UUID</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="module_8h_1a029e9d16d637a97b37560ccf24c4adceab518df09cd1999351eb89495f085dd17" prot="public">
          <name>ER_REPLICASET_UUID_IS_RO</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="module_8h_1a029e9d16d637a97b37560ccf24c4adceab9962e533ce417e1612ec2860ae312c5" prot="public">
          <name>ER_INSTANCE_UUID_MISMATCH</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="module_8h_1a029e9d16d637a97b37560ccf24c4adcea1d4143517a7caaa1336eca47fdaf2feb" prot="public">
          <name>ER_REPLICA_ID_IS_RESERVED</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="module_8h_1a029e9d16d637a97b37560ccf24c4adcea17074dca146150d7c41ec9fc955d6b67" prot="public">
          <name>ER_INVALID_ORDER</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="module_8h_1a029e9d16d637a97b37560ccf24c4adcea3eb60fdf45a736a67bd1c4e379286ff9" prot="public">
          <name>ER_MISSING_REQUEST_FIELD</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="module_8h_1a029e9d16d637a97b37560ccf24c4adcea58d6ae05846e90c0adc6da50b022c2ce" prot="public">
          <name>ER_IDENTIFIER</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="module_8h_1a029e9d16d637a97b37560ccf24c4adcea920a6d9e8fd17a2f16df53b6ca4f622b" prot="public">
          <name>ER_DROP_FUNCTION</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="module_8h_1a029e9d16d637a97b37560ccf24c4adceaf31717ec0b20bc4b4cdc28c704331da2" prot="public">
          <name>ER_ITERATOR_TYPE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="module_8h_1a029e9d16d637a97b37560ccf24c4adcea9616f6384423a5ede047dcb8a040cd01" prot="public">
          <name>ER_REPLICA_MAX</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="module_8h_1a029e9d16d637a97b37560ccf24c4adcea0109fd41527db809bb9a42c317cd9152" prot="public">
          <name>ER_INVALID_XLOG</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="module_8h_1a029e9d16d637a97b37560ccf24c4adcea7a1a0c5f9ac263c0e9ec0be60a5aaf3d" prot="public">
          <name>ER_INVALID_XLOG_NAME</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="module_8h_1a029e9d16d637a97b37560ccf24c4adceac33adee25aff444453494e2fd91c3fe2" prot="public">
          <name>ER_INVALID_XLOG_ORDER</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="module_8h_1a029e9d16d637a97b37560ccf24c4adcea1a7fd03f9987c782bd6aed5716efccf3" prot="public">
          <name>ER_NO_CONNECTION</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="module_8h_1a029e9d16d637a97b37560ccf24c4adceac4c2c8fe486838aee543ee531df62f60" prot="public">
          <name>ER_TIMEOUT</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="module_8h_1a029e9d16d637a97b37560ccf24c4adcea374a879f5062c4e25b06129a2c9030b6" prot="public">
          <name>ER_ACTIVE_TRANSACTION</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="module_8h_1a029e9d16d637a97b37560ccf24c4adcea18d9dbea9dc137920bb2b57ec48b32d5" prot="public">
          <name>ER_CURSOR_NO_TRANSACTION</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="module_8h_1a029e9d16d637a97b37560ccf24c4adcea62de48ef00c6ebd24f8fd6ebe2bfc248" prot="public">
          <name>ER_CROSS_ENGINE_TRANSACTION</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="module_8h_1a029e9d16d637a97b37560ccf24c4adcea6e40f96042f5e46b51024400d9e0e58c" prot="public">
          <name>ER_NO_SUCH_ROLE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="module_8h_1a029e9d16d637a97b37560ccf24c4adcea4a11282742a05bf1e57529b2189f1eb4" prot="public">
          <name>ER_ROLE_EXISTS</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="module_8h_1a029e9d16d637a97b37560ccf24c4adceaea89ae2d186ceba5790899969558d940" prot="public">
          <name>ER_CREATE_ROLE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="module_8h_1a029e9d16d637a97b37560ccf24c4adcea90f6c2fcdbb2b411bdba75e1645b0f15" prot="public">
          <name>ER_INDEX_EXISTS</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="module_8h_1a029e9d16d637a97b37560ccf24c4adcea3208768c2f7f1a5e3be524c0f03798fe" prot="public">
          <name>ER_SESSION_CLOSED</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="module_8h_1a029e9d16d637a97b37560ccf24c4adcead121cdef9ddd55d0e9b6eabf51bcee6d" prot="public">
          <name>ER_ROLE_LOOP</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="module_8h_1a029e9d16d637a97b37560ccf24c4adcea95ef86782b0864d455507d1c5f6627b9" prot="public">
          <name>ER_GRANT</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="module_8h_1a029e9d16d637a97b37560ccf24c4adceaedf54374271a016ac5ae60cc04d3d322" prot="public">
          <name>ER_PRIV_GRANTED</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="module_8h_1a029e9d16d637a97b37560ccf24c4adcead95ff3ab7d7eafad1ecea0f6e999b213" prot="public">
          <name>ER_ROLE_GRANTED</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="module_8h_1a029e9d16d637a97b37560ccf24c4adcea1afc5f6db602c0134e922bc5b84d93ba" prot="public">
          <name>ER_PRIV_NOT_GRANTED</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="module_8h_1a029e9d16d637a97b37560ccf24c4adceaf79a84184dc400b57904b2a5b9223db6" prot="public">
          <name>ER_ROLE_NOT_GRANTED</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="module_8h_1a029e9d16d637a97b37560ccf24c4adceaca35862162578745def43259c8cea9a7" prot="public">
          <name>ER_MISSING_SNAPSHOT</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="module_8h_1a029e9d16d637a97b37560ccf24c4adcea3c2df12a782304296d68a46829166bf0" prot="public">
          <name>ER_CANT_UPDATE_PRIMARY_KEY</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="module_8h_1a029e9d16d637a97b37560ccf24c4adcea29444ca5432c290c29bac32d8b140cbd" prot="public">
          <name>ER_UPDATE_INTEGER_OVERFLOW</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="module_8h_1a029e9d16d637a97b37560ccf24c4adcea03bc242c7dcdec40a3cc0d85e8bee350" prot="public">
          <name>ER_GUEST_USER_PASSWORD</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="module_8h_1a029e9d16d637a97b37560ccf24c4adcea42b4986788e6887f9120d6f1ee10db0a" prot="public">
          <name>ER_TRANSACTION_CONFLICT</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="module_8h_1a029e9d16d637a97b37560ccf24c4adcea413741374af7ce9c0cc24f26933f0742" prot="public">
          <name>ER_UNSUPPORTED_PRIV</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="module_8h_1a029e9d16d637a97b37560ccf24c4adcea149c88e1407b23310ef5fb72b7574480" prot="public">
          <name>ER_LOAD_FUNCTION</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="module_8h_1a029e9d16d637a97b37560ccf24c4adcea90078819e285c954279b732836440b52" prot="public">
          <name>ER_FUNCTION_LANGUAGE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="module_8h_1a029e9d16d637a97b37560ccf24c4adceaa3086ed7c8c02c4f049dac180b318a9d" prot="public">
          <name>ER_RTREE_RECT</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="module_8h_1a029e9d16d637a97b37560ccf24c4adcea1857821a588fc39761c07c29481080cf" prot="public">
          <name>ER_PROC_C</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="module_8h_1a029e9d16d637a97b37560ccf24c4adceae6b2172e36fabaf0af5246bcc92de31c" prot="public">
          <name>ER_UNKNOWN_RTREE_INDEX_DISTANCE_TYPE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="module_8h_1a029e9d16d637a97b37560ccf24c4adcea45c1723eef247a5af5a119ab71c0043a" prot="public">
          <name>ER_PROTOCOL</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="module_8h_1a029e9d16d637a97b37560ccf24c4adceac5833a6888748c8ef30c2f9f8e889d83" prot="public">
          <name>ER_UPSERT_UNIQUE_SECONDARY_KEY</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="module_8h_1a029e9d16d637a97b37560ccf24c4adcea9e9a7d636fba092f8a2fd1a35f12dd8a" prot="public">
          <name>ER_WRONG_INDEX_RECORD</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="module_8h_1a029e9d16d637a97b37560ccf24c4adceae32d3117d0d019bdd04b8b0a8633bd00" prot="public">
          <name>ER_WRONG_INDEX_PARTS</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="module_8h_1a029e9d16d637a97b37560ccf24c4adceaeea5ee0f4101c259b2d06b8ea781938a" prot="public">
          <name>ER_WRONG_INDEX_OPTIONS</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="module_8h_1a029e9d16d637a97b37560ccf24c4adceab42a48e07d8d3d71adabbbff0839e816" prot="public">
          <name>ER_WRONG_SCHEMA_VERSION</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="module_8h_1a029e9d16d637a97b37560ccf24c4adcea4d931e88433922b8d810fd18615373c5" prot="public">
          <name>ER_MEMTX_MAX_TUPLE_SIZE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="module_8h_1a029e9d16d637a97b37560ccf24c4adceaa5f3eea8b4660fac9264383e38ce47f5" prot="public">
          <name>ER_WRONG_SPACE_OPTIONS</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="module_8h_1a029e9d16d637a97b37560ccf24c4adceac22fcd757993f94e299bc672bab878e6" prot="public">
          <name>ER_UNSUPPORTED_INDEX_FEATURE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="module_8h_1a029e9d16d637a97b37560ccf24c4adcead657d5d5ccc5636a5cd9180d2cea2386" prot="public">
          <name>ER_VIEW_IS_RO</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="module_8h_1a029e9d16d637a97b37560ccf24c4adcea87496538b30889fc137828b91acfe220" prot="public">
          <name>ER_NO_TRANSACTION</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="module_8h_1a029e9d16d637a97b37560ccf24c4adcea1003a54aec6e4fe46c3aec03673a9e1c" prot="public">
          <name>ER_SYSTEM</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="module_8h_1a029e9d16d637a97b37560ccf24c4adcea21be1f7fc9bf0f08ff52161a579f8a26" prot="public">
          <name>ER_LOADING</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="module_8h_1a029e9d16d637a97b37560ccf24c4adcea5bd74b209dcd29667742ce38fde44a51" prot="public">
          <name>ER_CONNECTION_TO_SELF</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="module_8h_1a029e9d16d637a97b37560ccf24c4adcea0800b7500ad5ff81209464aef6a035da" prot="public">
          <name>ER_KEY_PART_IS_TOO_LONG</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="module_8h_1a029e9d16d637a97b37560ccf24c4adcea3e0e230fb0cf8e09e4aac8c250ea952d" prot="public">
          <name>ER_COMPRESSION</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="module_8h_1a029e9d16d637a97b37560ccf24c4adcea9c6cadbe15ab1c5261ac8b4a35a4714f" prot="public">
          <name>ER_CHECKPOINT_IN_PROGRESS</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="module_8h_1a029e9d16d637a97b37560ccf24c4adcea6c6aedacd84bf451c16d9a89223ff6ef" prot="public">
          <name>ER_SUB_STMT_MAX</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="module_8h_1a029e9d16d637a97b37560ccf24c4adceac8b64f4feeb720545a2ae0afae8d0eb1" prot="public">
          <name>ER_COMMIT_IN_SUB_STMT</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="module_8h_1a029e9d16d637a97b37560ccf24c4adceafbe5bf91dfdbff8eb580df5741b4660e" prot="public">
          <name>ER_ROLLBACK_IN_SUB_STMT</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="module_8h_1a029e9d16d637a97b37560ccf24c4adcea6050e8f152b5c1752a30952ec4fa2119" prot="public">
          <name>ER_DECOMPRESSION</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="module_8h_1a029e9d16d637a97b37560ccf24c4adceaf89045733c8c2ccec1333c58c9f8f5bb" prot="public">
          <name>ER_INVALID_XLOG_TYPE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="module_8h_1a029e9d16d637a97b37560ccf24c4adceab0cc876ce6716d6a1ee5ef09fa348628" prot="public">
          <name>ER_ALREADY_RUNNING</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="module_8h_1a029e9d16d637a97b37560ccf24c4adceaeb1eed1958e10749eaf05a3bf5bb5a27" prot="public">
          <name>ER_INDEX_FIELD_COUNT_LIMIT</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="module_8h_1a029e9d16d637a97b37560ccf24c4adcea5ba2ad54d33036978a0f0e899bc3aca2" prot="public">
          <name>ER_LOCAL_INSTANCE_ID_IS_READ_ONLY</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="module_8h_1a029e9d16d637a97b37560ccf24c4adcea88b5084c59d879e5247301b97bbbcb7d" prot="public">
          <name>ER_BACKUP_IN_PROGRESS</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="module_8h_1a029e9d16d637a97b37560ccf24c4adceaa099f2423ed8e5d216d85ce0d42df8fd" prot="public">
          <name>ER_READ_VIEW_ABORTED</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="module_8h_1a029e9d16d637a97b37560ccf24c4adcea9f5a968d32b043fb3553ef8f78375ace" prot="public">
          <name>ER_INVALID_INDEX_FILE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="module_8h_1a029e9d16d637a97b37560ccf24c4adceabf81e6613688bb226ab3c4be2009cf44" prot="public">
          <name>ER_INVALID_RUN_FILE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="module_8h_1a029e9d16d637a97b37560ccf24c4adcea26adba54df85dc51f772427e4a5e9f70" prot="public">
          <name>ER_INVALID_VYLOG_FILE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="module_8h_1a029e9d16d637a97b37560ccf24c4adcea6b35bdc81293123ff88b1f3919b9fb0f" prot="public">
          <name>ER_CASCADE_ROLLBACK</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="module_8h_1a029e9d16d637a97b37560ccf24c4adcea5c7c4405e7cf553cfe1247fb12f74aba" prot="public">
          <name>ER_VY_QUOTA_TIMEOUT</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="module_8h_1a029e9d16d637a97b37560ccf24c4adcea573b21d06f15def6e9578d673963e404" prot="public">
          <name>ER_PARTIAL_KEY</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="module_8h_1a029e9d16d637a97b37560ccf24c4adceae46de37772287cd5faac752f62e0d018" prot="public">
          <name>ER_TRUNCATE_SYSTEM_SPACE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="module_8h_1a029e9d16d637a97b37560ccf24c4adcea7e11217b14f48b0fa0fd877f75de3567" prot="public">
          <name>ER_LOAD_MODULE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="module_8h_1a029e9d16d637a97b37560ccf24c4adceac8bce7455d4683dcf5cfa44884dbc8d0" prot="public">
          <name>ER_VINYL_MAX_TUPLE_SIZE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="module_8h_1a029e9d16d637a97b37560ccf24c4adceaac60db5ab42a7dd06fc16b0eccda0a1d" prot="public">
          <name>ER_WRONG_DD_VERSION</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="module_8h_1a029e9d16d637a97b37560ccf24c4adcea0c4689e8a3b3908a0de425d0290d2402" prot="public">
          <name>ER_WRONG_SPACE_FORMAT</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="module_8h_1a029e9d16d637a97b37560ccf24c4adcea64b424a8d9ccbe5701f9b112b1c2fcd8" prot="public">
          <name>ER_CREATE_SEQUENCE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="module_8h_1a029e9d16d637a97b37560ccf24c4adcea41064625e521d4eeb5e3c87f7b8b4786" prot="public">
          <name>ER_ALTER_SEQUENCE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="module_8h_1a029e9d16d637a97b37560ccf24c4adceae676020ca55b44176733f39a3d6a2da9" prot="public">
          <name>ER_DROP_SEQUENCE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="module_8h_1a029e9d16d637a97b37560ccf24c4adcea08399b98cf8706937e03036ad8297537" prot="public">
          <name>ER_NO_SUCH_SEQUENCE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="module_8h_1a029e9d16d637a97b37560ccf24c4adcea8fa905c01bb1f6a98ba8d98af23d055f" prot="public">
          <name>ER_SEQUENCE_EXISTS</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="module_8h_1a029e9d16d637a97b37560ccf24c4adcea7043454cee73d828806ec129d172d5ef" prot="public">
          <name>ER_SEQUENCE_OVERFLOW</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="module_8h_1a029e9d16d637a97b37560ccf24c4adcea63ceb1cabf2541c8c83332c3eb8332ec" prot="public">
          <name>ER_NO_SUCH_INDEX_NAME</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="module_8h_1a029e9d16d637a97b37560ccf24c4adcea6d8071cef36d2698647bdcd142f9adfb" prot="public">
          <name>ER_SPACE_FIELD_IS_DUPLICATE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="module_8h_1a029e9d16d637a97b37560ccf24c4adcead0ad593f996633d2411313d0493fdbe9" prot="public">
          <name>ER_CANT_CREATE_COLLATION</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="module_8h_1a029e9d16d637a97b37560ccf24c4adceaf8ea54cba1179b19a3b75d47e2c7115c" prot="public">
          <name>ER_WRONG_COLLATION_OPTIONS</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="module_8h_1a029e9d16d637a97b37560ccf24c4adcea07c82a7355d5e4cf3153b0e689acee76" prot="public">
          <name>ER_NULLABLE_PRIMARY</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="module_8h_1a029e9d16d637a97b37560ccf24c4adcea05b34f26c19b8af31ccbd7f889b9b17c" prot="public">
          <name>ER_NO_SUCH_FIELD_NAME_IN_SPACE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="module_8h_1a029e9d16d637a97b37560ccf24c4adcea9f739a6e120a09b2b0046edf0cfb3ac0" prot="public">
          <name>ER_TRANSACTION_YIELD</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="module_8h_1a029e9d16d637a97b37560ccf24c4adcea735b42f2294e8467d623625b8c50b543" prot="public">
          <name>ER_NO_SUCH_GROUP</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="module_8h_1a029e9d16d637a97b37560ccf24c4adcead0da7ffa82be066164170d022a689c35" prot="public">
          <name>ER_SQL_BIND_VALUE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="module_8h_1a029e9d16d637a97b37560ccf24c4adcea522740aba34c6a88ec6aabc37113c85a" prot="public">
          <name>ER_SQL_BIND_TYPE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="module_8h_1a029e9d16d637a97b37560ccf24c4adcea7910a7a8bcfbfad15844c166c78e2c62" prot="public">
          <name>ER_SQL_BIND_PARAMETER_MAX</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="module_8h_1a029e9d16d637a97b37560ccf24c4adcea684064fad4ec40672e10787ed5f3a60c" prot="public">
          <name>ER_SQL_EXECUTE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="module_8h_1a029e9d16d637a97b37560ccf24c4adcea6e520286b8bd67c551bb87ba49222333" prot="public">
          <name>ER_UPDATE_DECIMAL_OVERFLOW</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="module_8h_1a029e9d16d637a97b37560ccf24c4adcea01b6603015f20a7e0184e4f7eadbd12f" prot="public">
          <name>ER_SQL_BIND_NOT_FOUND</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="module_8h_1a029e9d16d637a97b37560ccf24c4adcea5f038a585fcae10709249377f8b7f4be" prot="public">
          <name>ER_ACTION_MISMATCH</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="module_8h_1a029e9d16d637a97b37560ccf24c4adcea747e12007154b4c180543d14ffc76b4a" prot="public">
          <name>ER_VIEW_MISSING_SQL</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="module_8h_1a029e9d16d637a97b37560ccf24c4adceaff4253eceede5aeca219590a908e3201" prot="public">
          <name>ER_FOREIGN_KEY_CONSTRAINT</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="module_8h_1a029e9d16d637a97b37560ccf24c4adceab203312f057184ed72fcfd00aa8b4c23" prot="public">
          <name>ER_NO_SUCH_MODULE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="module_8h_1a029e9d16d637a97b37560ccf24c4adcea46aa939f52b9939e2903d247873a7c23" prot="public">
          <name>ER_NO_SUCH_COLLATION</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="module_8h_1a029e9d16d637a97b37560ccf24c4adcea43238f1f0927ff19457893cb8e25200b" prot="public">
          <name>ER_CREATE_FK_CONSTRAINT</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="module_8h_1a029e9d16d637a97b37560ccf24c4adcea4c0535984616a0a31717d1a59c575a57" prot="public">
          <name>ER_DROP_FK_CONSTRAINT</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="module_8h_1a029e9d16d637a97b37560ccf24c4adcea374f1f90c5500e9efb0de348cbe3477c" prot="public">
          <name>ER_NO_SUCH_CONSTRAINT</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="module_8h_1a029e9d16d637a97b37560ccf24c4adcea0cc32167aa4648da9c1d65ed4ccce952" prot="public">
          <name>ER_CONSTRAINT_EXISTS</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="module_8h_1a029e9d16d637a97b37560ccf24c4adcea9ff993c472bde67c522284cfd419e927" prot="public">
          <name>ER_SQL_TYPE_MISMATCH</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="module_8h_1a029e9d16d637a97b37560ccf24c4adcea52739eb7c01f9e47142ceeb9c392ffec" prot="public">
          <name>ER_ROWID_OVERFLOW</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="module_8h_1a029e9d16d637a97b37560ccf24c4adcea065d1b212088d5882f17a65838d60db4" prot="public">
          <name>ER_DROP_COLLATION</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="module_8h_1a029e9d16d637a97b37560ccf24c4adcea5443e14be7d0aaadddb7e9c4c34e095c" prot="public">
          <name>ER_ILLEGAL_COLLATION_MIX</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="module_8h_1a029e9d16d637a97b37560ccf24c4adcea65fd916e9afe0aa5ca741bd36a31f757" prot="public">
          <name>ER_SQL_NO_SUCH_PRAGMA</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="module_8h_1a029e9d16d637a97b37560ccf24c4adcea3f3ade07101d53aeb191d9d66466594d" prot="public">
          <name>ER_SQL_CANT_RESOLVE_FIELD</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="module_8h_1a029e9d16d637a97b37560ccf24c4adcea8116ecbea1268d416f0d3cce564bf3b1" prot="public">
          <name>ER_INDEX_EXISTS_IN_SPACE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="module_8h_1a029e9d16d637a97b37560ccf24c4adceaec57275bca21926754b51da182d9e2ac" prot="public">
          <name>ER_INCONSISTENT_TYPES</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="module_8h_1a029e9d16d637a97b37560ccf24c4adcea581ea5051161d97de42c5c5e92ff96be" prot="public">
          <name>ER_SQL_SYNTAX_WITH_POS</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="module_8h_1a029e9d16d637a97b37560ccf24c4adceaf5f498039f3124061c9023208b4f7880" prot="public">
          <name>ER_SQL_STACK_OVERFLOW</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="module_8h_1a029e9d16d637a97b37560ccf24c4adcea579993d04e95dea402d489b1dbee248a" prot="public">
          <name>ER_SQL_SELECT_WILDCARD</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="module_8h_1a029e9d16d637a97b37560ccf24c4adceac0a020589f6684e82ea59e02795a36db" prot="public">
          <name>ER_SQL_STATEMENT_EMPTY</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="module_8h_1a029e9d16d637a97b37560ccf24c4adceacc1b0e4897c68eeaca955565c82cac3c" prot="public">
          <name>ER_SQL_KEYWORD_IS_RESERVED</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="module_8h_1a029e9d16d637a97b37560ccf24c4adcea24b3cefe8cc47c465c70b73fe537a67e" prot="public">
          <name>ER_SQL_SYNTAX_NEAR_TOKEN</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="module_8h_1a029e9d16d637a97b37560ccf24c4adcea924c8cfee2407be1203faa40f7f1f238" prot="public">
          <name>ER_SQL_UNKNOWN_TOKEN</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="module_8h_1a029e9d16d637a97b37560ccf24c4adcead09b554f77913f17410db8c3754b5217" prot="public">
          <name>ER_SQL_PARSER_GENERIC</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="module_8h_1a029e9d16d637a97b37560ccf24c4adceae76bd1d5930efea0ec8ca35c9839641b" prot="public">
          <name>ER_SQL_ANALYZE_ARGUMENT</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="module_8h_1a029e9d16d637a97b37560ccf24c4adcea23ac384e56a5e927abdd5804d128aad4" prot="public">
          <name>ER_SQL_COLUMN_COUNT_MAX</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="module_8h_1a029e9d16d637a97b37560ccf24c4adcea6f1fd79526b209362ce013a22e2d723c" prot="public">
          <name>ER_HEX_LITERAL_MAX</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="module_8h_1a029e9d16d637a97b37560ccf24c4adcea7d1bbe93ce888acabf83d9b346494141" prot="public">
          <name>ER_INT_LITERAL_MAX</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="module_8h_1a029e9d16d637a97b37560ccf24c4adceae652b715f3cc3aee94127b8440ac5d06" prot="public">
          <name>ER_SQL_PARSER_LIMIT</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="module_8h_1a029e9d16d637a97b37560ccf24c4adcea73ef90a6080802dd16b73b104b8cab1d" prot="public">
          <name>ER_INDEX_DEF_UNSUPPORTED</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="module_8h_1a029e9d16d637a97b37560ccf24c4adceae46d46eee3cef67dd4ab3c052d774235" prot="public">
          <name>ER_CK_DEF_UNSUPPORTED</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="module_8h_1a029e9d16d637a97b37560ccf24c4adcea76199c6573c0bfbbebf58606958d9df8" prot="public">
          <name>ER_MULTIKEY_INDEX_MISMATCH</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="module_8h_1a029e9d16d637a97b37560ccf24c4adcea6a32a015ebf77e6b5bc8cf914e3aa197" prot="public">
          <name>ER_CREATE_CK_CONSTRAINT</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="module_8h_1a029e9d16d637a97b37560ccf24c4adceabde3762d024c4e2c8527932aba98ad33" prot="public">
          <name>ER_CK_CONSTRAINT_FAILED</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="module_8h_1a029e9d16d637a97b37560ccf24c4adcea1bcd10399a70ee0864efc46883908d7e" prot="public">
          <name>ER_SQL_COLUMN_COUNT</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="module_8h_1a029e9d16d637a97b37560ccf24c4adceae03a5b95cebb018fe49cf8de81dd2ff3" prot="public">
          <name>ER_FUNC_INDEX_FUNC</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="module_8h_1a029e9d16d637a97b37560ccf24c4adcea61e72ff2abb5899b80f74c445e983bfe" prot="public">
          <name>ER_FUNC_INDEX_FORMAT</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="module_8h_1a029e9d16d637a97b37560ccf24c4adcea57e2d341dfc9819ffb404fd4338e2e7e" prot="public">
          <name>ER_FUNC_INDEX_PARTS</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="module_8h_1a029e9d16d637a97b37560ccf24c4adceae955a3f97c67fe89485256a1ffeeea20" prot="public">
          <name>ER_NO_SUCH_FIELD_NAME</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="module_8h_1a029e9d16d637a97b37560ccf24c4adceade200f155bb7cdce93323bb8d2ccd245" prot="public">
          <name>ER_FUNC_WRONG_ARG_COUNT</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="module_8h_1a029e9d16d637a97b37560ccf24c4adcea8abeba1f393b54ccfcbdfd5ba847ec55" prot="public">
          <name>ER_BOOTSTRAP_READONLY</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="module_8h_1a029e9d16d637a97b37560ccf24c4adceac718aad6ca5e03e6c01ac8d3e3e4b6c6" prot="public">
          <name>ER_SQL_FUNC_WRONG_RET_COUNT</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="module_8h_1a029e9d16d637a97b37560ccf24c4adceae793affb3fc872253f2ce9caa856fe9d" prot="public">
          <name>ER_FUNC_INVALID_RETURN_TYPE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="module_8h_1a029e9d16d637a97b37560ccf24c4adcea6beca8e8d99f1229f3f13a2fcb0f868a" prot="public">
          <name>ER_SQL_PARSER_GENERIC_WITH_POS</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="module_8h_1a029e9d16d637a97b37560ccf24c4adcea6aebf59aac47776f688f300a9ee5ac83" prot="public">
          <name>ER_REPLICA_NOT_ANON</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="module_8h_1a029e9d16d637a97b37560ccf24c4adceaece5c9efd6f0416c846adcc564a78c06" prot="public">
          <name>ER_CANNOT_REGISTER</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="module_8h_1a029e9d16d637a97b37560ccf24c4adcea178c1a96f43cdf1b134824a9b83ad484" prot="public">
          <name>ER_SESSION_SETTING_INVALID_VALUE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="module_8h_1a029e9d16d637a97b37560ccf24c4adcea5bbe7569e7e8f657ee9c3b0c83aa154b" prot="public">
          <name>ER_SQL_PREPARE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="module_8h_1a029e9d16d637a97b37560ccf24c4adcea475dc0a1c860f5cca6f4144300a9c67c" prot="public">
          <name>ER_WRONG_QUERY_ID</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="module_8h_1a029e9d16d637a97b37560ccf24c4adcea8fe70ca66da0a94c8ca25bcb8837778e" prot="public">
          <name>ER_SEQUENCE_NOT_STARTED</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="module_8h_1a029e9d16d637a97b37560ccf24c4adcea49148e98dd73539583105ea413d67b59" prot="public">
          <name>ER_NO_SUCH_SESSION_SETTING</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="module_8h_1a029e9d16d637a97b37560ccf24c4adceab03bc47e7cc942821b5e175e693381e5" prot="public">
          <name>ER_UNCOMMITTED_FOREIGN_SYNC_TXNS</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="module_8h_1a029e9d16d637a97b37560ccf24c4adcea5370f24400b8108535d9c889f94f0f1b" prot="public">
          <name>ER_SYNC_MASTER_MISMATCH</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="module_8h_1a029e9d16d637a97b37560ccf24c4adcea30ee0328a4ec96fd10878f814346baed" prot="public">
          <name>ER_SYNC_QUORUM_TIMEOUT</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="module_8h_1a029e9d16d637a97b37560ccf24c4adceaf6df328177a7c0c4154b411c28a93e9f" prot="public">
          <name>ER_SYNC_ROLLBACK</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="module_8h_1a029e9d16d637a97b37560ccf24c4adceaa73a3a41e4f8be85aca19e367f981bb2" prot="public">
          <name>ER_TUPLE_METADATA_IS_TOO_BIG</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="module_8h_1a029e9d16d637a97b37560ccf24c4adceada3e3fa0dc070238a8bce57e22272db6" prot="public">
          <name>ER_XLOG_GAP</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="module_8h_1a029e9d16d637a97b37560ccf24c4adceaf93980dd4fa15c85cab21bca3f7603b5" prot="public">
          <name>ER_TOO_EARLY_SUBSCRIBE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="module_8h_1a029e9d16d637a97b37560ccf24c4adcea31e0b8cedaf1d6e82d152ad2be1c18ed" prot="public">
          <name>ER_SQL_CANT_ADD_AUTOINC</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="module_8h_1a029e9d16d637a97b37560ccf24c4adcea5fd2167154958c73d208649094ca8012" prot="public">
          <name>ER_QUORUM_WAIT</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="module_8h_1a029e9d16d637a97b37560ccf24c4adcea6f65989ef9d8425d729bf6aeb1b4375f" prot="public">
          <name>ER_INTERFERING_PROMOTE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="module_8h_1a029e9d16d637a97b37560ccf24c4adcea3c27d16822947799f5d149f43bf11567" prot="public">
          <name>ER_ELECTION_DISABLED</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="module_8h_1a029e9d16d637a97b37560ccf24c4adcea0f2030060a4ddede6b6d5d8fab72cb3b" prot="public">
          <name>ER_TXN_ROLLBACK</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="module_8h_1a029e9d16d637a97b37560ccf24c4adcea287116ae41635c03ce0132b17e71ab4b" prot="public">
          <name>ER_NOT_LEADER</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="module_8h_1a029e9d16d637a97b37560ccf24c4adcead4f4cfb57af0e9a24e8d8a41bb968a78" prot="public">
          <name>ER_SYNC_QUEUE_UNCLAIMED</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="module_8h_1a029e9d16d637a97b37560ccf24c4adceae089af5716644f49c17fceea0f44cfa7" prot="public">
          <name>ER_SYNC_QUEUE_FOREIGN</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="module_8h_1a029e9d16d637a97b37560ccf24c4adcea85a93f7750c3f4abb509112cc51e0895" prot="public">
          <name>ER_UNABLE_TO_PROCESS_IN_STREAM</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="module_8h_1a029e9d16d637a97b37560ccf24c4adceab073831bb95e9eb308cce785c6862f70" prot="public">
          <name>ER_UNABLE_TO_PROCESS_OUT_OF_STREAM</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="module_8h_1a029e9d16d637a97b37560ccf24c4adceafba3cfa2e3bc0e40f85797ebccd649f6" prot="public">
          <name>ER_TRANSACTION_TIMEOUT</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="module_8h_1a029e9d16d637a97b37560ccf24c4adceacad5760f6062f78225d089ff8b2547a7" prot="public">
          <name>ER_ACTIVE_TIMER</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="module_8h_1a029e9d16d637a97b37560ccf24c4adceafe0e2c075245303179aef51a774771fe" prot="public">
          <name>ER_TUPLE_FIELD_COUNT_LIMIT</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="module_8h_1a029e9d16d637a97b37560ccf24c4adcea8cc1c5078db7cbc94cd10036084e611e" prot="public">
          <name>ER_CREATE_CONSTRAINT</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="module_8h_1a029e9d16d637a97b37560ccf24c4adceaaba2ab2deb9153b34e10797141ac9c73" prot="public">
          <name>ER_FIELD_CONSTRAINT_FAILED</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="module_8h_1a029e9d16d637a97b37560ccf24c4adceab46f001b620208758133167ff294ca2b" prot="public">
          <name>ER_TUPLE_CONSTRAINT_FAILED</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="module_8h_1a029e9d16d637a97b37560ccf24c4adcea17940b07aca950ebc0b34f45b7785205" prot="public">
          <name>ER_CREATE_FOREIGN_KEY</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="module_8h_1a029e9d16d637a97b37560ccf24c4adcea08db02725182ffae03e91ada4096bb40" prot="public">
          <name>ER_FOREIGN_KEY_INTEGRITY</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="module_8h_1a029e9d16d637a97b37560ccf24c4adcea0c08eb283fc40c385236a5fef9415be0" prot="public">
          <name>ER_FIELD_FOREIGN_KEY_FAILED</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="module_8h_1a029e9d16d637a97b37560ccf24c4adceaf1df2e650922fad4cb2fbb97ef8d5996" prot="public">
          <name>ER_COMPLEX_FOREIGN_KEY_FAILED</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="module_8h_1a029e9d16d637a97b37560ccf24c4adcea0a6b5cbf11ca044b0d447586fa8604e4" prot="public">
          <name>ER_WRONG_SPACE_UPGRADE_OPTIONS</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="module_8h_1a029e9d16d637a97b37560ccf24c4adcea94537a522f8e390eb99b1b8ce9e1bd81" prot="public">
          <name>ER_NO_ELECTION_QUORUM</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="module_8h_1a029e9d16d637a97b37560ccf24c4adcea599a4e6fb86a67ce24a447a3bb22f4e8" prot="public">
          <name>ER_SSL</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="module_8h_1a029e9d16d637a97b37560ccf24c4adcea2e39dc86371cf258a9726e4157efea20" prot="public">
          <name>ER_SPLIT_BRAIN</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="module_8h_1a029e9d16d637a97b37560ccf24c4adcea933c5cc30c58e4840814727c74f96b57" prot="public">
          <name>box_error_code_MAX</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>public </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/module.h" line="3290" column="20" bodyfile="src/module.h" bodystart="3290" bodyend="3290"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="module_8h_1a24a548551bdc95d156210ec216ded4f9" prot="public" static="no">
        <type>void(*</type>
        <definition>typedef void(* sayfunc_t) (int, const char *, int, const char *, const char *,...)</definition>
        <argsstring>)(int, const char *, int, const char *, const char *,...)</argsstring>
        <name>sayfunc_t</name>
        <briefdescription>
<para>public </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/module.h" line="452" column="9" bodyfile="src/module.h" bodystart="452" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="module_8h_1a94849dd4556ce6560a898d5af2d20779" prot="public" static="no">
        <type>int(*</type>
        <definition>typedef int(* fiber_func) (va_list)</definition>
        <argsstring>)(va_list)</argsstring>
        <name>fiber_func</name>
        <briefdescription>
<para>Fiber - contains information about fiber. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/module.h" line="562" column="9" bodyfile="src/module.h" bodystart="562" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="module_8h_1ae1cb16b1acef0772ea4192316f742aa8" prot="public" static="no">
        <type>struct ibuf</type>
        <definition>typedef struct ibuf box_ibuf_t</definition>
        <argsstring></argsstring>
        <name>box_ibuf_t</name>
        <briefdescription>
<para>public </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/module.h" line="981" column="1" bodyfile="src/module.h" bodystart="987" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="module_8h_1ab230ff08fb24d580407126fc905cc271" prot="public" static="no">
        <type>struct tuple_format</type>
        <definition>typedef struct tuple_format box_tuple_format_t</definition>
        <argsstring></argsstring>
        <name>box_tuple_format_t</name>
        <briefdescription>
<para>public </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/module.h" line="1320" column="1" bodyfile="src/module.h" bodystart="1325" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="module_8h_1a880c3e1e8e63b9a12353853fb6aefa3f" prot="public" static="no">
        <type>struct tuple</type>
        <definition>typedef struct tuple box_tuple_t</definition>
        <argsstring></argsstring>
        <name>box_tuple_t</name>
        <briefdescription>
<para>Tuple. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/module.h" line="1334" column="1" bodyfile="src/module.h" bodystart="1339" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="module_8h_1aa289ab037764b9f065d4b683cb186bda" prot="public" static="no">
        <type>struct tuple_iterator</type>
        <definition>typedef struct tuple_iterator box_tuple_iterator_t</definition>
        <argsstring></argsstring>
        <name>box_tuple_iterator_t</name>
        <briefdescription>
<para>Tuple iterator. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/module.h" line="1447" column="1" bodyfile="src/module.h" bodystart="1452" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="module_8h_1acfbe4043908ad1b4a106689ad2da8814" prot="public" static="no">
        <type>struct key_def</type>
        <definition>typedef struct key_def box_key_def_t</definition>
        <argsstring></argsstring>
        <name>box_key_def_t</name>
        <briefdescription>
<para>public </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/module.h" line="1571" column="1" bodyfile="src/module.h" bodystart="1576" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="module_8h_1a302d3f85cf14f03ace911e9541c95c4d" prot="public" static="no">
        <type>union <ref refid="unionPACKED" kindref="compound">PACKED</ref></type>
        <definition>typedef union PACKED box_key_part_def_t</definition>
        <argsstring></argsstring>
        <name>box_key_part_def_t</name>
        <briefdescription>
<para>Public representation of a key part definition. </para>
        </briefdescription>
        <detaileddescription>
<para>Usage: Allocate an array of such key parts, initialize each key part (call &lt;box_key_part_def_create&gt;() and set necessary fields), pass the array into &lt;box_key_def_new_v2&gt;() function.</para>
<para>Important: A module should call &lt;box_key_part_def_create&gt;() to initialize the structure with default values. There is no guarantee that all future default values for fields and flags will be remain the same.</para>
<para>The idea of separation from internal &lt;struct key_part_def&gt; is to provide stable API and ABI for modules.</para>
<para>New fields may be added into the end of the structure in later tarantool versions. Also new flags may be introduced within &lt;flags&gt; field. &lt;collation&gt; cannot be changed to a union (to reuse for some other value), because it is verified even for a non-string key part by &lt;box_key_def_new_v2&gt;().</para>
<para>Fields that are unknown at given tarantool version are ignored in general, but filled with zeros when initialized. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/module.h" line="1672" column="20"/>
      </memberdef>
      <memberdef kind="typedef" id="module_8h_1aa37ca06842be0fe827d5272493e2311f" prot="public" static="no">
        <type>struct box_function_ctx</type>
        <definition>typedef struct box_function_ctx box_function_ctx_t</definition>
        <argsstring></argsstring>
        <name>box_function_ctx_t</name>
        <briefdescription>
<para>public </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/module.h" line="1972" column="1" bodyfile="src/module.h" bodystart="2039" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="module_8h_1a2b04d0397e455b7ed42b530c1c1ea9e6" prot="public" static="no">
        <type>struct iterator</type>
        <definition>typedef struct iterator box_iterator_t</definition>
        <argsstring></argsstring>
        <name>box_iterator_t</name>
        <briefdescription>
<para>public </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/module.h" line="2259" column="1" bodyfile="src/module.h" bodystart="2264" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="module_8h_1ad49d5e355555804f6b46b79513715be8" prot="public" static="no">
        <type>struct error</type>
        <definition>typedef struct error box_error_t</definition>
        <argsstring></argsstring>
        <name>box_error_t</name>
        <briefdescription>
<para>Error - contains information about error. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/module.h" line="2420" column="1" bodyfile="src/module.h" bodystart="2470" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="module_8h_1a923d13f137e4bdb8c852ea04637da58d" prot="public" static="no">
        <type>struct box_latch</type>
        <definition>typedef struct box_latch box_latch_t</definition>
        <argsstring></argsstring>
        <name>box_latch_t</name>
        <briefdescription>
<para>public </para>
        </briefdescription>
        <detaileddescription>
<para>A lock for cooperative multitasking environment </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/module.h" line="2618" column="1" bodyfile="src/module.h" bodystart="2626" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="module_8h_1a90d26cf0c54dfa5e878e95ca0f73202a" prot="public" static="no">
        <type>struct <ref refid="structbox__decimal" kindref="compound">box_decimal</ref></type>
        <definition>typedef struct box_decimal box_decimal_t</definition>
        <argsstring></argsstring>
        <name>box_decimal_t</name>
        <briefdescription>
<para>Storage for a decimal number. </para>
        </briefdescription>
        <detaileddescription>
<para>This type is large enough to hold a decimal value. The primary usage is to allocate a decimal on the stack and pass it to a box_decimal_*() function.</para>
<para>Take it as opacue structure with ability to allocate a value on the stack.</para>
<para>Use <ref refid="module_8h_1ab67fc69b043029952787aeb05b146145" kindref="member">box_decimal_copy()</ref> to copy the value, don&apos;t use memcpy(). The real data can be smaller than this type. Moreover, tarantool may allocate less bytes for <ref refid="module_8h_1a90d26cf0c54dfa5e878e95ca0f73202a" kindref="member">box_decimal_t</ref> value, so direct read/write of the structure may lead to access to an unallocated memory.</para>
<para>The alignment of the structure is not less than alignment of decimal values allocated by tarantool. It can be larger and it is another reason to don&apos;t access the structure content directly.</para>
<para>Last, but not least: the data format is unspecified and can be changed. Modules and applications that aims to be compatible with future tarantool versions must not lean on particular data representation within the structure. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/module.h" line="2732" column="1" bodyfile="src/module.h" bodystart="2779" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="module_8h_1ab5a71c2541c377b3d5b34fdb35964c2e" prot="public" static="no" mutable="no">
        <type>int</type>
        <definition>int log_level</definition>
        <argsstring></argsstring>
        <name>log_level</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/module.h" line="442" column="12" declfile="src/module.h" declline="442" declcolumn="12"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="module_8h_1a4a35d7a7fe53c673112e06ab78794216" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int box_on_shutdown</definition>
        <argsstring>(void *arg, int(*new_handler)(void *), int(*old_handler)(void *))</argsstring>
        <name>box_on_shutdown</name>
        <param>
          <type>void *</type>
          <declname>arg</declname>
        </param>
        <param>
          <type>int(*)(void *)</type>
          <declname>new_handler</declname>
        </param>
        <param>
          <type>int(*)(void *)</type>
          <declname>old_handler</declname>
        </param>
        <briefdescription>
<para>Statement Attributes }}}. </para>
        </briefdescription>
        <detaileddescription>
<para>public Function, which registers or deletes on_shutdown handler. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">arg</parametername>
</parameternamelist>
<parameterdescription>
<para>on_shutdown function&apos;s argument. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">new_handler</parametername>
</parameternamelist>
<parameterdescription>
<para>New on_shutdown handler, in case this argument is NULL, function finds and destroys old on_shutdown handler. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">old_handler</parametername>
</parameternamelist>
<parameterdescription>
<para>Old on_shutdown handler. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>return</parametername>
</parameternamelist>
<parameterdescription>
<para>0 if success otherwise return -1 and sets errno. There are three cases when function fails:<itemizedlist>
<listitem><para>both old_handler and new_handler are equal to zero (sets errno to EINVAL).</para>
</listitem><listitem><para>old_handler != NULL, but there is no trigger with such function (sets errno to EINVAL).</para>
</listitem><listitem><para>malloc for some internal struct memory allocation return NULL (errno sets by malloc to ENOMEM). </para>
</listitem></itemizedlist>
</para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/module.h" line="417" column="1" declfile="src/module.h" declline="417" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="module_8h_1a11d9d5dc245f23922392835e55fccba9" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>static bool say_log_level_is_enabled</definition>
        <argsstring>(int level)</argsstring>
        <name>say_log_level_is_enabled</name>
        <param>
          <type>int</type>
          <declname>level</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/module.h" line="445" column="1" bodyfile="src/module.h" bodystart="445" bodyend="448"/>
      </memberdef>
      <memberdef kind="function" id="module_8h_1aa0f14b4a77bc8ce8ba99c67004083d23" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>CFORMAT</definition>
        <argsstring>(printf, 5, 6) extern sayfunc_t _say</argsstring>
        <name>CFORMAT</name>
        <param>
          <type>printf</type>
        </param>
        <param>
          <type>5</type>
        </param>
        <param>
          <type>6</type>
        </param>
        <briefdescription>
<para>Internal function used to implement <ref refid="module_8h_1a5b2bb360001f6dfb4f946335950cabbf" kindref="member">say()</ref> macros. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/module.h" line="456" column="1" declfile="src/module.h" declline="456" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="module_8h_1a615728b106aa274514dea63a9a693fd1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>struct fiber_attr *</type>
        <definition>struct fiber_attr* fiber_attr_new</definition>
        <argsstring>(void)</argsstring>
        <name>fiber_attr_new</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Create a new fiber attribute container and initialize it with default parameters. </para>
        </briefdescription>
        <detaileddescription>
<para>Can be used for many fibers creation, corresponding fibers will not take ownership. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/module.h" line="528" column="1" declfile="src/module.h" declline="528" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="module_8h_1ac4003e7d28985f1573cf3faf8b4d38ee" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void fiber_attr_delete</definition>
        <argsstring>(struct fiber_attr *fiber_attr)</argsstring>
        <name>fiber_attr_delete</name>
        <param>
          <type>struct fiber_attr *</type>
          <declname>fiber_attr</declname>
        </param>
        <briefdescription>
<para>Delete the fiber_attr and free all allocated resources. </para>
        </briefdescription>
        <detaileddescription>
<para>This is safe when fibers created with this attribute still exist.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>fiber_attr</parametername>
</parameternamelist>
<parameterdescription>
<para>fiber attribute </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/module.h" line="537" column="1" declfile="src/module.h" declline="537" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="module_8h_1a4f42c1a444922edf2163806c5433ae1a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int fiber_attr_setstacksize</definition>
        <argsstring>(struct fiber_attr *fiber_attr, size_t stack_size)</argsstring>
        <name>fiber_attr_setstacksize</name>
        <param>
          <type>struct fiber_attr *</type>
          <declname>fiber_attr</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>stack_size</declname>
        </param>
        <briefdescription>
<para>Set stack size for the fiber attribute. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>fiber_attribute</parametername>
</parameternamelist>
<parameterdescription>
<para>fiber attribute container </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>stacksize</parametername>
</parameternamelist>
<parameterdescription>
<para>stack size for new fibers </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/module.h" line="546" column="1" declfile="src/module.h" declline="546" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="module_8h_1ad628f573827cf2393f0849c194719a94" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t fiber_attr_getstacksize</definition>
        <argsstring>(struct fiber_attr *fiber_attr)</argsstring>
        <name>fiber_attr_getstacksize</name>
        <param>
          <type>struct fiber_attr *</type>
          <declname>fiber_attr</declname>
        </param>
        <briefdescription>
<para>Get stack size from the fiber attribute. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>fiber_attribute</parametername>
</parameternamelist>
<parameterdescription>
<para>fiber attribute container or NULL for default </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>stack</parametername>
</parameternamelist>
<parameterdescription>
<para>size </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/module.h" line="555" column="1" declfile="src/module.h" declline="555" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="module_8h_1a6de8ea84fe46359b0a3dc9d6a401e0ab" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>struct fiber *</type>
        <definition>struct fiber* fiber_self</definition>
        <argsstring>(void)</argsstring>
        <name>fiber_self</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Return the current fiber. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/module.h" line="568" column="1" declfile="src/module.h" declline="568" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="module_8h_1ac0d955b4ac367ab3b95c6c0d0df31050" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>struct fiber *</type>
        <definition>struct fiber* fiber_new</definition>
        <argsstring>(const char *name, fiber_func f)</argsstring>
        <name>fiber_new</name>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type><ref refid="module_8h_1a94849dd4556ce6560a898d5af2d20779" kindref="member">fiber_func</ref></type>
          <declname>f</declname>
        </param>
        <briefdescription>
<para>Create a new fiber. </para>
        </briefdescription>
        <detaileddescription>
<para>Takes a fiber from fiber cache, if it&apos;s not empty. Can fail only if there is not enough memory for the fiber structure or fiber stack.</para>
<para>The created fiber automatically returns itself to the fiber cache when its &quot;main&quot; function completes.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>string with fiber name </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fiber_func</parametername>
</parameternamelist>
<parameterdescription>
<para>func for run inside fiber</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="module_8h_1abca18eb68ebf89507d4cf5eb3c402cb2" kindref="member">fiber_start</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/module.h" line="587" column="1" declfile="src/module.h" declline="587" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="module_8h_1a8e8dbdb4656ce6c89ea1e3215c0d6adf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>struct fiber *</type>
        <definition>struct fiber* fiber_new_ex</definition>
        <argsstring>(const char *name, const struct fiber_attr *fiber_attr, fiber_func f)</argsstring>
        <name>fiber_new_ex</name>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const struct fiber_attr *</type>
          <declname>fiber_attr</declname>
        </param>
        <param>
          <type><ref refid="module_8h_1a94849dd4556ce6560a898d5af2d20779" kindref="member">fiber_func</ref></type>
          <declname>f</declname>
        </param>
        <briefdescription>
<para>Create a new fiber with defined attributes. </para>
        </briefdescription>
        <detaileddescription>
<para>Can fail only if there is not enough memory for the fiber structure or fiber stack.</para>
<para>The created fiber automatically returns itself to the fiber cache if has default stack size when its &quot;main&quot; function completes.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>string with fiber name </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fiber_attr</parametername>
</parameternamelist>
<parameterdescription>
<para>fiber attributes </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fiber_func</parametername>
</parameternamelist>
<parameterdescription>
<para>func for run inside fiber</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="module_8h_1abca18eb68ebf89507d4cf5eb3c402cb2" kindref="member">fiber_start</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/module.h" line="606" column="1" declfile="src/module.h" declline="606" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="module_8h_1aaa5beb40f119b9400bb57b81820b24ff" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void fiber_yield</definition>
        <argsstring>(void)</argsstring>
        <name>fiber_yield</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Return control to another fiber and wait until it&apos;ll be woken. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="module_8h_1a661de7f72aa265ff6ffcb8b3acfafe40" kindref="member">fiber_wakeup</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/module.h" line="614" column="1" declfile="src/module.h" declline="614" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="module_8h_1abca18eb68ebf89507d4cf5eb3c402cb2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void fiber_start</definition>
        <argsstring>(struct fiber *callee,...)</argsstring>
        <name>fiber_start</name>
        <param>
          <type>struct fiber *</type>
          <declname>callee</declname>
        </param>
        <param>
          <type>...</type>
        </param>
        <briefdescription>
<para>Start execution of created fiber. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>callee</parametername>
</parameternamelist>
<parameterdescription>
<para>fiber to start </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>...</parametername>
</parameternamelist>
<parameterdescription>
<para>arguments to start the fiber with</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="module_8h_1ac0d955b4ac367ab3b95c6c0d0df31050" kindref="member">fiber_new</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/module.h" line="625" column="1" declfile="src/module.h" declline="625" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="module_8h_1a661de7f72aa265ff6ffcb8b3acfafe40" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void fiber_wakeup</definition>
        <argsstring>(struct fiber *f)</argsstring>
        <name>fiber_wakeup</name>
        <param>
          <type>struct fiber *</type>
          <declname>f</declname>
        </param>
        <briefdescription>
<para>Interrupt a synchronous wait of a fiber. </para>
        </briefdescription>
        <detaileddescription>
<para>Nop for the currently running fiber.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>f</parametername>
</parameternamelist>
<parameterdescription>
<para>fiber to be woken up </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/module.h" line="633" column="1" declfile="src/module.h" declline="633" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="module_8h_1a9a5b700b2122f08e6bc1298ac7eb0435" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void fiber_cancel</definition>
        <argsstring>(struct fiber *f)</argsstring>
        <name>fiber_cancel</name>
        <param>
          <type>struct fiber *</type>
          <declname>f</declname>
        </param>
        <briefdescription>
<para>Cancel the subject fiber. </para>
        </briefdescription>
        <detaileddescription>
<para>(set FIBER_IS_CANCELLED flag)</para>
<para>If target fiber&apos;s flag FIBER_IS_CANCELLABLE set, then it would be woken up (maybe prematurely). Then current fiber yields until the target fiber is dead (or is woken up by <simplesect kind="see"><para><ref refid="module_8h_1a661de7f72aa265ff6ffcb8b3acfafe40" kindref="member">fiber_wakeup</ref>).</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>f</parametername>
</parameternamelist>
<parameterdescription>
<para>fiber to be cancelled </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/module.h" line="646" column="1" declfile="src/module.h" declline="646" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="module_8h_1a4078cbddc22b0ed941548f86672224d9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool fiber_set_cancellable</definition>
        <argsstring>(bool yesno)</argsstring>
        <name>fiber_set_cancellable</name>
        <param>
          <type>bool</type>
          <declname>yesno</declname>
        </param>
        <briefdescription>
<para>Make it possible or not possible to wakeup the current fiber immediately when it&apos;s cancelled. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>yesno</parametername>
</parameternamelist>
<parameterdescription>
<para>status to set </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>previous state. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/module.h" line="656" column="1" declfile="src/module.h" declline="656" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="module_8h_1a8ee4e98a4e9c2239b5d7eb98c2b0b208" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void fiber_set_joinable</definition>
        <argsstring>(struct fiber *fiber, bool yesno)</argsstring>
        <name>fiber_set_joinable</name>
        <param>
          <type>struct fiber *</type>
          <declname>fiber</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>yesno</declname>
        </param>
        <briefdescription>
<para>Set fiber to be joinable (false by default). </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>yesno</parametername>
</parameternamelist>
<parameterdescription>
<para>status to set </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/module.h" line="663" column="1" declfile="src/module.h" declline="663" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="module_8h_1a58ac22e89f3fdab0556cc5f6922f0f59" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int fiber_join</definition>
        <argsstring>(struct fiber *f)</argsstring>
        <name>fiber_join</name>
        <param>
          <type>struct fiber *</type>
          <declname>f</declname>
        </param>
        <briefdescription>
<para>Wait until the fiber is dead and then move its execution status to the caller. </para>
        </briefdescription>
        <detaileddescription>
<para>The fiber must not be detached (<simplesect kind="see"><para><ref refid="module_8h_1a8ee4e98a4e9c2239b5d7eb98c2b0b208" kindref="member">fiber_set_joinable()</ref>). </para>
</simplesect>
<simplesect kind="pre"><para>FIBER_IS_JOINABLE flag is set.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>f</parametername>
</parameternamelist>
<parameterdescription>
<para>fiber to be woken up </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>fiber function ret code </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/module.h" line="675" column="1" declfile="src/module.h" declline="675" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="module_8h_1a676e8a263a2592320b7260095f5c10f3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int fiber_join_timeout</definition>
        <argsstring>(struct fiber *f, double timeout)</argsstring>
        <name>fiber_join_timeout</name>
        <param>
          <type>struct fiber *</type>
          <declname>f</declname>
        </param>
        <param>
          <type>double</type>
          <declname>timeout</declname>
        </param>
        <briefdescription>
<para>Wait until the fiber is dead or timeout exceeded. </para>
        </briefdescription>
        <detaileddescription>
<para>In case timeout == TIMEOUT_INFINITY, this function same as fiber_join function. Return fiber execution status to the caller or -1 if timeout exceeded and set diag. The fiber must not be detached (<simplesect kind="see"><para><ref refid="module_8h_1a8ee4e98a4e9c2239b5d7eb98c2b0b208" kindref="member">fiber_set_joinable()</ref>). </para>
</simplesect>
<simplesect kind="pre"><para>FIBER_IS_JOINABLE flag is set.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>f</parametername>
</parameternamelist>
<parameterdescription>
<para>fiber to be woken up </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>timeout</parametername>
</parameternamelist>
<parameterdescription>
<para>time during which we wait for the fiber completion </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>fiber function ret code or -1 in case if timeout exceeded </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/module.h" line="691" column="1" declfile="src/module.h" declline="691" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="module_8h_1a0ab0816e3ddf7e11b448926569e6bc49" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void fiber_sleep</definition>
        <argsstring>(double s)</argsstring>
        <name>fiber_sleep</name>
        <param>
          <type>double</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>Put the current fiber to sleep for at least &apos;s&apos; seconds. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>s</parametername>
</parameternamelist>
<parameterdescription>
<para>time to sleep</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>this is a cancellation point (</para>
</simplesect>
<simplesect kind="see"><para><ref refid="module_8h_1a972d46a2ac9d787bc69b61ce09938587" kindref="member">fiber_is_cancelled</ref>) </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/module.h" line="701" column="1" declfile="src/module.h" declline="701" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="module_8h_1a972d46a2ac9d787bc69b61ce09938587" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool fiber_is_cancelled</definition>
        <argsstring>(void)</argsstring>
        <name>fiber_is_cancelled</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Check current fiber for cancellation (it must be checked manually). </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/module.h" line="708" column="1" declfile="src/module.h" declline="708" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="module_8h_1a077a6068c998d2e548168be5e1a6008f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double fiber_time</definition>
        <argsstring>(void)</argsstring>
        <name>fiber_time</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Report loop begin time as double (cheap). </para>
        </briefdescription>
        <detaileddescription>
<para>Uses real time clock. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/module.h" line="715" column="1" declfile="src/module.h" declline="715" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="module_8h_1ae1e9fb25b47b6090a587c92aaf536aed" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int64_t</type>
        <definition>int64_t fiber_time64</definition>
        <argsstring>(void)</argsstring>
        <name>fiber_time64</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Report loop begin time as 64-bit int. </para>
        </briefdescription>
        <detaileddescription>
<para>Uses real time clock. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/module.h" line="722" column="1" declfile="src/module.h" declline="722" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="module_8h_1a0e1c835fac5180f57e01c388a95440d5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double fiber_clock</definition>
        <argsstring>(void)</argsstring>
        <name>fiber_clock</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Report loop begin time as double (cheap). </para>
        </briefdescription>
        <detaileddescription>
<para>Uses monotonic clock. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/module.h" line="729" column="1" declfile="src/module.h" declline="729" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="module_8h_1a8ed4eb4281eaa96a74c6e052995af645" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int64_t</type>
        <definition>int64_t fiber_clock64</definition>
        <argsstring>(void)</argsstring>
        <name>fiber_clock64</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Report loop begin time as 64-bit int. </para>
        </briefdescription>
        <detaileddescription>
<para>Uses monotonic clock. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/module.h" line="736" column="1" declfile="src/module.h" declline="736" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="module_8h_1a1d0122a4705796fd32c2a54e218c2ff8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void fiber_reschedule</definition>
        <argsstring>(void)</argsstring>
        <name>fiber_reschedule</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Reschedule fiber to end of event loop cycle. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/module.h" line="742" column="1" declfile="src/module.h" declline="742" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="module_8h_1a8f1439a55742e08aed110099945d6eb8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>struct slab_cache *</type>
        <definition>struct slab_cache* cord_slab_cache</definition>
        <argsstring>(void)</argsstring>
        <name>cord_slab_cache</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/module.h" line="749" column="1" declfile="src/module.h" declline="749" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="module_8h_1a113af82955ade6d52b5a03fc327b266f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t box_region_used</definition>
        <argsstring>(void)</argsstring>
        <name>box_region_used</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>box region allocator </para>
        </briefdescription>
        <detaileddescription>
<para>It is the region allocator from the small library. It is useful for allocating tons of small objects and free them at once.</para>
<para>Typical usage is illustrated in the sketch below.</para>
<para>| size_t region_svp = <ref refid="module_8h_1a113af82955ade6d52b5a03fc327b266f" kindref="member">box_region_used()</ref>; | while (&lt;...&gt;) { | char *buf = box_region_alloc(&lt;...&gt;); | &lt;...&gt; | } | box_region_truncate(region_svp);</para>
<para>There are module API functions that return a result on this region. In this case a caller is responsible to free the result:</para>
<para>| size_t region_svp = <ref refid="module_8h_1a113af82955ade6d52b5a03fc327b266f" kindref="member">box_region_used()</ref>; | char *buf = box_&lt;...&gt;(&lt;...&gt;); | &lt;...&gt; | box_region_truncate(region_svp);</para>
<para>This API provides better compatibility guarantees over using the small library directly in a module. A binary layout of internal structures may be changed in a future, but &lt;box_region_*&gt;() functions will remain API and ABI compatible.</para>
<para>Data allocated on the region are guaranteed to be valid until a call of a function from the certain set:</para>
<para><itemizedlist>
<listitem><para>Related to transactions.</para>
</listitem><listitem><para>Ones that may cause box initialization (box.cfg()).</para>
</listitem><listitem><para>Ones that may involve SQL execution.</para>
</listitem></itemizedlist>
</para>
<para>FIXME: Provide more strict list of functions, which may invalidate the data: ones that may lead to calling of fiber_gc().</para>
<para>It is safe to call simple box APIs around tuples, key_defs and so on <ndash/> they don&apos;t invalidate the allocated data.</para>
<para>Each fiber has its own box region. It means that a call of, say, &lt;box_region_used&gt;() will give its own value in different fibers. It also means that a yield does not invalidate data in the box region. How much memory is used by the box region. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/module.h" line="802" column="1" declfile="src/module.h" declline="802" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="module_8h_1ac8e7d6a912f5f8230bd8c8035735ef2f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>void* box_region_alloc</definition>
        <argsstring>(size_t size)</argsstring>
        <name>box_region_alloc</name>
        <param>
          <type>size_t</type>
          <declname>size</declname>
        </param>
        <briefdescription>
<para>Allocate size bytes from the box region. </para>
        </briefdescription>
        <detaileddescription>
<para>Don&apos;t use this function to allocate a memory block for a value or array of values of a type with alignment requirements. A violation of alignment requirements leads to undefined behaviour.</para>
<para>In case of a memory error set a diag and return NULL. <simplesect kind="see"><para>&lt;box_error_last&gt;(). </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/module.h" line="816" column="1" declfile="src/module.h" declline="816" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="module_8h_1a541b6608e37fc392112a9aee229432fa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>void* box_region_aligned_alloc</definition>
        <argsstring>(size_t size, size_t alignment)</argsstring>
        <name>box_region_aligned_alloc</name>
        <param>
          <type>size_t</type>
          <declname>size</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>alignment</declname>
        </param>
        <briefdescription>
<para>Allocate size bytes from the box region with given alignment. </para>
        </briefdescription>
        <detaileddescription>
<para>Alignment must be a power of 2.</para>
<para>In case of a memory error set a diag and return NULL. <simplesect kind="see"><para>&lt;box_error_last&gt;(). </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/module.h" line="827" column="1" declfile="src/module.h" declline="827" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="module_8h_1a6575301cf1bd4df1bfad9a319b80a0b4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void box_region_truncate</definition>
        <argsstring>(size_t size)</argsstring>
        <name>box_region_truncate</name>
        <param>
          <type>size_t</type>
          <declname>size</declname>
        </param>
        <briefdescription>
<para>Truncate the box region to the given size. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/module.h" line="833" column="1" declfile="src/module.h" declline="833" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="module_8h_1a670f12ab6752093a3e2ae0ff48ccd491" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>struct fiber_cond *</type>
        <definition>struct fiber_cond* fiber_cond_new</definition>
        <argsstring>(void)</argsstring>
        <name>fiber_cond_new</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>public </para>
        </briefdescription>
        <detaileddescription>
<para>Instantiate a new fiber cond object. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/module.h" line="857" column="1" declfile="src/module.h" declline="857" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="module_8h_1a64787aacecdc620e9b7e402babf9ae1e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void fiber_cond_delete</definition>
        <argsstring>(struct fiber_cond *cond)</argsstring>
        <name>fiber_cond_delete</name>
        <param>
          <type>struct fiber_cond *</type>
          <declname>cond</declname>
        </param>
        <briefdescription>
<para>Delete the fiber cond object. </para>
        </briefdescription>
        <detaileddescription>
<para>Behaviour is undefined if there are fiber waiting for the cond. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/module.h" line="864" column="1" declfile="src/module.h" declline="864" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="module_8h_1a3f13caca027d090cc02574e333c78f3c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void fiber_cond_signal</definition>
        <argsstring>(struct fiber_cond *cond)</argsstring>
        <name>fiber_cond_signal</name>
        <param>
          <type>struct fiber_cond *</type>
          <declname>cond</declname>
        </param>
        <briefdescription>
<para>Wake one fiber waiting for the cond. </para>
        </briefdescription>
        <detaileddescription>
<para>Does nothing if no one is waiting. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>cond</parametername>
</parameternamelist>
<parameterdescription>
<para>condition </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/module.h" line="872" column="1" declfile="src/module.h" declline="872" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="module_8h_1abbca6fff4cd2ccf2b65528ea5e1e1e39" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void fiber_cond_broadcast</definition>
        <argsstring>(struct fiber_cond *cond)</argsstring>
        <name>fiber_cond_broadcast</name>
        <param>
          <type>struct fiber_cond *</type>
          <declname>cond</declname>
        </param>
        <briefdescription>
<para>Wake up all fibers waiting for the cond. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>cond</parametername>
</parameternamelist>
<parameterdescription>
<para>condition </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/module.h" line="879" column="1" declfile="src/module.h" declline="879" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="module_8h_1a9e7882234efd30663364ded133ab3fad" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int fiber_cond_wait_timeout</definition>
        <argsstring>(struct fiber_cond *cond, double timeout)</argsstring>
        <name>fiber_cond_wait_timeout</name>
        <param>
          <type>struct fiber_cond *</type>
          <declname>cond</declname>
        </param>
        <param>
          <type>double</type>
          <declname>timeout</declname>
        </param>
        <briefdescription>
<para>Suspend the execution of the current fiber (i.e. </para>
        </briefdescription>
        <detaileddescription>
<para>yield) until <ref refid="module_8h_1a3f13caca027d090cc02574e333c78f3c" kindref="member">fiber_cond_signal()</ref> is called. Like pthread_cond, fiber_cond can issue spurious wake ups caused by explicit <ref refid="module_8h_1a661de7f72aa265ff6ffcb8b3acfafe40" kindref="member">fiber_wakeup()</ref> or <ref refid="module_8h_1a9a5b700b2122f08e6bc1298ac7eb0435" kindref="member">fiber_cancel()</ref> calls. It is highly recommended to wrap calls to this function into a loop and check an actual predicate and fiber_testcancel() on every iteration.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>cond</parametername>
</parameternamelist>
<parameterdescription>
<para>condition </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>timeout</parametername>
</parameternamelist>
<parameterdescription>
<para>timeout in seconds </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>on <ref refid="module_8h_1a3f13caca027d090cc02574e333c78f3c" kindref="member">fiber_cond_signal()</ref> call or a spurious wake up </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-1</parametername>
</parameternamelist>
<parameterdescription>
<para>on timeout or fiber cancellation, diag is set </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/module.h" line="894" column="1" declfile="src/module.h" declline="894" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="module_8h_1a1dd72e262e9e59a14c1337bc0fa2447c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int fiber_cond_wait</definition>
        <argsstring>(struct fiber_cond *cond)</argsstring>
        <name>fiber_cond_wait</name>
        <param>
          <type>struct fiber_cond *</type>
          <declname>cond</declname>
        </param>
        <briefdescription>
<para>Shortcut for <ref refid="module_8h_1a9e7882234efd30663364ded133ab3fad" kindref="member">fiber_cond_wait_timeout()</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="module_8h_1a9e7882234efd30663364ded133ab3fad" kindref="member">fiber_cond_wait_timeout()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/module.h" line="901" column="1" declfile="src/module.h" declline="901" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="module_8h_1ab9c521a569fd78b25f355f3b7525ba9a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int coio_wait</definition>
        <argsstring>(int fd, int event, double timeout)</argsstring>
        <name>coio_wait</name>
        <param>
          <type>int</type>
          <declname>fd</declname>
        </param>
        <param>
          <type>int</type>
          <declname>event</declname>
        </param>
        <param>
          <type>double</type>
          <declname>timeout</declname>
        </param>
        <briefdescription>
<para>Wait until READ or WRITE event on socket (<emphasis>fd</emphasis>). </para>
        </briefdescription>
        <detaileddescription>
<para>Yields. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>fd</parametername>
</parameternamelist>
<parameterdescription>
<para>- non-blocking socket file description </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>events</parametername>
</parameternamelist>
<parameterdescription>
<para>- requested events to wait. Combination of TNT_IO_READ | TNT_IO_WRITE bit flags. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>timeout</parametername>
</parameternamelist>
<parameterdescription>
<para>- timeout in seconds. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>- timeout </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>&gt;0</parametername>
</parameternamelist>
<parameterdescription>
<para>- returned events. Combination of TNT_IO_READ | TNT_IO_WRITE bit flags. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/module.h" line="924" column="1" declfile="src/module.h" declline="924" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="module_8h_1af23dc320746ce4ec9afdf433a66ef596" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int coio_close</definition>
        <argsstring>(int fd)</argsstring>
        <name>coio_close</name>
        <param>
          <type>int</type>
          <declname>fd</declname>
        </param>
        <briefdescription>
<para>Close the fd and wake any fiber blocked in <ref refid="module_8h_1ab9c521a569fd78b25f355f3b7525ba9a" kindref="member">coio_wait()</ref> call on this fd. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/module.h" line="931" column="1" declfile="src/module.h" declline="931" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="module_8h_1af9433c7d42d7747f1f69b79a0d98df13" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ssize_t</type>
        <definition>ssize_t coio_call</definition>
        <argsstring>(ssize_t(*func)(va_list),...)</argsstring>
        <name>coio_call</name>
        <param>
          <type>ssize_t(*)(va_list)</type>
          <declname>func</declname>
        </param>
        <param>
          <type>...</type>
        </param>
        <briefdescription>
<para>public </para>
        </briefdescription>
        <detaileddescription>
<para>Create new eio task with specified function and arguments. Yield and wait until the task is complete.</para>
<para>This function doesn&apos;t throw exceptions to avoid double error checking: in most cases it&apos;s also necessary to check the return value of the called function and perform necessary actions. If func sets errno, the errno is preserved across the call.</para>
<para><parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>-1</parametername>
</parameternamelist>
<parameterdescription>
<para>and errno = ENOMEM if failed to create a task </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>the</parametername>
</parameternamelist>
<parameterdescription>
<para>function return (errno is preserved).</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<programlisting><codeline><highlight class="normal">static<sp/>ssize_t<sp/>openfile_cb(va_list<sp/>ap)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>char<sp/>*filename<sp/>=<sp/>va_arg(ap);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>flags<sp/>=<sp/>va_arg(ap);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>open(filename,<sp/>flags);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">if<sp/>(coio_call(openfile_cb,<sp/>&quot;/tmp/file&quot;,<sp/>0)<sp/>==<sp/>-1)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>//<sp/>handle<sp/>errors.</highlight></codeline>
<codeline><highlight class="normal">...</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/module.h" line="962" column="1" declfile="src/module.h" declline="962" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="module_8h_1a832b67e03175570d9f6fa17ffd77bf83" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int coio_getaddrinfo</definition>
        <argsstring>(const char *host, const char *port, const struct addrinfo *hints, struct addrinfo **res, double timeout)</argsstring>
        <name>coio_getaddrinfo</name>
        <param>
          <type>const char *</type>
          <declname>host</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>port</declname>
        </param>
        <param>
          <type>const struct addrinfo *</type>
          <declname>hints</declname>
        </param>
        <param>
          <type>struct addrinfo **</type>
          <declname>res</declname>
        </param>
        <param>
          <type>double</type>
          <declname>timeout</declname>
        </param>
        <briefdescription>
<para>Fiber-friendly version of getaddrinfo(3). </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>host</parametername>
</parameternamelist>
<parameterdescription>
<para>host name, i.e. &quot;tarantool.org&quot; </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>service name, i.e. &quot;80&quot; or &quot;http&quot; </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>hints</parametername>
</parameternamelist>
<parameterdescription>
<para>hints, see getaddrinfo(3) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>res[out]</parametername>
</parameternamelist>
<parameterdescription>
<para>result, see getaddrinfo(3) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>timeout</parametername>
</parameternamelist>
<parameterdescription>
<para>timeout </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>on success, please free <emphasis>res</emphasis> using freeaddrinfo(3). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-1</parametername>
</parameternamelist>
<parameterdescription>
<para>on error, check diag. Please note that the return value is not compatible with getaddrinfo(3). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para>getaddrinfo() </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/module.h" line="981" column="1" declfile="src/module.h" declline="981" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="module_8h_1a4b6dd91e6e7f26a9b57f4c317c2af203" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>void* box_ibuf_reserve</definition>
        <argsstring>(box_ibuf_t *ibuf, size_t size)</argsstring>
        <name>box_ibuf_reserve</name>
        <param>
          <type><ref refid="module_8h_1ae1cb16b1acef0772ea4192316f742aa8" kindref="member">box_ibuf_t</ref> *</type>
          <declname>ibuf</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>size</declname>
        </param>
        <briefdescription>
<para>Reserve requested amount of bytes in ibuf buffer. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ibuf</parametername>
</parameternamelist>
<parameterdescription>
<para>buffer used for allocation </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>allocated bytes </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>NULL</parametername>
</parameternamelist>
<parameterdescription>
<para>on error, check diag. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/module.h" line="996" column="1" declfile="src/module.h" declline="996" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="module_8h_1a1fb9d369f674c637b476fd92b00d3da5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void box_ibuf_read_range</definition>
        <argsstring>(box_ibuf_t *ibuf, char ***rpos, char ***wpos)</argsstring>
        <name>box_ibuf_read_range</name>
        <param>
          <type><ref refid="module_8h_1ae1cb16b1acef0772ea4192316f742aa8" kindref="member">box_ibuf_t</ref> *</type>
          <declname>ibuf</declname>
        </param>
        <param>
          <type>char ***</type>
          <declname>rpos</declname>
        </param>
        <param>
          <type>char ***</type>
          <declname>wpos</declname>
        </param>
        <briefdescription>
<para>Return pointers to read range pointers used [rpos..wpos) </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ibuf</parametername>
</parameternamelist>
<parameterdescription>
<para>ibuf structure </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rpos</parametername>
</parameternamelist>
<parameterdescription>
<para>where to place ibuf.rpos address </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>wpos</parametername>
</parameternamelist>
<parameterdescription>
<para>where to place ibuf.wpos address </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/module.h" line="1005" column="1" declfile="src/module.h" declline="1005" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="module_8h_1ac74b2d0e25c3a295f9ae0200a787c432" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void box_ibuf_write_range</definition>
        <argsstring>(box_ibuf_t *ibuf, char ***wpos, char ***end)</argsstring>
        <name>box_ibuf_write_range</name>
        <param>
          <type><ref refid="module_8h_1ae1cb16b1acef0772ea4192316f742aa8" kindref="member">box_ibuf_t</ref> *</type>
          <declname>ibuf</declname>
        </param>
        <param>
          <type>char ***</type>
          <declname>wpos</declname>
        </param>
        <param>
          <type>char ***</type>
          <declname>end</declname>
        </param>
        <briefdescription>
<para>Return pointers to write range pointers used [wpos..end) </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ibuf</parametername>
</parameternamelist>
<parameterdescription>
<para>ibuf structure </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>wpos</parametername>
</parameternamelist>
<parameterdescription>
<para>where to place ibuf.rpos address </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>end</parametername>
</parameternamelist>
<parameterdescription>
<para>where to place ibuf.wpos address </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/module.h" line="1014" column="1" declfile="src/module.h" declline="1014" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="module_8h_1acc9bcfc8296607ac6cbfdd9d44cd7451" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int luaL_iscdata</definition>
        <argsstring>(struct lua_State *L, int idx)</argsstring>
        <name>luaL_iscdata</name>
        <param>
          <type>struct lua_State *</type>
          <declname>L</declname>
        </param>
        <param>
          <type>int</type>
          <declname>idx</declname>
        </param>
        <briefdescription>
<para>public </para>
        </briefdescription>
        <detaileddescription>
<para>Checks whether a value on the Lua stack is a cdata.</para>
<para>Unlike &lt;luaL_checkcdata&gt;() this function does not raise an error. It is useful to raise a domain specific error.</para>
<para>Lua API and module API don&apos;t expose LUA_TCDATA constant. We have no guarantee that this constant will remain the same in future LuaJIT versions. So this function should be used in modules instead of <computeroutput>lua_type(L, idx) == LUA_TCDATA</computeroutput>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>L</parametername>
</parameternamelist>
<parameterdescription>
<para>Lua state. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>idx</parametername>
</parameternamelist>
<parameterdescription>
<para>Acceptable index on the Lua stack.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>1</parametername>
</parameternamelist>
<parameterdescription>
<para>If the value at the given index is a cdata. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>Otherwise. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/module.h" line="1037" column="1" declfile="src/module.h" declline="1037" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="module_8h_1a6016a29a15957c333f568d4059923fad" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>void* luaL_pushcdata</definition>
        <argsstring>(struct lua_State *L, uint32_t ctypeid)</argsstring>
        <name>luaL_pushcdata</name>
        <param>
          <type>struct lua_State *</type>
          <declname>L</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>ctypeid</declname>
        </param>
        <briefdescription>
<para>Push cdata of given <emphasis>ctypeid</emphasis> onto the stack. </para>
        </briefdescription>
        <detaileddescription>
<para>CTypeID must be used from FFI at least once. Allocated memory returned uninitialized. Only numbers and pointers are supported. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>L</parametername>
</parameternamelist>
<parameterdescription>
<para>Lua State </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ctypeid</parametername>
</parameternamelist>
<parameterdescription>
<para>FFI&apos;s CTypeID of this cdata </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="module_8h_1a09b8d32a69bc903b97ee3379b34fb2af" kindref="member">luaL_checkcdata</ref> </para>
</simplesect>
<simplesect kind="return"><para>memory associated with this cdata </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/module.h" line="1049" column="1" declfile="src/module.h" declline="1049" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="module_8h_1a09b8d32a69bc903b97ee3379b34fb2af" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>void* luaL_checkcdata</definition>
        <argsstring>(struct lua_State *L, int idx, uint32_t *ctypeid)</argsstring>
        <name>luaL_checkcdata</name>
        <param>
          <type>struct lua_State *</type>
          <declname>L</declname>
        </param>
        <param>
          <type>int</type>
          <declname>idx</declname>
        </param>
        <param>
          <type>uint32_t *</type>
          <declname>ctypeid</declname>
        </param>
        <briefdescription>
<para>Checks whether the function argument idx is a cdata. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>L</parametername>
</parameternamelist>
<parameterdescription>
<para>Lua State </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>idx</parametername>
</parameternamelist>
<parameterdescription>
<para>stack index </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ctypeid</parametername>
</parameternamelist>
<parameterdescription>
<para>FFI&apos;s CTypeID of this cdata </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="module_8h_1a6016a29a15957c333f568d4059923fad" kindref="member">luaL_pushcdata</ref> </para>
</simplesect>
<simplesect kind="return"><para>memory associated with this cdata </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/module.h" line="1060" column="1" declfile="src/module.h" declline="1060" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="module_8h_1aa62fc5e919f74956a06a9b40fb24f691" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void luaL_setcdatagc</definition>
        <argsstring>(struct lua_State *L, int idx)</argsstring>
        <name>luaL_setcdatagc</name>
        <param>
          <type>struct lua_State *</type>
          <declname>L</declname>
        </param>
        <param>
          <type>int</type>
          <declname>idx</declname>
        </param>
        <briefdescription>
<para>Sets finalizer function on a cdata object. </para>
        </briefdescription>
        <detaileddescription>
<para>Equivalent to call ffi.gc(obj, function). Finalizer function must be on the top of the stack. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>L</parametername>
</parameternamelist>
<parameterdescription>
<para>Lua State </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>idx</parametername>
</parameternamelist>
<parameterdescription>
<para>object </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/module.h" line="1070" column="1" declfile="src/module.h" declline="1070" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="module_8h_1a5d1f07b7fe39b8bd9b7a87f7c84d5d73" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t luaL_ctypeid</definition>
        <argsstring>(struct lua_State *L, const char *ctypename)</argsstring>
        <name>luaL_ctypeid</name>
        <param>
          <type>struct lua_State *</type>
          <declname>L</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>ctypename</declname>
        </param>
        <briefdescription>
<para>Return CTypeID (FFI) of given СDATA type. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>L</parametername>
</parameternamelist>
<parameterdescription>
<para>Lua State </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ctypename</parametername>
</parameternamelist>
<parameterdescription>
<para>С type name as string (e.g. &quot;struct request&quot; or &quot;uint32_t&quot;) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="module_8h_1a6016a29a15957c333f568d4059923fad" kindref="member">luaL_pushcdata</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="module_8h_1a09b8d32a69bc903b97ee3379b34fb2af" kindref="member">luaL_checkcdata</ref> </para>
</simplesect>
<simplesect kind="return"><para>CTypeID </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/module.h" line="1081" column="1" declfile="src/module.h" declline="1081" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="module_8h_1a498681c0c56f0aebe938004ab8947b0f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int luaL_cdef</definition>
        <argsstring>(struct lua_State *L, const char *ctypename)</argsstring>
        <name>luaL_cdef</name>
        <param>
          <type>struct lua_State *</type>
          <declname>L</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>ctypename</declname>
        </param>
        <briefdescription>
<para>Declare symbols for FFI. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>L</parametername>
</parameternamelist>
<parameterdescription>
<para>Lua State </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ctypename</parametername>
</parameternamelist>
<parameterdescription>
<para>C definitions, e.g &quot;struct stat&quot; </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para>ffi.cdef(def) </para>
</simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>on success </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>LUA_ERRRUN</parametername>
<parametername>LUA_ERRMEM</parametername>
<parametername>LUA_ERRERR</parametername>
</parameternamelist>
<parameterdescription>
<para>otherwise </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/module.h" line="1092" column="1" declfile="src/module.h" declline="1092" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="module_8h_1a6439d4dd158b27d2567e1bfd6243e084" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void luaL_pushuint64</definition>
        <argsstring>(struct lua_State *L, uint64_t val)</argsstring>
        <name>luaL_pushuint64</name>
        <param>
          <type>struct lua_State *</type>
          <declname>L</declname>
        </param>
        <param>
          <type>uint64_t</type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>public </para>
        </briefdescription>
        <detaileddescription>
<para>Push uint64_t onto the stack</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>L</parametername>
</parameternamelist>
<parameterdescription>
<para>is a Lua State </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>is a value to push </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/module.h" line="1104" column="1" declfile="src/module.h" declline="1104" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="module_8h_1a1dcccfbc48bac7e8cf4802e839c2f198" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void luaL_pushint64</definition>
        <argsstring>(struct lua_State *L, int64_t val)</argsstring>
        <name>luaL_pushint64</name>
        <param>
          <type>struct lua_State *</type>
          <declname>L</declname>
        </param>
        <param>
          <type>int64_t</type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>Push int64_t onto the stack. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>L</parametername>
</parameternamelist>
<parameterdescription>
<para>is a Lua State </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>is a value to push </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/module.h" line="1113" column="1" declfile="src/module.h" declline="1113" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="module_8h_1ac5247fbc8230e2f49464e25e27b87d35" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint64_t</type>
        <definition>uint64_t luaL_checkuint64</definition>
        <argsstring>(struct lua_State *L, int idx)</argsstring>
        <name>luaL_checkuint64</name>
        <param>
          <type>struct lua_State *</type>
          <declname>L</declname>
        </param>
        <param>
          <type>int</type>
          <declname>idx</declname>
        </param>
        <briefdescription>
<para>Checks whether the argument idx is a uint64 or a convertible string and returns this number. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>error</parametername>
</parameternamelist>
<parameterdescription>
<para>if the argument can&apos;t be converted. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/module.h" line="1121" column="1" declfile="src/module.h" declline="1121" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="module_8h_1a159fe92272b876c3fa7b130f026705bd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int64_t</type>
        <definition>int64_t luaL_checkint64</definition>
        <argsstring>(struct lua_State *L, int idx)</argsstring>
        <name>luaL_checkint64</name>
        <param>
          <type>struct lua_State *</type>
          <declname>L</declname>
        </param>
        <param>
          <type>int</type>
          <declname>idx</declname>
        </param>
        <briefdescription>
<para>Checks whether the argument idx is a int64 or a convertible string and returns this number. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>error</parametername>
</parameternamelist>
<parameterdescription>
<para>if the argument can&apos;t be converted. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/module.h" line="1129" column="1" declfile="src/module.h" declline="1129" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="module_8h_1a20e035148bc707412c054291f9b51855" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint64_t</type>
        <definition>uint64_t luaL_touint64</definition>
        <argsstring>(struct lua_State *L, int idx)</argsstring>
        <name>luaL_touint64</name>
        <param>
          <type>struct lua_State *</type>
          <declname>L</declname>
        </param>
        <param>
          <type>int</type>
          <declname>idx</declname>
        </param>
        <briefdescription>
<para>Checks whether the argument idx is a uint64 or a convertible string and returns this number. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>the converted number or 0 of argument can&apos;t be converted. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/module.h" line="1137" column="1" declfile="src/module.h" declline="1137" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="module_8h_1a31727f17a0a09ff7fb92ac3d2eaa2dce" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int64_t</type>
        <definition>int64_t luaL_toint64</definition>
        <argsstring>(struct lua_State *L, int idx)</argsstring>
        <name>luaL_toint64</name>
        <param>
          <type>struct lua_State *</type>
          <declname>L</declname>
        </param>
        <param>
          <type>int</type>
          <declname>idx</declname>
        </param>
        <briefdescription>
<para>Checks whether the argument idx is a int64 or a convertible string and returns this number. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>the converted number or 0 of argument can&apos;t be converted. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/module.h" line="1145" column="1" declfile="src/module.h" declline="1145" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="module_8h_1a4c95f4e99d2f7b5be64ca3918fdc4ccf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int luaT_call</definition>
        <argsstring>(lua_State *L, int nargs, int nreturns)</argsstring>
        <name>luaT_call</name>
        <param>
          <type>lua_State *</type>
          <declname>L</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nargs</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nreturns</declname>
        </param>
        <briefdescription>
<para>Like lua_call(), but with the proper support of Tarantool errors. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para>lua_call() </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/module.h" line="1152" column="1" declfile="src/module.h" declline="1152" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="module_8h_1a08aafb8aaa59640f2b7130e9281e53ec" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int luaT_cpcall</definition>
        <argsstring>(lua_State *L, lua_CFunction func, void *ud)</argsstring>
        <name>luaT_cpcall</name>
        <param>
          <type>lua_State *</type>
          <declname>L</declname>
        </param>
        <param>
          <type>lua_CFunction</type>
          <declname>func</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>ud</declname>
        </param>
        <briefdescription>
<para>Like lua_cpcall(), but with the proper support of Tarantool errors. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para>lua_cpcall() </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/module.h" line="1159" column="1" declfile="src/module.h" declline="1159" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="module_8h_1adcc2559396474f5dff737adf04edc382" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>lua_State *</type>
        <definition>lua_State* luaT_state</definition>
        <argsstring>(void)</argsstring>
        <name>luaT_state</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Get global Lua state used by Tarantool. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/module.h" line="1165" column="1" declfile="src/module.h" declline="1165" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="module_8h_1acb0f168f5234ddb59713defe03029118" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char* luaT_tolstring</definition>
        <argsstring>(lua_State *L, int idx, size_t *ssize)</argsstring>
        <name>luaT_tolstring</name>
        <param>
          <type>lua_State *</type>
          <declname>L</declname>
        </param>
        <param>
          <type>int</type>
          <declname>idx</declname>
        </param>
        <param>
          <type>size_t *</type>
          <declname>ssize</declname>
        </param>
        <briefdescription>
<para>Like lua_tolstring, but supports metatables, booleans and nil properly. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/module.h" line="1171" column="1" declfile="src/module.h" declline="1171" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="module_8h_1a08ca887563c2bcd2e17ad199dac627b2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int luaL_iscallable</definition>
        <argsstring>(lua_State *L, int idx)</argsstring>
        <name>luaL_iscallable</name>
        <param>
          <type>lua_State *</type>
          <declname>L</declname>
        </param>
        <param>
          <type>int</type>
          <declname>idx</declname>
        </param>
        <briefdescription>
<para>Check whether a Lua object is a function or has metatable/metatype with a __call field. </para>
        </briefdescription>
        <detaileddescription>
<para>Note: It does not check type of __call metatable/metatype field. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/module.h" line="1181" column="1" declfile="src/module.h" declline="1181" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="module_8h_1ac572fcff70dbc1c4c33339f1db082315" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="module_8h_1ae1cb16b1acef0772ea4192316f742aa8" kindref="member">box_ibuf_t</ref> *</type>
        <definition>box_ibuf_t* luaT_toibuf</definition>
        <argsstring>(struct lua_State *L, int idx)</argsstring>
        <name>luaT_toibuf</name>
        <param>
          <type>struct lua_State *</type>
          <declname>L</declname>
        </param>
        <param>
          <type>int</type>
          <declname>idx</declname>
        </param>
        <briefdescription>
<para>Check if a value on <emphasis>L</emphasis> stack by index <emphasis>idx</emphasis> is an ibuf object. </para>
        </briefdescription>
        <detaileddescription>
<para>Both &apos;struct ibuf&apos; and &apos;struct ibuf *&apos; are accepted. Returns NULL, if can&apos;t convert - not an ibuf object. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/module.h" line="1189" column="1" declfile="src/module.h" declline="1189" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="module_8h_1ae5e643c0eff90628dd8cb09ddd8dfc68" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int luaT_error</definition>
        <argsstring>(lua_State *L)</argsstring>
        <name>luaT_error</name>
        <param>
          <type>lua_State *</type>
          <declname>L</declname>
        </param>
        <briefdescription>
<para>Re-throws the last Tarantool error as a Lua object. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para>lua_error() </para>
</simplesect>
<simplesect kind="see"><para><ref refid="module_8h_1af8f82c313ba49fc97782663ffba71f58" kindref="member">box_error_last()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/module.h" line="1201" column="1" declfile="src/module.h" declline="1201" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="module_8h_1aa1740670301221218d3780f2a4df33c6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int luaT_push_nil_and_error</definition>
        <argsstring>(lua_State *L)</argsstring>
        <name>luaT_push_nil_and_error</name>
        <param>
          <type>lua_State *</type>
          <declname>L</declname>
        </param>
        <briefdescription>
<para>Return nil as the first return value and an error as the second. </para>
        </briefdescription>
        <detaileddescription>
<para>The error is received using <ref refid="module_8h_1af8f82c313ba49fc97782663ffba71f58" kindref="member">box_error_last()</ref>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>L</parametername>
</parameternamelist>
<parameterdescription>
<para>Lua stack. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/module.h" line="1210" column="1" declfile="src/module.h" declline="1210" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="module_8h_1aff9f0f763644cd5edc43ac632078b471" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void luaT_pusherror</definition>
        <argsstring>(struct lua_State *L, struct error *e)</argsstring>
        <name>luaT_pusherror</name>
        <param>
          <type>struct lua_State *</type>
          <declname>L</declname>
        </param>
        <param>
          <type>struct error *</type>
          <declname>e</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/module.h" line="1213" column="1" declfile="src/module.h" declline="1213" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="module_8h_1a94bf484fef1147b9e53323cd5082b505" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int64_t</type>
        <definition>int64_t box_txn_id</definition>
        <argsstring>(void)</argsstring>
        <name>box_txn_id</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>public </para>
        </briefdescription>
        <detaileddescription>
<para>Transaction id - a non-persistent unique identifier of the current transaction. -1 if there is no current transaction. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/module.h" line="1251" column="1" declfile="src/module.h" declline="1251" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="module_8h_1af44f82b5dd34b12026c33baf63ba3fee" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool box_txn</definition>
        <argsstring>(void)</argsstring>
        <name>box_txn</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Return true if there is an active transaction. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/module.h" line="1257" column="1" declfile="src/module.h" declline="1257" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="module_8h_1a88346fff21ac55ecf5e8e7e8750093ce" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int box_txn_begin</definition>
        <argsstring>(void)</argsstring>
        <name>box_txn_begin</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Begin a transaction in the current fiber. </para>
        </briefdescription>
        <detaileddescription>
<para>A transaction is attached to caller fiber, therefore one fiber can have only one active transaction.</para>
<para><parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>- success </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-1</parametername>
</parameternamelist>
<parameterdescription>
<para>- failed, perhaps a transaction has already been started </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/module.h" line="1270" column="1" declfile="src/module.h" declline="1270" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="module_8h_1a541c69864552de6ae21c4edce2bbf949" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int box_txn_commit</definition>
        <argsstring>(void)</argsstring>
        <name>box_txn_commit</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Commit the current transaction. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>- success </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-1</parametername>
</parameternamelist>
<parameterdescription>
<para>- failed, perhaps a disk write failure. started </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/module.h" line="1279" column="1" declfile="src/module.h" declline="1279" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="module_8h_1a59188d28eb2a8cd892d48f74041fec45" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int box_txn_rollback</definition>
        <argsstring>(void)</argsstring>
        <name>box_txn_rollback</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Rollback the current transaction. </para>
        </briefdescription>
        <detaileddescription>
<para>May fail if called from a nested statement. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/module.h" line="1287" column="1" declfile="src/module.h" declline="1287" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="module_8h_1adf5cc88ba87d8e5afe81604385609191" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>void* box_txn_alloc</definition>
        <argsstring>(size_t size)</argsstring>
        <name>box_txn_alloc</name>
        <param>
          <type>size_t</type>
          <declname>size</declname>
        </param>
        <briefdescription>
<para>Allocate memory on txn memory pool. </para>
        </briefdescription>
        <detaileddescription>
<para>The memory is automatically deallocated when the transaction is committed or rolled back.</para>
<para><parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>NULL</parametername>
</parameternamelist>
<parameterdescription>
<para>out of memory </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/module.h" line="1297" column="1" declfile="src/module.h" declline="1297" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="module_8h_1a3e930976f6e8e73e213f701c3761fce4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int box_txn_set_timeout</definition>
        <argsstring>(double timeout)</argsstring>
        <name>box_txn_set_timeout</name>
        <param>
          <type>double</type>
          <declname>timeout</declname>
        </param>
        <briefdescription>
<para>Set <emphasis>timeout</emphasis> for transaction, when it expires, transaction will be rolled back. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>if success </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-1</parametername>
</parameternamelist>
<parameterdescription>
<para>if timeout is less than or equal to 0, there is no current transaction or rollback timer for current transaction is already started. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/module.h" line="1309" column="1" declfile="src/module.h" declline="1309" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="module_8h_1a8a24686e9b0f80d53ded039aa69dfd33" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int box_txn_set_isolation</definition>
        <argsstring>(uint32_t level)</argsstring>
        <name>box_txn_set_isolation</name>
        <param>
          <type>uint32_t</type>
          <declname>level</declname>
        </param>
        <briefdescription>
<para>Set an isolation <emphasis>level</emphasis> for a transaction. </para>
        </briefdescription>
        <detaileddescription>
<para>Must be called before the first DML. The level must be of enun txn_isolation_level values. <parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>if success </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-1</parametername>
</parameternamelist>
<parameterdescription>
<para>if failed, diag is set. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/module.h" line="1320" column="1" declfile="src/module.h" declline="1320" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="module_8h_1a5a457c9503bb15df42c4854fbede340e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="module_8h_1ab230ff08fb24d580407126fc905cc271" kindref="member">box_tuple_format_t</ref> *</type>
        <definition>box_tuple_format_t* box_tuple_format_default</definition>
        <argsstring>(void)</argsstring>
        <name>box_tuple_format_default</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Tuple Format. </para>
        </briefdescription>
        <detaileddescription>
<para>Each Tuple has associated format (class). Default format is used to create tuples which are not attach to any particular space. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/module.h" line="1334" column="1" declfile="src/module.h" declline="1334" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="module_8h_1a2211f2682d19f564c55f2888e35d6430" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int box_tuple_ref</definition>
        <argsstring>(box_tuple_t *tuple)</argsstring>
        <name>box_tuple_ref</name>
        <param>
          <type><ref refid="module_8h_1a880c3e1e8e63b9a12353853fb6aefa3f" kindref="member">box_tuple_t</ref> *</type>
          <declname>tuple</declname>
        </param>
        <briefdescription>
<para>Increase the reference counter of tuple. </para>
        </briefdescription>
        <detaileddescription>
<para>Tuples are reference counted. All functions that return tuples guarantee that the last returned tuple is refcounted internally until the next call to API function that yields or returns another tuple.</para>
<para>You should increase the reference counter before taking tuples for long processing in your code. Such tuples will not be garbage collected even if another fiber remove they from space. After processing please decrement the reference counter using <ref refid="module_8h_1a22d7b12b1afbff0c3cc20726c10cc6cc" kindref="member">box_tuple_unref()</ref>, otherwise the tuple will leak.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>tuple</parametername>
</parameternamelist>
<parameterdescription>
<para>a tuple </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>always </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="module_8h_1a22d7b12b1afbff0c3cc20726c10cc6cc" kindref="member">box_tuple_unref()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/module.h" line="1359" column="1" declfile="src/module.h" declline="1359" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="module_8h_1a22d7b12b1afbff0c3cc20726c10cc6cc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void box_tuple_unref</definition>
        <argsstring>(box_tuple_t *tuple)</argsstring>
        <name>box_tuple_unref</name>
        <param>
          <type><ref refid="module_8h_1a880c3e1e8e63b9a12353853fb6aefa3f" kindref="member">box_tuple_t</ref> *</type>
          <declname>tuple</declname>
        </param>
        <briefdescription>
<para>Decrease the reference counter of tuple. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>tuple</parametername>
</parameternamelist>
<parameterdescription>
<para>a tuple </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="module_8h_1a2211f2682d19f564c55f2888e35d6430" kindref="member">box_tuple_ref()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/module.h" line="1368" column="1" declfile="src/module.h" declline="1368" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="module_8h_1a800d61b749ed483d35b65025eaa3039e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t box_tuple_field_count</definition>
        <argsstring>(box_tuple_t *tuple)</argsstring>
        <name>box_tuple_field_count</name>
        <param>
          <type><ref refid="module_8h_1a880c3e1e8e63b9a12353853fb6aefa3f" kindref="member">box_tuple_t</ref> *</type>
          <declname>tuple</declname>
        </param>
        <briefdescription>
<para>Return the number of fields in tuple (the size of MsgPack Array). </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>tuple</parametername>
</parameternamelist>
<parameterdescription>
<para>a tuple </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/module.h" line="1375" column="1" declfile="src/module.h" declline="1375" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="module_8h_1a6812d20a87dc1f55648679680d0d2272" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t box_tuple_bsize</definition>
        <argsstring>(box_tuple_t *tuple)</argsstring>
        <name>box_tuple_bsize</name>
        <param>
          <type><ref refid="module_8h_1a880c3e1e8e63b9a12353853fb6aefa3f" kindref="member">box_tuple_t</ref> *</type>
          <declname>tuple</declname>
        </param>
        <briefdescription>
<para>Return the number of bytes used to store internal tuple data (MsgPack Array). </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>tuple</parametername>
</parameternamelist>
<parameterdescription>
<para>a tuple </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/module.h" line="1382" column="1" declfile="src/module.h" declline="1382" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="module_8h_1af520a6742b61a5bcb879b75d09d72f4e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ssize_t</type>
        <definition>ssize_t box_tuple_to_buf</definition>
        <argsstring>(box_tuple_t *tuple, char *buf, size_t size)</argsstring>
        <name>box_tuple_to_buf</name>
        <param>
          <type><ref refid="module_8h_1a880c3e1e8e63b9a12353853fb6aefa3f" kindref="member">box_tuple_t</ref> *</type>
          <declname>tuple</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>size</declname>
        </param>
        <briefdescription>
<para>Dump raw MsgPack data to the memory buffer <emphasis>buf</emphasis> of size <emphasis>size</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para>Store tuple fields in the memory buffer. <parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>-1</parametername>
</parameternamelist>
<parameterdescription>
<para>on error. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>number</parametername>
</parameternamelist>
<parameterdescription>
<para>of bytes written on success. Upon successful return, the function returns the number of bytes written. If buffer size is not enough then the return value is the number of bytes which would have been written if enough space had been available. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/module.h" line="1395" column="1" declfile="src/module.h" declline="1395" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="module_8h_1a7195d3207b3d7e034473d26b6d24dd2f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="module_8h_1ab230ff08fb24d580407126fc905cc271" kindref="member">box_tuple_format_t</ref> *</type>
        <definition>box_tuple_format_t* box_tuple_format</definition>
        <argsstring>(box_tuple_t *tuple)</argsstring>
        <name>box_tuple_format</name>
        <param>
          <type><ref refid="module_8h_1a880c3e1e8e63b9a12353853fb6aefa3f" kindref="member">box_tuple_t</ref> *</type>
          <declname>tuple</declname>
        </param>
        <briefdescription>
<para>Return the associated format. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>tuple</parametername>
</parameternamelist>
<parameterdescription>
<para>tuple </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>tuple_format </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/module.h" line="1403" column="1" declfile="src/module.h" declline="1403" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="module_8h_1a13b0c6fa0fbeb5d6f2974e8b82aa83f0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char* box_tuple_field</definition>
        <argsstring>(box_tuple_t *tuple, uint32_t fieldno)</argsstring>
        <name>box_tuple_field</name>
        <param>
          <type><ref refid="module_8h_1a880c3e1e8e63b9a12353853fb6aefa3f" kindref="member">box_tuple_t</ref> *</type>
          <declname>tuple</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>fieldno</declname>
        </param>
        <briefdescription>
<para>Return the raw tuple field in MsgPack format. </para>
        </briefdescription>
        <detaileddescription>
<para>The buffer is valid until next call to box_tuple_* functions.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>tuple</parametername>
</parameternamelist>
<parameterdescription>
<para>a tuple </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fieldno</parametername>
</parameternamelist>
<parameterdescription>
<para>zero-based index in MsgPack array. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>NULL</parametername>
</parameternamelist>
<parameterdescription>
<para>if i &gt;= box_tuple_field_count(tuple) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>msgpack</parametername>
</parameternamelist>
<parameterdescription>
<para>otherwise </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/module.h" line="1416" column="1" declfile="src/module.h" declline="1416" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="module_8h_1a74729917c4ca28b3044569f5eccaecd9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char* box_tuple_field_by_path</definition>
        <argsstring>(box_tuple_t *tuple, const char *path, uint32_t path_len, int index_base)</argsstring>
        <name>box_tuple_field_by_path</name>
        <param>
          <type><ref refid="module_8h_1a880c3e1e8e63b9a12353853fb6aefa3f" kindref="member">box_tuple_t</ref> *</type>
          <declname>tuple</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>path</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>path_len</declname>
        </param>
        <param>
          <type>int</type>
          <declname>index_base</declname>
        </param>
        <briefdescription>
<para>Return a raw tuple field in the MsgPack format pointed by a JSON path. </para>
        </briefdescription>
        <detaileddescription>
<para>The JSON path includes the outmost field. For example, &quot;c&quot; in [&quot;a&quot;, [&quot;b&quot;, &quot;c&quot;], &quot;d&quot;] can be accessed using &quot;[2][2]&quot; path (if index_base is 1, as in Lua). If index_base is set to 0, the same field will be pointed by the &quot;[1][1]&quot; path.</para>
<para>The first JSON path token may be a field name if the tuple has associated format with named fields. A field of a nested map can be accessed in the same way: &quot;foo.bar&quot; or &quot;.foo.bar&quot;.</para>
<para>The return value is valid until the tuple is destroyed, see <ref refid="module_8h_1a2211f2682d19f564c55f2888e35d6430" kindref="member">box_tuple_ref()</ref>.</para>
<para>Return NULL if the field does not exist or if the JSON path is malformed or invalid. Multikey JSON path token [*] is treated as invalid in this context.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>tuple</parametername>
</parameternamelist>
<parameterdescription>
<para>a tuple </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>path</parametername>
</parameternamelist>
<parameterdescription>
<para>a JSON path </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>path_len</parametername>
</parameternamelist>
<parameterdescription>
<para>a length of <emphasis>path</emphasis> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>index_base</parametername>
</parameternamelist>
<parameterdescription>
<para>0 if array element indexes in <emphasis>path</emphasis> are zero-based (like in C) or 1 if they&apos;re one-based (like in Lua) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to a field data if the field exists or NULL </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/module.h" line="1447" column="1" declfile="src/module.h" declline="1447" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="module_8h_1a1aabe2cc4f09abaa070664c6d7156cd1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="module_8h_1aa289ab037764b9f065d4b683cb186bda" kindref="member">box_tuple_iterator_t</ref> *</type>
        <definition>box_tuple_iterator_t* box_tuple_iterator</definition>
        <argsstring>(box_tuple_t *tuple)</argsstring>
        <name>box_tuple_iterator</name>
        <param>
          <type><ref refid="module_8h_1a880c3e1e8e63b9a12353853fb6aefa3f" kindref="member">box_tuple_t</ref> *</type>
          <declname>tuple</declname>
        </param>
        <briefdescription>
<para>Allocate and initialize a new tuple iterator. </para>
        </briefdescription>
        <detaileddescription>
<para>The tuple iterator allow to iterate over fields at root level of MsgPack array.</para>
<para>Example: <programlisting><codeline><highlight class="normal">box_tuple_iterator<sp/>*it<sp/>=<sp/>box_tuple_iterator(tuple);</highlight></codeline>
<codeline><highlight class="normal">if<sp/>(it<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>//<sp/>error<sp/>handling<sp/>using<sp/>box_error_last()</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">const<sp/>char<sp/>*field;</highlight></codeline>
<codeline><highlight class="normal">while<sp/>(field<sp/>=<sp/>box_tuple_next(it))<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>//<sp/>process<sp/>raw<sp/>MsgPack<sp/>data</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>rewind<sp/>iterator<sp/>to<sp/>first<sp/>position</highlight></codeline>
<codeline><highlight class="normal">box_tuple_rewind(it);</highlight></codeline>
<codeline><highlight class="normal">assert(box_tuple_position(it)<sp/>==<sp/>0);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>rewind<sp/>iterator<sp/>to<sp/>first<sp/>position</highlight></codeline>
<codeline><highlight class="normal">field<sp/>=<sp/>box_tuple_seek(it,<sp/>3);</highlight></codeline>
<codeline><highlight class="normal">assert(box_tuple_position(it)<sp/>==<sp/>4);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">box_iterator_free(it);</highlight></codeline>
</programlisting></para>
<para><simplesect kind="post"><para>box_tuple_position(it) == 0 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/module.h" line="1483" column="1" declfile="src/module.h" declline="1483" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="module_8h_1acbbb37bc35f4c2eac665acb61f08da95" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void box_tuple_iterator_free</definition>
        <argsstring>(box_tuple_iterator_t *it)</argsstring>
        <name>box_tuple_iterator_free</name>
        <param>
          <type><ref refid="module_8h_1aa289ab037764b9f065d4b683cb186bda" kindref="member">box_tuple_iterator_t</ref> *</type>
          <declname>it</declname>
        </param>
        <briefdescription>
<para>Destroy and free tuple iterator. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/module.h" line="1489" column="1" declfile="src/module.h" declline="1489" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="module_8h_1ac24865c6c4138cd6a252f32c55c812c6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t box_tuple_position</definition>
        <argsstring>(box_tuple_iterator_t *it)</argsstring>
        <name>box_tuple_position</name>
        <param>
          <type><ref refid="module_8h_1aa289ab037764b9f065d4b683cb186bda" kindref="member">box_tuple_iterator_t</ref> *</type>
          <declname>it</declname>
        </param>
        <briefdescription>
<para>Return zero-based next position in iterator. </para>
        </briefdescription>
        <detaileddescription>
<para>That is, this function return the field id of field that will be returned by the next call to box_tuple_next(it). Returned value is zero after initialization or rewind and box_tuple_field_count(tuple) after the end of iteration.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>it</parametername>
</parameternamelist>
<parameterdescription>
<para>tuple iterator </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>position. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/module.h" line="1502" column="1" declfile="src/module.h" declline="1502" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="module_8h_1aaa998b89aa550c51d8576d3b766d1a67" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void box_tuple_rewind</definition>
        <argsstring>(box_tuple_iterator_t *it)</argsstring>
        <name>box_tuple_rewind</name>
        <param>
          <type><ref refid="module_8h_1aa289ab037764b9f065d4b683cb186bda" kindref="member">box_tuple_iterator_t</ref> *</type>
          <declname>it</declname>
        </param>
        <briefdescription>
<para>Rewind iterator to the initial position. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>it</parametername>
</parameternamelist>
<parameterdescription>
<para>tuple iterator </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="post"><para>box_tuple_position(it) == 0 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/module.h" line="1511" column="1" declfile="src/module.h" declline="1511" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="module_8h_1a76dc6a76579c761e9c7b2b9ced89290a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char* box_tuple_seek</definition>
        <argsstring>(box_tuple_iterator_t *it, uint32_t fieldno)</argsstring>
        <name>box_tuple_seek</name>
        <param>
          <type><ref refid="module_8h_1aa289ab037764b9f065d4b683cb186bda" kindref="member">box_tuple_iterator_t</ref> *</type>
          <declname>it</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>fieldno</declname>
        </param>
        <briefdescription>
<para>Seek the tuple iterator. </para>
        </briefdescription>
        <detaileddescription>
<para>The returned buffer is valid until next call to box_tuple_* API. Requested fieldno returned by next call to box_tuple_next(it).</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>it</parametername>
</parameternamelist>
<parameterdescription>
<para>tuple iterator </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fieldno</parametername>
</parameternamelist>
<parameterdescription>
<para>- zero-based position in MsgPack array. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="post"><para>box_tuple_position(it) == fieldno if returned value is not NULL </para>
</simplesect>
<simplesect kind="post"><para>box_tuple_position(it) == box_tuple_field_count(tuple) if returned value is NULL. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/module.h" line="1526" column="1" declfile="src/module.h" declline="1526" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="module_8h_1a7b88a4ee472624416d875a906a82d99b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char* box_tuple_next</definition>
        <argsstring>(box_tuple_iterator_t *it)</argsstring>
        <name>box_tuple_next</name>
        <param>
          <type><ref refid="module_8h_1aa289ab037764b9f065d4b683cb186bda" kindref="member">box_tuple_iterator_t</ref> *</type>
          <declname>it</declname>
        </param>
        <briefdescription>
<para>Return the next tuple field from tuple iterator. </para>
        </briefdescription>
        <detaileddescription>
<para>The returned buffer is valid until next call to box_tuple_* API.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>it</parametername>
</parameternamelist>
<parameterdescription>
<para>tuple iterator. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>NULL</parametername>
</parameternamelist>
<parameterdescription>
<para>if there are no more fields. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>MsgPack</parametername>
</parameternamelist>
<parameterdescription>
<para>otherwise </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="pre"><para>box_tuple_position(it) is zero-based id of returned field </para>
</simplesect>
<simplesect kind="post"><para>box_tuple_position(it) == box_tuple_field_count(tuple) if returned value is NULL. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/module.h" line="1540" column="1" declfile="src/module.h" declline="1540" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="module_8h_1a442eb6797ae4d114d00dc68f2b1e361a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="module_8h_1a880c3e1e8e63b9a12353853fb6aefa3f" kindref="member">box_tuple_t</ref> *</type>
        <definition>box_tuple_t* box_tuple_new</definition>
        <argsstring>(box_tuple_format_t *format, const char *data, const char *end)</argsstring>
        <name>box_tuple_new</name>
        <param>
          <type><ref refid="module_8h_1ab230ff08fb24d580407126fc905cc271" kindref="member">box_tuple_format_t</ref> *</type>
          <declname>format</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>end</declname>
        </param>
        <briefdescription>
<para>Allocate and initialize a new tuple from a raw MsgPack Array data. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>format</parametername>
</parameternamelist>
<parameterdescription>
<para>tuple format. Use <ref refid="module_8h_1a5a457c9503bb15df42c4854fbede340e" kindref="member">box_tuple_format_default()</ref> to create space-independent tuple. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>tuple data in MsgPack Array format ([field1, field2, ...]). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>end</parametername>
</parameternamelist>
<parameterdescription>
<para>the end of <emphasis>data</emphasis> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>tuple</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="pre"><para>data, end is valid MsgPack Array </para>
</simplesect>
<simplesect kind="see"><para><programlisting><codeline><highlight class="normal">box.tuple.new(data)<sp/></highlight></codeline>
</programlisting> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/module.h" line="1554" column="1" declfile="src/module.h" declline="1554" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="module_8h_1a83720cf7cd56310193b5026cfc58a151" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="module_8h_1a880c3e1e8e63b9a12353853fb6aefa3f" kindref="member">box_tuple_t</ref> *</type>
        <definition>box_tuple_t* box_tuple_update</definition>
        <argsstring>(box_tuple_t *tuple, const char *expr, const char *expr_end)</argsstring>
        <name>box_tuple_update</name>
        <param>
          <type><ref refid="module_8h_1a880c3e1e8e63b9a12353853fb6aefa3f" kindref="member">box_tuple_t</ref> *</type>
          <declname>tuple</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>expr</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>expr_end</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/module.h" line="1557" column="1" declfile="src/module.h" declline="1557" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="module_8h_1a37a1df2e276a8abe83c5187e93971697" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="module_8h_1a880c3e1e8e63b9a12353853fb6aefa3f" kindref="member">box_tuple_t</ref> *</type>
        <definition>box_tuple_t* box_tuple_upsert</definition>
        <argsstring>(box_tuple_t *tuple, const char *expr, const char *expr_end)</argsstring>
        <name>box_tuple_upsert</name>
        <param>
          <type><ref refid="module_8h_1a880c3e1e8e63b9a12353853fb6aefa3f" kindref="member">box_tuple_t</ref> *</type>
          <declname>tuple</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>expr</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>expr_end</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/module.h" line="1560" column="1" declfile="src/module.h" declline="1560" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="module_8h_1a8f05611324090cd538b14e0728cf185a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int box_tuple_validate</definition>
        <argsstring>(box_tuple_t *tuple, box_tuple_format_t *format)</argsstring>
        <name>box_tuple_validate</name>
        <param>
          <type><ref refid="module_8h_1a880c3e1e8e63b9a12353853fb6aefa3f" kindref="member">box_tuple_t</ref> *</type>
          <declname>tuple</declname>
        </param>
        <param>
          <type><ref refid="module_8h_1ab230ff08fb24d580407126fc905cc271" kindref="member">box_tuple_format_t</ref> *</type>
          <declname>format</declname>
        </param>
        <briefdescription>
<para>Check tuple data correspondence to the space format. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>tuple</parametername>
</parameternamelist>
<parameterdescription>
<para>Tuple to validate. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>format</parametername>
</parameternamelist>
<parameterdescription>
<para>Format to which the tuple must match.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>The tuple is valid. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-1</parametername>
</parameternamelist>
<parameterdescription>
<para>The tuple is invalid. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/module.h" line="1571" column="1" declfile="src/module.h" declline="1571" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="module_8h_1aa6977b1c26a2a187c8d4de4e93799186" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="module_8h_1acfbe4043908ad1b4a106689ad2da8814" kindref="member">box_key_def_t</ref> *</type>
        <definition>box_key_def_t* box_key_def_new</definition>
        <argsstring>(uint32_t *fields, uint32_t *types, uint32_t part_count)</argsstring>
        <name>box_key_def_new</name>
        <param>
          <type>uint32_t *</type>
          <declname>fields</declname>
        </param>
        <param>
          <type>uint32_t *</type>
          <declname>types</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>part_count</declname>
        </param>
        <briefdescription>
<para>Create key definition with given field numbers and field types. </para>
        </briefdescription>
        <detaileddescription>
<para>May be used for tuple format creation and/or tuple comparison.</para>
<para><simplesect kind="see"><para>&lt;box_key_def_new_v2&gt;().</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>fields</parametername>
</parameternamelist>
<parameterdescription>
<para>array with key field identifiers </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>types</parametername>
</parameternamelist>
<parameterdescription>
<para>array with key field types (see enum field_type) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>part_count</parametername>
</parameternamelist>
<parameterdescription>
<para>the number of key fields </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a new key definition object </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/module.h" line="1687" column="1" declfile="src/module.h" declline="1687" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="module_8h_1a52f751905f893144ead356172137e796" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void box_key_part_def_create</definition>
        <argsstring>(box_key_part_def_t *part)</argsstring>
        <name>box_key_part_def_create</name>
        <param>
          <type><ref refid="module_8h_1a302d3f85cf14f03ace911e9541c95c4d" kindref="member">box_key_part_def_t</ref> *</type>
          <declname>part</declname>
        </param>
        <briefdescription>
<para>Initialize a key part with default values. </para>
        </briefdescription>
        <detaileddescription>
<para><table rows="6" cols="3"><row>
<entry thead="yes"><para>Field </para>
</entry><entry thead="yes"><para>Default value </para>
</entry><entry thead="yes"><para>Details  </para>
</entry></row>
<row>
<entry thead="no"><para>fieldno </para>
</entry><entry thead="no"><para>0 </para>
</entry><entry thead="no"><para></para>
</entry></row>
<row>
<entry thead="no"><para>flags </para>
</entry><entry thead="no"><para>&lt;default flags&gt; </para>
</entry><entry thead="no"><para></para>
</entry></row>
<row>
<entry thead="no"><para>field_type </para>
</entry><entry thead="no"><para>NULL </para>
</entry><entry thead="no"><para>[^1]  </para>
</entry></row>
<row>
<entry thead="no"><para>collation </para>
</entry><entry thead="no"><para>NULL </para>
</entry><entry thead="no"><para></para>
</entry></row>
<row>
<entry thead="no"><para>path </para>
</entry><entry thead="no"><para>NULL </para>
</entry><entry thead="no"><para></para>
</entry></row>
</table>
</para>
<para>Default flag values are the following:</para>
<para><table rows="3" cols="2"><row>
<entry thead="yes"><para>Flag </para>
</entry><entry thead="yes"><para>Default value  </para>
</entry></row>
<row>
<entry thead="no"><para>BOX_KEY_PART_DEF_IS_NULLABLE </para>
</entry><entry thead="no"><para>0 (unset)  </para>
</entry></row>
<row>
<entry thead="no"><para>BOX_KEY_PART_DEF_EXCLUDE_NULL </para>
</entry><entry thead="no"><para>0 (unset)  </para>
</entry></row>
</table>
</para>
<para>Default values of fields and flags are permitted to be changed in future tarantool versions. However we should be VERY conservative here and consider any meaningful usage scenarios, when doing so. At least new defaults should be consistent with how tarantool itself doing key_def related operations: validation, key extraction, comparisons and so on.</para>
<para>All trailing padding bytes are set to zero. The same for unknown &lt;flags&gt; bits.</para>
<para>[^1]: &lt;box_key_def_new_v2&gt;() does not accept NULL as a &lt;field_type&gt;, so it should be filled explicitly. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/module.h" line="1721" column="1" declfile="src/module.h" declline="1721" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="module_8h_1a3591006ff571eb1ac2b05f5e41a8a8ca" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="module_8h_1acfbe4043908ad1b4a106689ad2da8814" kindref="member">box_key_def_t</ref> *</type>
        <definition>box_key_def_t* box_key_def_new_v2</definition>
        <argsstring>(box_key_part_def_t *parts, uint32_t part_count)</argsstring>
        <name>box_key_def_new_v2</name>
        <param>
          <type><ref refid="module_8h_1a302d3f85cf14f03ace911e9541c95c4d" kindref="member">box_key_part_def_t</ref> *</type>
          <declname>parts</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>part_count</declname>
        </param>
        <briefdescription>
<para>Create a key_def from given key parts. </para>
        </briefdescription>
        <detaileddescription>
<para>Unlike &lt;box_key_def_new&gt;() this function allows to define nullability, collation and other options for each key part.</para>
<para>&lt;box_key_part_def_t&gt; fields that are unknown at given tarantool version are ignored. The same for unknown &lt;flags&gt; bits.</para>
<para>In case of an error set a diag and return NULL. <simplesect kind="see"><para>&lt;box_error_last&gt;(). </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/module.h" line="1736" column="1" declfile="src/module.h" declline="1736" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="module_8h_1af072fd108644a06c68d5ba1f74efb460" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="module_8h_1acfbe4043908ad1b4a106689ad2da8814" kindref="member">box_key_def_t</ref> *</type>
        <definition>box_key_def_t* box_key_def_dup</definition>
        <argsstring>(const box_key_def_t *key_def)</argsstring>
        <name>box_key_def_dup</name>
        <param>
          <type>const <ref refid="module_8h_1acfbe4043908ad1b4a106689ad2da8814" kindref="member">box_key_def_t</ref> *</type>
          <declname>key_def</declname>
        </param>
        <briefdescription>
<para>Duplicate key_def. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>key_def</parametername>
</parameternamelist>
<parameterdescription>
<para>Original key_def.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>not</parametername>
</parameternamelist>
<parameterdescription>
<para>NULL Duplicate of src. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NULL</parametername>
</parameternamelist>
<parameterdescription>
<para>Memory error. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/module.h" line="1746" column="1" declfile="src/module.h" declline="1746" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="module_8h_1a82fdf05e0d276baa072123358c29e046" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void box_key_def_delete</definition>
        <argsstring>(box_key_def_t *key_def)</argsstring>
        <name>box_key_def_delete</name>
        <param>
          <type><ref refid="module_8h_1acfbe4043908ad1b4a106689ad2da8814" kindref="member">box_key_def_t</ref> *</type>
          <declname>key_def</declname>
        </param>
        <briefdescription>
<para>Delete key definition. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>key_def</parametername>
</parameternamelist>
<parameterdescription>
<para>key definition to delete </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/module.h" line="1754" column="1" declfile="src/module.h" declline="1754" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="module_8h_1ab6ea5a24503d921ba39fab504eac17fe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="module_8h_1a302d3f85cf14f03ace911e9541c95c4d" kindref="member">box_key_part_def_t</ref> *</type>
        <definition>box_key_part_def_t* box_key_def_dump_parts</definition>
        <argsstring>(const box_key_def_t *key_def, uint32_t *part_count_ptr)</argsstring>
        <name>box_key_def_dump_parts</name>
        <param>
          <type>const <ref refid="module_8h_1acfbe4043908ad1b4a106689ad2da8814" kindref="member">box_key_def_t</ref> *</type>
          <declname>key_def</declname>
        </param>
        <param>
          <type>uint32_t *</type>
          <declname>part_count_ptr</declname>
        </param>
        <briefdescription>
<para>Dump key part definitions of given key_def. </para>
        </briefdescription>
        <detaileddescription>
<para>The function allocates key parts and storage for pointer fields (e.g. collation names) on the box region. <simplesect kind="see"><para>&lt;box_region_truncate&gt;().</para>
</simplesect>
&lt;box_key_part_def_t&gt; fields that are unknown at given tarantool version are set to zero. The same for unknown &lt;flags&gt; bits.</para>
<para>In case of an error set a diag and return NULL. <simplesect kind="see"><para>&lt;box_error_last&gt;(). </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/module.h" line="1770" column="1" declfile="src/module.h" declline="1770" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="module_8h_1a3c01aea33b0593fd1b84243be7033469" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int box_key_def_validate_tuple</definition>
        <argsstring>(box_key_def_t *key_def, box_tuple_t *tuple)</argsstring>
        <name>box_key_def_validate_tuple</name>
        <param>
          <type><ref refid="module_8h_1acfbe4043908ad1b4a106689ad2da8814" kindref="member">box_key_def_t</ref> *</type>
          <declname>key_def</declname>
        </param>
        <param>
          <type><ref refid="module_8h_1a880c3e1e8e63b9a12353853fb6aefa3f" kindref="member">box_tuple_t</ref> *</type>
          <declname>tuple</declname>
        </param>
        <briefdescription>
<para>Check that tuple fields match with given key definition. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>key_def</parametername>
</parameternamelist>
<parameterdescription>
<para>Key definition. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tuple</parametername>
</parameternamelist>
<parameterdescription>
<para>Tuple to validate.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>The tuple is valid. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-1</parametername>
</parameternamelist>
<parameterdescription>
<para>The tuple is invalid.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
In case of an invalid tuple set a diag and return -1. <simplesect kind="see"><para>&lt;box_error_last&gt;(). </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/module.h" line="1785" column="1" declfile="src/module.h" declline="1785" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="module_8h_1a88b978e168708341cb358a15c5e42430" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int box_tuple_compare</definition>
        <argsstring>(box_tuple_t *tuple_a, box_tuple_t *tuple_b, box_key_def_t *key_def)</argsstring>
        <name>box_tuple_compare</name>
        <param>
          <type><ref refid="module_8h_1a880c3e1e8e63b9a12353853fb6aefa3f" kindref="member">box_tuple_t</ref> *</type>
          <declname>tuple_a</declname>
        </param>
        <param>
          <type><ref refid="module_8h_1a880c3e1e8e63b9a12353853fb6aefa3f" kindref="member">box_tuple_t</ref> *</type>
          <declname>tuple_b</declname>
        </param>
        <param>
          <type><ref refid="module_8h_1acfbe4043908ad1b4a106689ad2da8814" kindref="member">box_key_def_t</ref> *</type>
          <declname>key_def</declname>
        </param>
        <briefdescription>
<para>Compare tuples using the key definition. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>tuple_a</parametername>
</parameternamelist>
<parameterdescription>
<para>first tuple </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tuple_b</parametername>
</parameternamelist>
<parameterdescription>
<para>second tuple </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>key_def</parametername>
</parameternamelist>
<parameterdescription>
<para>key definition </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>if key_fields(tuple_a) == key_fields(tuple_b) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>&lt;0</parametername>
</parameternamelist>
<parameterdescription>
<para>if key_fields(tuple_a) &lt; key_fields(tuple_b) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>&gt;0</parametername>
</parameternamelist>
<parameterdescription>
<para>if key_fields(tuple_a) &gt; key_fields(tuple_b) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/module.h" line="1797" column="1" declfile="src/module.h" declline="1797" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="module_8h_1ae8fec3862fabe2eb885bb71517b99a5f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int box_tuple_compare_with_key</definition>
        <argsstring>(box_tuple_t *tuple_a, const char *key_b, box_key_def_t *key_def)</argsstring>
        <name>box_tuple_compare_with_key</name>
        <param>
          <type><ref refid="module_8h_1a880c3e1e8e63b9a12353853fb6aefa3f" kindref="member">box_tuple_t</ref> *</type>
          <declname>tuple_a</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>key_b</declname>
        </param>
        <param>
          <type><ref refid="module_8h_1acfbe4043908ad1b4a106689ad2da8814" kindref="member">box_key_def_t</ref> *</type>
          <declname>key_def</declname>
        </param>
        <briefdescription>
<para>Compare tuple with key using the key definition. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>tuple</parametername>
</parameternamelist>
<parameterdescription>
<para>tuple </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>key</parametername>
</parameternamelist>
<parameterdescription>
<para>key with MessagePack array header </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>key_def</parametername>
</parameternamelist>
<parameterdescription>
<para>key definition</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>if key_fields(tuple) == parts(key) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>&lt;0</parametername>
</parameternamelist>
<parameterdescription>
<para>if key_fields(tuple) &lt; parts(key) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>&gt;0</parametername>
</parameternamelist>
<parameterdescription>
<para>if key_fields(tuple) &gt; parts(key) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/module.h" line="1812" column="1" declfile="src/module.h" declline="1812" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="module_8h_1ad2ee8761b613b5a518f94dc7f2ca0073" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="module_8h_1acfbe4043908ad1b4a106689ad2da8814" kindref="member">box_key_def_t</ref> *</type>
        <definition>box_key_def_t* box_key_def_merge</definition>
        <argsstring>(const box_key_def_t *first, const box_key_def_t *second)</argsstring>
        <name>box_key_def_merge</name>
        <param>
          <type>const <ref refid="module_8h_1acfbe4043908ad1b4a106689ad2da8814" kindref="member">box_key_def_t</ref> *</type>
          <declname>first</declname>
        </param>
        <param>
          <type>const <ref refid="module_8h_1acfbe4043908ad1b4a106689ad2da8814" kindref="member">box_key_def_t</ref> *</type>
          <declname>second</declname>
        </param>
        <briefdescription>
<para>Allocate a new key_def with a set union of key parts from first and second key defs. </para>
        </briefdescription>
        <detaileddescription>
<para>Parts of the new key_def consist of the first key_def&apos;s parts and those parts of the second key_def that were not among the first parts.</para>
<para><parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>not</parametername>
</parameternamelist>
<parameterdescription>
<para>NULL Ok. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NULL</parametername>
</parameternamelist>
<parameterdescription>
<para>Memory error.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
In case of an error set a diag and return NULL. <simplesect kind="see"><para>&lt;box_error_last&gt;(). </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/module.h" line="1830" column="1" declfile="src/module.h" declline="1830" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="module_8h_1a28e3e05887ff307b8ac5390f70f60158" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char* box_key_def_extract_key</definition>
        <argsstring>(box_key_def_t *key_def, box_tuple_t *tuple, int multikey_idx, uint32_t *key_size_ptr)</argsstring>
        <name>box_key_def_extract_key</name>
        <param>
          <type><ref refid="module_8h_1acfbe4043908ad1b4a106689ad2da8814" kindref="member">box_key_def_t</ref> *</type>
          <declname>key_def</declname>
        </param>
        <param>
          <type><ref refid="module_8h_1a880c3e1e8e63b9a12353853fb6aefa3f" kindref="member">box_tuple_t</ref> *</type>
          <declname>tuple</declname>
        </param>
        <param>
          <type>int</type>
          <declname>multikey_idx</declname>
        </param>
        <param>
          <type>uint32_t *</type>
          <declname>key_size_ptr</declname>
        </param>
        <briefdescription>
<para>Extract key from tuple by given key definition and return buffer allocated on the box region with this key. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para>&lt;box_region_truncate&gt;().</para>
</simplesect>
This function has O(n) complexity, where n is the number of key parts.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>key_def</parametername>
</parameternamelist>
<parameterdescription>
<para>Definition of key that need to extract. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tuple</parametername>
</parameternamelist>
<parameterdescription>
<para>Tuple from which need to extract key. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>multikey_idx</parametername>
</parameternamelist>
<parameterdescription>
<para>Multikey index hint or -1. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>key_size_ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>Here will be size of extracted key.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>not</parametername>
</parameternamelist>
<parameterdescription>
<para>NULL Success. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NULL</parametername>
</parameternamelist>
<parameterdescription>
<para>Memory allocation error.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
In case of an error set a diag and return NULL. <simplesect kind="see"><para>&lt;box_error_last&gt;(). </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/module.h" line="1852" column="1" declfile="src/module.h" declline="1852" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="module_8h_1a32868fa25087aa7d7249fd2692a0ac52" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int box_key_def_validate_key</definition>
        <argsstring>(const box_key_def_t *key_def, const char *key, uint32_t *key_size_ptr)</argsstring>
        <name>box_key_def_validate_key</name>
        <param>
          <type>const <ref refid="module_8h_1acfbe4043908ad1b4a106689ad2da8814" kindref="member">box_key_def_t</ref> *</type>
          <declname>key_def</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>key</declname>
        </param>
        <param>
          <type>uint32_t *</type>
          <declname>key_size_ptr</declname>
        </param>
        <briefdescription>
<para>Check a key against given key definition. </para>
        </briefdescription>
        <detaileddescription>
<para>Verifies key parts against given key_def&apos;s field types with respect to nullability.</para>
<para>A partial key (with less part than defined in <emphasis>key_def</emphasis>) is verified by given key parts, the omitted tail is not verified anyhow.</para>
<para>Note: nil is accepted for nullable fields, but only for them.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>key_def</parametername>
</parameternamelist>
<parameterdescription>
<para>Key definition. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>key</parametername>
</parameternamelist>
<parameterdescription>
<para>MessagePack&apos;ed data for matching. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>key_size_ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>Here will be size of the validated key.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>The key is valid. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-1</parametername>
</parameternamelist>
<parameterdescription>
<para>The key is invalid.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
In case of an invalid key set a diag and return -1. <simplesect kind="see"><para>&lt;box_error_last&gt;(). </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/module.h" line="1878" column="1" declfile="src/module.h" declline="1878" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="module_8h_1a237492509ee5f9e478b72077c4c65833" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int box_key_def_validate_full_key</definition>
        <argsstring>(const box_key_def_t *key_def, const char *key, uint32_t *key_size_ptr)</argsstring>
        <name>box_key_def_validate_full_key</name>
        <param>
          <type>const <ref refid="module_8h_1acfbe4043908ad1b4a106689ad2da8814" kindref="member">box_key_def_t</ref> *</type>
          <declname>key_def</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>key</declname>
        </param>
        <param>
          <type>uint32_t *</type>
          <declname>key_size_ptr</declname>
        </param>
        <briefdescription>
<para>Check a full key against given key definition. </para>
        </briefdescription>
        <detaileddescription>
<para>Verifies key parts against given key_def&apos;s field types with respect to nullability.</para>
<para>Imposes the same parts count in <emphasis>key</emphasis> as in <emphasis>key_def</emphasis>. Absence of trailing key parts fails the check.</para>
<para>Note: nil is accepted for nullable fields, but only for them.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>key_def</parametername>
</parameternamelist>
<parameterdescription>
<para>Key definition. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>key</parametername>
</parameternamelist>
<parameterdescription>
<para>MessagePack&apos;ed data for matching. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>key_size_ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>Here will be size of the validated key.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>The key is valid. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-1</parametername>
</parameternamelist>
<parameterdescription>
<para>The key is invalid.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
In case of an invalid key set a diag and return -1. <simplesect kind="see"><para>&lt;box_error_last&gt;(). </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/module.h" line="1903" column="1" declfile="src/module.h" declline="1903" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="module_8h_1a1515eaa49be2b9990eab5fff279600be" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="module_8h_1ab230ff08fb24d580407126fc905cc271" kindref="member">box_tuple_format_t</ref> *</type>
        <definition>box_tuple_format_t* box_tuple_format_new</definition>
        <argsstring>(struct key_def **keys, uint16_t key_count)</argsstring>
        <name>box_tuple_format_new</name>
        <param>
          <type>struct key_def **</type>
          <declname>keys</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>key_count</declname>
        </param>
        <briefdescription>
<para>public </para>
        </briefdescription>
        <detaileddescription>
<para>Return new in-memory tuple format based on passed key definitions.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>keys</parametername>
</parameternamelist>
<parameterdescription>
<para>array of keys defined for the format \key_count count of keys </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>new</parametername>
</parameternamelist>
<parameterdescription>
<para>tuple format if success </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NULL</parametername>
</parameternamelist>
<parameterdescription>
<para>for error </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/module.h" line="1956" column="1" declfile="src/module.h" declline="1956" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="module_8h_1acc998b676589a854eaf71e2e1fd4debc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void box_tuple_format_ref</definition>
        <argsstring>(box_tuple_format_t *format)</argsstring>
        <name>box_tuple_format_ref</name>
        <param>
          <type><ref refid="module_8h_1ab230ff08fb24d580407126fc905cc271" kindref="member">box_tuple_format_t</ref> *</type>
          <declname>format</declname>
        </param>
        <briefdescription>
<para>Increment tuple format ref count. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>tuple_format</parametername>
</parameternamelist>
<parameterdescription>
<para>the tuple format to ref </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/module.h" line="1964" column="1" declfile="src/module.h" declline="1964" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="module_8h_1a134eab27cb960c030d553d3881d8d074" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void box_tuple_format_unref</definition>
        <argsstring>(box_tuple_format_t *format)</argsstring>
        <name>box_tuple_format_unref</name>
        <param>
          <type><ref refid="module_8h_1ab230ff08fb24d580407126fc905cc271" kindref="member">box_tuple_format_t</ref> *</type>
          <declname>format</declname>
        </param>
        <briefdescription>
<para>Decrement tuple format ref count. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>tuple_format</parametername>
</parameternamelist>
<parameterdescription>
<para>the tuple format to unref </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/module.h" line="1972" column="1" declfile="src/module.h" declline="1972" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="module_8h_1a7fb00cd4eac4d388d58e9e5ef1ea1b3f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int box_return_tuple</definition>
        <argsstring>(box_function_ctx_t *ctx, box_tuple_t *tuple)</argsstring>
        <name>box_return_tuple</name>
        <param>
          <type><ref refid="module_8h_1aa37ca06842be0fe827d5272493e2311f" kindref="member">box_function_ctx_t</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type><ref refid="module_8h_1a880c3e1e8e63b9a12353853fb6aefa3f" kindref="member">box_tuple_t</ref> *</type>
          <declname>tuple</declname>
        </param>
        <briefdescription>
<para>Return a tuple from stored C procedure. </para>
        </briefdescription>
        <detaileddescription>
<para>Returned tuple is automatically reference counted by Tarantool.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>an opaque structure passed to the stored C procedure by Tarantool </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tuple</parametername>
</parameternamelist>
<parameterdescription>
<para>a tuple to return </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>-1</parametername>
</parameternamelist>
<parameterdescription>
<para>on error (perhaps, out of memory; check <ref refid="module_8h_1af8f82c313ba49fc97782663ffba71f58" kindref="member">box_error_last()</ref>) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>otherwise </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/module.h" line="2053" column="1" declfile="src/module.h" declline="2053" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="module_8h_1a96bf7ae13f994a18d2f9dcf7816578ca" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int box_return_mp</definition>
        <argsstring>(box_function_ctx_t *ctx, const char *mp, const char *mp_end)</argsstring>
        <name>box_return_mp</name>
        <param>
          <type><ref refid="module_8h_1aa37ca06842be0fe827d5272493e2311f" kindref="member">box_function_ctx_t</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>mp</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>mp_end</declname>
        </param>
        <briefdescription>
<para>Return MessagePack from a stored C procedure. </para>
        </briefdescription>
        <detaileddescription>
<para>The MessagePack is copied, so it is safe to free/reuse the passed arguments after the call. MessagePack is not validated, for the sake of speed. It is expected to be a single encoded object. An attempt to encode and return multiple objects without wrapping them into an MP_ARRAY or MP_MAP is undefined behaviour.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>An opaque structure passed to the stored C procedure by Tarantool. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mp</parametername>
</parameternamelist>
<parameterdescription>
<para>Begin of MessagePack. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mp_end</parametername>
</parameternamelist>
<parameterdescription>
<para>End of MessagePack. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>-1</parametername>
</parameternamelist>
<parameterdescription>
<para>Error. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>Success. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/module.h" line="2072" column="1" declfile="src/module.h" declline="2072" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="module_8h_1a4a816d0fc386d810b874b50db1f50293" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t box_space_id_by_name</definition>
        <argsstring>(const char *name, uint32_t len)</argsstring>
        <name>box_space_id_by_name</name>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>len</declname>
        </param>
        <briefdescription>
<para>Find space id by name. </para>
        </briefdescription>
        <detaileddescription>
<para>This function performs SELECT request to _vspace system space. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>space name </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>len</parametername>
</parameternamelist>
<parameterdescription>
<para>length of <emphasis>name</emphasis> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>BOX_ID_NIL</parametername>
</parameternamelist>
<parameterdescription>
<para>on error or if not found (check <ref refid="module_8h_1af8f82c313ba49fc97782663ffba71f58" kindref="member">box_error_last()</ref>) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>space_id</parametername>
</parameternamelist>
<parameterdescription>
<para>otherwise </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="module_8h_1a4abb8381625fb1364af63d58a0235b3a" kindref="member">box_index_id_by_name</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/module.h" line="2085" column="1" declfile="src/module.h" declline="2085" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="module_8h_1a4abb8381625fb1364af63d58a0235b3a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t box_index_id_by_name</definition>
        <argsstring>(uint32_t space_id, const char *name, uint32_t len)</argsstring>
        <name>box_index_id_by_name</name>
        <param>
          <type>uint32_t</type>
          <declname>space_id</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>len</declname>
        </param>
        <briefdescription>
<para>Find index id by name. </para>
        </briefdescription>
        <detaileddescription>
<para>This function performs SELECT request to _vindex system space. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>space_id</parametername>
</parameternamelist>
<parameterdescription>
<para>space identifier </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>index name </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>len</parametername>
</parameternamelist>
<parameterdescription>
<para>length of <emphasis>name</emphasis> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>BOX_ID_NIL</parametername>
</parameternamelist>
<parameterdescription>
<para>on error or if not found (check <ref refid="module_8h_1af8f82c313ba49fc97782663ffba71f58" kindref="member">box_error_last()</ref>) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>index_id</parametername>
</parameternamelist>
<parameterdescription>
<para>otherwise </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="module_8h_1a4a816d0fc386d810b874b50db1f50293" kindref="member">box_space_id_by_name</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/module.h" line="2099" column="1" declfile="src/module.h" declline="2099" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="module_8h_1a08571f03c05abf96fd6e98a590d78822" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int box_insert</definition>
        <argsstring>(uint32_t space_id, const char *tuple, const char *tuple_end, box_tuple_t **result)</argsstring>
        <name>box_insert</name>
        <param>
          <type>uint32_t</type>
          <declname>space_id</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>tuple</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>tuple_end</declname>
        </param>
        <param>
          <type><ref refid="module_8h_1a880c3e1e8e63b9a12353853fb6aefa3f" kindref="member">box_tuple_t</ref> **</type>
          <declname>result</declname>
        </param>
        <briefdescription>
<para>Execute an INSERT request. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>space_id</parametername>
</parameternamelist>
<parameterdescription>
<para>space identifier </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tuple</parametername>
</parameternamelist>
<parameterdescription>
<para>encoded tuple in MsgPack Array format ([ field1, field2, ...]) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tuple_end</parametername>
</parameternamelist>
<parameterdescription>
<para>end of <emphasis>tuple</emphasis> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">result</parametername>
</parameternamelist>
<parameterdescription>
<para>a new tuple. Can be set to NULL to discard result. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>-1</parametername>
</parameternamelist>
<parameterdescription>
<para>on error (check <ref refid="module_8h_1af8f82c313ba49fc97782663ffba71f58" kindref="member">box_error_last()</ref>) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>on success </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><programlisting><codeline><highlight class="normal">box.space[space_id]:insert(tuple)<sp/></highlight></codeline>
</programlisting> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/module.h" line="2113" column="1" declfile="src/module.h" declline="2113" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="module_8h_1a933b6e9cbf9d4fc05e3964b0949b5bd0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int box_replace</definition>
        <argsstring>(uint32_t space_id, const char *tuple, const char *tuple_end, box_tuple_t **result)</argsstring>
        <name>box_replace</name>
        <param>
          <type>uint32_t</type>
          <declname>space_id</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>tuple</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>tuple_end</declname>
        </param>
        <param>
          <type><ref refid="module_8h_1a880c3e1e8e63b9a12353853fb6aefa3f" kindref="member">box_tuple_t</ref> **</type>
          <declname>result</declname>
        </param>
        <briefdescription>
<para>Execute an REPLACE request. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>space_id</parametername>
</parameternamelist>
<parameterdescription>
<para>space identifier </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tuple</parametername>
</parameternamelist>
<parameterdescription>
<para>encoded tuple in MsgPack Array format ([ field1, field2, ...]) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tuple_end</parametername>
</parameternamelist>
<parameterdescription>
<para>end of <emphasis>tuple</emphasis> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">result</parametername>
</parameternamelist>
<parameterdescription>
<para>a new tuple. Can be set to NULL to discard result. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>-1</parametername>
</parameternamelist>
<parameterdescription>
<para>on error (check <ref refid="module_8h_1af8f82c313ba49fc97782663ffba71f58" kindref="member">box_error_last()</ref>) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>on success </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><programlisting><codeline><highlight class="normal">box.space[space_id]:replace(tuple)<sp/></highlight></codeline>
</programlisting> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/module.h" line="2128" column="1" declfile="src/module.h" declline="2128" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="module_8h_1a740bf8f0f5f912dfa78221c9fe5f21bb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int box_delete</definition>
        <argsstring>(uint32_t space_id, uint32_t index_id, const char *key, const char *key_end, box_tuple_t **result)</argsstring>
        <name>box_delete</name>
        <param>
          <type>uint32_t</type>
          <declname>space_id</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>index_id</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>key</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>key_end</declname>
        </param>
        <param>
          <type><ref refid="module_8h_1a880c3e1e8e63b9a12353853fb6aefa3f" kindref="member">box_tuple_t</ref> **</type>
          <declname>result</declname>
        </param>
        <briefdescription>
<para>Execute an DELETE request. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>space_id</parametername>
</parameternamelist>
<parameterdescription>
<para>space identifier </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>index_id</parametername>
</parameternamelist>
<parameterdescription>
<para>index identifier </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>key</parametername>
</parameternamelist>
<parameterdescription>
<para>encoded key in MsgPack Array format ([part1, part2, ...]). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>key_end</parametername>
</parameternamelist>
<parameterdescription>
<para>the end of encoded <emphasis>key</emphasis>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">result</parametername>
</parameternamelist>
<parameterdescription>
<para>an old tuple. Can be set to NULL to discard result. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>-1</parametername>
</parameternamelist>
<parameterdescription>
<para>on error (check <ref refid="module_8h_1af8f82c313ba49fc97782663ffba71f58" kindref="member">box_error_last()</ref>) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>on success </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><programlisting><codeline><highlight class="normal">box.space[space_id].index[index_id]:delete(key)<sp/></highlight></codeline>
</programlisting> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/module.h" line="2144" column="1" declfile="src/module.h" declline="2144" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="module_8h_1a9badf4d5cc54e424a157439fcb58b96a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int box_update</definition>
        <argsstring>(uint32_t space_id, uint32_t index_id, const char *key, const char *key_end, const char *ops, const char *ops_end, int index_base, box_tuple_t **result)</argsstring>
        <name>box_update</name>
        <param>
          <type>uint32_t</type>
          <declname>space_id</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>index_id</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>key</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>key_end</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>ops</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>ops_end</declname>
        </param>
        <param>
          <type>int</type>
          <declname>index_base</declname>
        </param>
        <param>
          <type><ref refid="module_8h_1a880c3e1e8e63b9a12353853fb6aefa3f" kindref="member">box_tuple_t</ref> **</type>
          <declname>result</declname>
        </param>
        <briefdescription>
<para>Execute an UPDATE request. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>space_id</parametername>
</parameternamelist>
<parameterdescription>
<para>space identifier </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>index_id</parametername>
</parameternamelist>
<parameterdescription>
<para>index identifier </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>key</parametername>
</parameternamelist>
<parameterdescription>
<para>encoded key in MsgPack Array format ([part1, part2, ...]). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>key_end</parametername>
</parameternamelist>
<parameterdescription>
<para>the end of encoded <emphasis>key</emphasis>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ops</parametername>
</parameternamelist>
<parameterdescription>
<para>encoded operations in MsgPack Array format, e.g. [ [ &apos;=&apos;, fieldno, value ], [&apos;!&apos;, 2, &apos;xxx&apos;] ] </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ops_end</parametername>
</parameternamelist>
<parameterdescription>
<para>the end of encoded <emphasis>ops</emphasis> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>index_base</parametername>
</parameternamelist>
<parameterdescription>
<para>0 if fieldnos in update operations are zero-based indexed (like C) or 1 if for one-based indexed field ids (like Lua). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">result</parametername>
</parameternamelist>
<parameterdescription>
<para>a new tuple. Can be set to NULL to discard result. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>-1</parametername>
</parameternamelist>
<parameterdescription>
<para>on error (check <ref refid="module_8h_1af8f82c313ba49fc97782663ffba71f58" kindref="member">box_error_last()</ref>) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>on success </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><programlisting><codeline><highlight class="normal">box.space[space_id].index[index_id]:update(key,<sp/>ops)<sp/></highlight></codeline>
</programlisting> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="module_8h_1a268a03389cd856206f0ddfc90f3cbf84" kindref="member">box_upsert()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/module.h" line="2166" column="1" declfile="src/module.h" declline="2166" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="module_8h_1a268a03389cd856206f0ddfc90f3cbf84" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int box_upsert</definition>
        <argsstring>(uint32_t space_id, uint32_t index_id, const char *tuple, const char *tuple_end, const char *ops, const char *ops_end, int index_base, box_tuple_t **result)</argsstring>
        <name>box_upsert</name>
        <param>
          <type>uint32_t</type>
          <declname>space_id</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>index_id</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>tuple</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>tuple_end</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>ops</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>ops_end</declname>
        </param>
        <param>
          <type>int</type>
          <declname>index_base</declname>
        </param>
        <param>
          <type><ref refid="module_8h_1a880c3e1e8e63b9a12353853fb6aefa3f" kindref="member">box_tuple_t</ref> **</type>
          <declname>result</declname>
        </param>
        <briefdescription>
<para>Execute an UPSERT request. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>space_id</parametername>
</parameternamelist>
<parameterdescription>
<para>space identifier </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>index_id</parametername>
</parameternamelist>
<parameterdescription>
<para>index identifier </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ops</parametername>
</parameternamelist>
<parameterdescription>
<para>encoded operations in MsgPack Array format, e.g. [ [ &apos;=&apos;, fieldno, value ], [&apos;!&apos;, 2, &apos;xxx&apos;] ] </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ops_end</parametername>
</parameternamelist>
<parameterdescription>
<para>the end of encoded <emphasis>ops</emphasis> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tuple</parametername>
</parameternamelist>
<parameterdescription>
<para>encoded tuple in MsgPack Array format ([ field1, field2, ...]) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tuple_end</parametername>
</parameternamelist>
<parameterdescription>
<para>end of <emphasis>tuple</emphasis> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>index_base</parametername>
</parameternamelist>
<parameterdescription>
<para>0 if fieldnos in update operations are zero-based indexed (like C) or 1 if for one-based indexed field ids (like Lua). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">result</parametername>
</parameternamelist>
<parameterdescription>
<para>a new tuple. Can be set to NULL to discard result. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>-1</parametername>
</parameternamelist>
<parameterdescription>
<para>on error (check <ref refid="module_8h_1af8f82c313ba49fc97782663ffba71f58" kindref="member">box_error_last()</ref>) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>on success </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><programlisting><codeline><highlight class="normal">box.space[space_id].index[index_id]:update(key,<sp/>ops)<sp/></highlight></codeline>
</programlisting> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="module_8h_1a9badf4d5cc54e424a157439fcb58b96a" kindref="member">box_update()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/module.h" line="2189" column="1" declfile="src/module.h" declline="2189" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="module_8h_1a20de21b171ded688588f1063ac04a9d3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int box_truncate</definition>
        <argsstring>(uint32_t space_id)</argsstring>
        <name>box_truncate</name>
        <param>
          <type>uint32_t</type>
          <declname>space_id</declname>
        </param>
        <briefdescription>
<para>Truncate space. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>space_id</parametername>
</parameternamelist>
<parameterdescription>
<para>space identifier </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/module.h" line="2199" column="1" declfile="src/module.h" declline="2199" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="module_8h_1a3e5fd9116818749f73bf868d4e780256" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int box_sequence_next</definition>
        <argsstring>(uint32_t seq_id, int64_t *result)</argsstring>
        <name>box_sequence_next</name>
        <param>
          <type>uint32_t</type>
          <declname>seq_id</declname>
        </param>
        <param>
          <type>int64_t *</type>
          <declname>result</declname>
        </param>
        <briefdescription>
<para>Advance a sequence. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>seq_id</parametername>
</parameternamelist>
<parameterdescription>
<para>sequence identifier </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">result</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to a variable where the next sequence value will be stored on success </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>-1</parametername>
</parameternamelist>
<parameterdescription>
<para>on error (check <ref refid="module_8h_1af8f82c313ba49fc97782663ffba71f58" kindref="member">box_error_last()</ref>) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>on success </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/module.h" line="2211" column="1" declfile="src/module.h" declline="2211" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="module_8h_1a66ac5f1357a07acaae764e5d2e2e55fa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int box_sequence_current</definition>
        <argsstring>(uint32_t seq_id, int64_t *result)</argsstring>
        <name>box_sequence_current</name>
        <param>
          <type>uint32_t</type>
          <declname>seq_id</declname>
        </param>
        <param>
          <type>int64_t *</type>
          <declname>result</declname>
        </param>
        <briefdescription>
<para>Get the last value returned by a sequence. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>seq_id</parametername>
</parameternamelist>
<parameterdescription>
<para>sequence identifier </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">result</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to a variable where the current sequence value will be stored on success </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>-1</parametername>
</parameternamelist>
<parameterdescription>
<para>on error (check <ref refid="module_8h_1af8f82c313ba49fc97782663ffba71f58" kindref="member">box_error_last()</ref>) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>on success </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/module.h" line="2223" column="1" declfile="src/module.h" declline="2223" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="module_8h_1ac2243f60e2773d3522a540103f645110" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int box_sequence_set</definition>
        <argsstring>(uint32_t seq_id, int64_t value)</argsstring>
        <name>box_sequence_set</name>
        <param>
          <type>uint32_t</type>
          <declname>seq_id</declname>
        </param>
        <param>
          <type>int64_t</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Set a sequence value. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>seq_id</parametername>
</parameternamelist>
<parameterdescription>
<para>sequence identifier </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>new sequence value; on success the next call to <ref refid="module_8h_1a3e5fd9116818749f73bf868d4e780256" kindref="member">box_sequence_next()</ref> will return the value following <emphasis>value</emphasis> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>-1</parametername>
</parameternamelist>
<parameterdescription>
<para>on error (check <ref refid="module_8h_1af8f82c313ba49fc97782663ffba71f58" kindref="member">box_error_last()</ref>) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>on success </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/module.h" line="2235" column="1" declfile="src/module.h" declline="2235" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="module_8h_1a8f9c3210df64b1f6fd89eb2c5e088e94" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int box_sequence_reset</definition>
        <argsstring>(uint32_t seq_id)</argsstring>
        <name>box_sequence_reset</name>
        <param>
          <type>uint32_t</type>
          <declname>seq_id</declname>
        </param>
        <briefdescription>
<para>Reset a sequence. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>seq_id</parametername>
</parameternamelist>
<parameterdescription>
<para>sequence identifier </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>-1</parametername>
</parameternamelist>
<parameterdescription>
<para>on error (check <ref refid="module_8h_1af8f82c313ba49fc97782663ffba71f58" kindref="member">box_error_last()</ref>) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>on success </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/module.h" line="2245" column="1" declfile="src/module.h" declline="2245" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="module_8h_1a0e9c91d463ce4aca081e5bd376aac1d9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int box_session_push</definition>
        <argsstring>(const char *data, const char *data_end)</argsstring>
        <name>box_session_push</name>
        <param>
          <type>const char *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>data_end</declname>
        </param>
        <briefdescription>
<para>Push MessagePack data into a session data channel - socket, console or whatever is behind the session. </para>
        </briefdescription>
        <detaileddescription>
<para>Note, that successful push does not guarantee delivery in case it was sent into the network. Just like with write()/send() system calls.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>begin of MessagePack to push </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data_end</parametername>
</parameternamelist>
<parameterdescription>
<para>end of MessagePack to push </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>-1</parametername>
</parameternamelist>
<parameterdescription>
<para>on error (check <ref refid="module_8h_1af8f82c313ba49fc97782663ffba71f58" kindref="member">box_error_last()</ref>) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>on success </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/module.h" line="2259" column="1" declfile="src/module.h" declline="2259" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="module_8h_1aab8b69829c8d89799a9fb0e5d360e84b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="module_8h_1a2b04d0397e455b7ed42b530c1c1ea9e6" kindref="member">box_iterator_t</ref> *</type>
        <definition>box_iterator_t* box_index_iterator</definition>
        <argsstring>(uint32_t space_id, uint32_t index_id, int type, const char *key, const char *key_end)</argsstring>
        <name>box_index_iterator</name>
        <param>
          <type>uint32_t</type>
          <declname>space_id</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>index_id</declname>
        </param>
        <param>
          <type>int</type>
          <declname>type</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>key</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>key_end</declname>
        </param>
        <briefdescription>
<para>Allocate and initialize iterator for space_id, index_id. </para>
        </briefdescription>
        <detaileddescription>
<para>A returned iterator must be destroyed by <ref refid="module_8h_1a6f7fe762b15009de313fdf915378429c" kindref="member">box_iterator_free()</ref>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>space_id</parametername>
</parameternamelist>
<parameterdescription>
<para>space identifier. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>index_id</parametername>
</parameternamelist>
<parameterdescription>
<para>index identifier. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>type</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="module_8h_1a2693ce4bd8fa71e8ac1e5272fc64d17e" kindref="member">iterator type </ref> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>key</parametername>
</parameternamelist>
<parameterdescription>
<para>encoded key in MsgPack Array format ([part1, part2, ...]). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>key_end</parametername>
</parameternamelist>
<parameterdescription>
<para>the end of encoded <emphasis>key</emphasis> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>NULL</parametername>
</parameternamelist>
<parameterdescription>
<para>on error (check <ref refid="module_8h_1af8f82c313ba49fc97782663ffba71f58" kindref="member">box_error_last()</ref>) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>iterator</parametername>
</parameternamelist>
<parameterdescription>
<para>otherwise </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="module_8h_1ae4361728e6abe6243e7f02b098e7b347" kindref="member">box_iterator_next()</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="module_8h_1a6f7fe762b15009de313fdf915378429c" kindref="member">box_iterator_free()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/module.h" line="2282" column="1" declfile="src/module.h" declline="2282" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="module_8h_1ae4361728e6abe6243e7f02b098e7b347" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int box_iterator_next</definition>
        <argsstring>(box_iterator_t *iterator, box_tuple_t **result)</argsstring>
        <name>box_iterator_next</name>
        <param>
          <type><ref refid="module_8h_1a2b04d0397e455b7ed42b530c1c1ea9e6" kindref="member">box_iterator_t</ref> *</type>
          <declname>iterator</declname>
        </param>
        <param>
          <type><ref refid="module_8h_1a880c3e1e8e63b9a12353853fb6aefa3f" kindref="member">box_tuple_t</ref> **</type>
          <declname>result</declname>
        </param>
        <briefdescription>
<para>Retrieve the next item from the <emphasis>iterator</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>iterator</parametername>
</parameternamelist>
<parameterdescription>
<para>an iterator returned by <ref refid="module_8h_1aab8b69829c8d89799a9fb0e5d360e84b" kindref="member">box_index_iterator()</ref>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">result</parametername>
</parameternamelist>
<parameterdescription>
<para>a tuple or NULL if there is no more data. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>-1</parametername>
</parameternamelist>
<parameterdescription>
<para>on error (check <ref refid="module_8h_1af8f82c313ba49fc97782663ffba71f58" kindref="member">box_error_last()</ref> for details) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>on success. The end of data is not an error. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/module.h" line="2293" column="1" declfile="src/module.h" declline="2293" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="module_8h_1a6f7fe762b15009de313fdf915378429c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void box_iterator_free</definition>
        <argsstring>(box_iterator_t *iterator)</argsstring>
        <name>box_iterator_free</name>
        <param>
          <type><ref refid="module_8h_1a2b04d0397e455b7ed42b530c1c1ea9e6" kindref="member">box_iterator_t</ref> *</type>
          <declname>iterator</declname>
        </param>
        <briefdescription>
<para>Destroy and deallocate iterator. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>iterator</parametername>
</parameternamelist>
<parameterdescription>
<para>an iterator returned by <ref refid="module_8h_1aab8b69829c8d89799a9fb0e5d360e84b" kindref="member">box_index_iterator()</ref> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/module.h" line="2301" column="1" declfile="src/module.h" declline="2301" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="module_8h_1a698d8991fa015a4b490f078b29e8d929" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ssize_t</type>
        <definition>ssize_t box_index_len</definition>
        <argsstring>(uint32_t space_id, uint32_t index_id)</argsstring>
        <name>box_index_len</name>
        <param>
          <type>uint32_t</type>
          <declname>space_id</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>index_id</declname>
        </param>
        <briefdescription>
<para>Return the number of element in the index. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>space_id</parametername>
</parameternamelist>
<parameterdescription>
<para>space identifier </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>index_id</parametername>
</parameternamelist>
<parameterdescription>
<para>index identifier </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>-1</parametername>
</parameternamelist>
<parameterdescription>
<para>on error (check <ref refid="module_8h_1af8f82c313ba49fc97782663ffba71f58" kindref="member">box_error_last()</ref>) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>&gt;=</parametername>
</parameternamelist>
<parameterdescription>
<para>0 otherwise </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/module.h" line="2312" column="1" declfile="src/module.h" declline="2312" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="module_8h_1aaeda3d99d32c382bc5ac2bc8f0a09f48" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ssize_t</type>
        <definition>ssize_t box_index_bsize</definition>
        <argsstring>(uint32_t space_id, uint32_t index_id)</argsstring>
        <name>box_index_bsize</name>
        <param>
          <type>uint32_t</type>
          <declname>space_id</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>index_id</declname>
        </param>
        <briefdescription>
<para>Return the number of bytes used in memory by the index. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>space_id</parametername>
</parameternamelist>
<parameterdescription>
<para>space identifier </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>index_id</parametername>
</parameternamelist>
<parameterdescription>
<para>index identifier </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>-1</parametername>
</parameternamelist>
<parameterdescription>
<para>on error (check <ref refid="module_8h_1af8f82c313ba49fc97782663ffba71f58" kindref="member">box_error_last()</ref>) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>&gt;=</parametername>
</parameternamelist>
<parameterdescription>
<para>0 otherwise </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/module.h" line="2323" column="1" declfile="src/module.h" declline="2323" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="module_8h_1aa56e2bf2a5720259ea3997149ae53ca9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int box_index_random</definition>
        <argsstring>(uint32_t space_id, uint32_t index_id, uint32_t rnd, box_tuple_t **result)</argsstring>
        <name>box_index_random</name>
        <param>
          <type>uint32_t</type>
          <declname>space_id</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>index_id</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>rnd</declname>
        </param>
        <param>
          <type><ref refid="module_8h_1a880c3e1e8e63b9a12353853fb6aefa3f" kindref="member">box_tuple_t</ref> **</type>
          <declname>result</declname>
        </param>
        <briefdescription>
<para>Return a random tuple from the index (useful for statistical analysis). </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>space_id</parametername>
</parameternamelist>
<parameterdescription>
<para>space identifier </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>index_id</parametername>
</parameternamelist>
<parameterdescription>
<para>index identifier </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rnd</parametername>
</parameternamelist>
<parameterdescription>
<para>random seed </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">result</parametername>
</parameternamelist>
<parameterdescription>
<para>a tuple or NULL if index is empty </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>-1</parametername>
</parameternamelist>
<parameterdescription>
<para>on error (check <ref refid="module_8h_1af8f82c313ba49fc97782663ffba71f58" kindref="member">box_error_last()</ref>) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>on success </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><programlisting><codeline><highlight class="normal">box.space[space_id].index[index_id]:random(rnd)<sp/></highlight></codeline>
</programlisting> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/module.h" line="2337" column="1" declfile="src/module.h" declline="2337" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="module_8h_1a5c9cedd4198d62ddfe6c77ef2bf89f56" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int box_index_get</definition>
        <argsstring>(uint32_t space_id, uint32_t index_id, const char *key, const char *key_end, box_tuple_t **result)</argsstring>
        <name>box_index_get</name>
        <param>
          <type>uint32_t</type>
          <declname>space_id</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>index_id</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>key</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>key_end</declname>
        </param>
        <param>
          <type><ref refid="module_8h_1a880c3e1e8e63b9a12353853fb6aefa3f" kindref="member">box_tuple_t</ref> **</type>
          <declname>result</declname>
        </param>
        <briefdescription>
<para>Get a tuple from index by the key. </para>
        </briefdescription>
        <detaileddescription>
<para>Please note that this function works much more faster than box_select() or <ref refid="module_8h_1aab8b69829c8d89799a9fb0e5d360e84b" kindref="member">box_index_iterator()</ref> + <ref refid="module_8h_1ae4361728e6abe6243e7f02b098e7b347" kindref="member">box_iterator_next()</ref>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>space_id</parametername>
</parameternamelist>
<parameterdescription>
<para>space identifier </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>index_id</parametername>
</parameternamelist>
<parameterdescription>
<para>index identifier </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>key</parametername>
</parameternamelist>
<parameterdescription>
<para>encoded key in MsgPack Array format ([part1, part2, ...]). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>key_end</parametername>
</parameternamelist>
<parameterdescription>
<para>the end of encoded <emphasis>key</emphasis> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">result</parametername>
</parameternamelist>
<parameterdescription>
<para>a tuple or NULL if index is empty </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>-1</parametername>
</parameternamelist>
<parameterdescription>
<para>on error (check <ref refid="module_8h_1af8f82c313ba49fc97782663ffba71f58" kindref="member">box_error_last()</ref>) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>on success </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="pre"><para>key != NULL </para>
</simplesect>
<simplesect kind="see"><para><programlisting><codeline><highlight class="normal">box.space[space_id].index[index_id]:get(key)<sp/></highlight></codeline>
</programlisting> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/module.h" line="2357" column="1" declfile="src/module.h" declline="2357" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="module_8h_1a4fbd278987613571a9d6475de6103a4f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int box_index_min</definition>
        <argsstring>(uint32_t space_id, uint32_t index_id, const char *key, const char *key_end, box_tuple_t **result)</argsstring>
        <name>box_index_min</name>
        <param>
          <type>uint32_t</type>
          <declname>space_id</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>index_id</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>key</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>key_end</declname>
        </param>
        <param>
          <type><ref refid="module_8h_1a880c3e1e8e63b9a12353853fb6aefa3f" kindref="member">box_tuple_t</ref> **</type>
          <declname>result</declname>
        </param>
        <briefdescription>
<para>Return a first (minimal) tuple matched the provided key. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>space_id</parametername>
</parameternamelist>
<parameterdescription>
<para>space identifier </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>index_id</parametername>
</parameternamelist>
<parameterdescription>
<para>index identifier </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>key</parametername>
</parameternamelist>
<parameterdescription>
<para>encoded key in MsgPack Array format ([part1, part2, ...]). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>key_end</parametername>
</parameternamelist>
<parameterdescription>
<para>the end of encoded <emphasis>key</emphasis>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">result</parametername>
</parameternamelist>
<parameterdescription>
<para>a tuple or NULL if index is empty </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>-1</parametername>
</parameternamelist>
<parameterdescription>
<para>on error (check <ref refid="module_8h_1af8f82c313ba49fc97782663ffba71f58" kindref="member">box_error_last()</ref>) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>on success </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><programlisting><codeline><highlight class="normal">box.space[space_id].index[index_id]:min(key)<sp/></highlight></codeline>
</programlisting> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/module.h" line="2373" column="1" declfile="src/module.h" declline="2373" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="module_8h_1a044e5f79addcfd9c7312fe66e7be7514" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int box_index_max</definition>
        <argsstring>(uint32_t space_id, uint32_t index_id, const char *key, const char *key_end, box_tuple_t **result)</argsstring>
        <name>box_index_max</name>
        <param>
          <type>uint32_t</type>
          <declname>space_id</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>index_id</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>key</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>key_end</declname>
        </param>
        <param>
          <type><ref refid="module_8h_1a880c3e1e8e63b9a12353853fb6aefa3f" kindref="member">box_tuple_t</ref> **</type>
          <declname>result</declname>
        </param>
        <briefdescription>
<para>Return a last (maximal) tuple matched the provided key. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>space_id</parametername>
</parameternamelist>
<parameterdescription>
<para>space identifier </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>index_id</parametername>
</parameternamelist>
<parameterdescription>
<para>index identifier </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>key</parametername>
</parameternamelist>
<parameterdescription>
<para>encoded key in MsgPack Array format ([part1, part2, ...]). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>key_end</parametername>
</parameternamelist>
<parameterdescription>
<para>the end of encoded <emphasis>key</emphasis>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">result</parametername>
</parameternamelist>
<parameterdescription>
<para>a tuple or NULL if index is empty </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>-1</parametername>
</parameternamelist>
<parameterdescription>
<para>on error (check <ref refid="module_8h_1af8f82c313ba49fc97782663ffba71f58" kindref="member">box_error_last()</ref>) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>on success </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><programlisting><codeline><highlight class="normal">box.space[space_id].index[index_id]:max(key)<sp/></highlight></codeline>
</programlisting> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/module.h" line="2389" column="1" declfile="src/module.h" declline="2389" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="module_8h_1a3f06a7df9e461267455477bd84ce02ed" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ssize_t</type>
        <definition>ssize_t box_index_count</definition>
        <argsstring>(uint32_t space_id, uint32_t index_id, int type, const char *key, const char *key_end)</argsstring>
        <name>box_index_count</name>
        <param>
          <type>uint32_t</type>
          <declname>space_id</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>index_id</declname>
        </param>
        <param>
          <type>int</type>
          <declname>type</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>key</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>key_end</declname>
        </param>
        <briefdescription>
<para>Count the number of tuple matched the provided key. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>space_id</parametername>
</parameternamelist>
<parameterdescription>
<para>space identifier </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>index_id</parametername>
</parameternamelist>
<parameterdescription>
<para>index identifier </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>type</parametername>
</parameternamelist>
<parameterdescription>
<para>iterator type - enum <ref refid="module_8h_1a2693ce4bd8fa71e8ac1e5272fc64d17e" kindref="member">iterator_type</ref> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>key</parametername>
</parameternamelist>
<parameterdescription>
<para>encoded key in MsgPack Array format ([part1, part2, ...]). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>key_end</parametername>
</parameternamelist>
<parameterdescription>
<para>the end of encoded <emphasis>key</emphasis>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>-1</parametername>
</parameternamelist>
<parameterdescription>
<para>on error (check <ref refid="module_8h_1af8f82c313ba49fc97782663ffba71f58" kindref="member">box_error_last()</ref>) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>&gt;=0</parametername>
</parameternamelist>
<parameterdescription>
<para>on success </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><programlisting><codeline><highlight class="normal">box.space[space_id].index[index_id]:count(key,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>{<sp/>iterator<sp/>=<sp/>type<sp/>})<sp/></highlight></codeline>
</programlisting> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/module.h" line="2406" column="1" declfile="src/module.h" declline="2406" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="module_8h_1a4b1314851b7b1ec2fab6908eaef71f52" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char* box_tuple_extract_key</definition>
        <argsstring>(box_tuple_t *tuple, uint32_t space_id, uint32_t index_id, uint32_t *key_size)</argsstring>
        <name>box_tuple_extract_key</name>
        <param>
          <type><ref refid="module_8h_1a880c3e1e8e63b9a12353853fb6aefa3f" kindref="member">box_tuple_t</ref> *</type>
          <declname>tuple</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>space_id</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>index_id</declname>
        </param>
        <param>
          <type>uint32_t *</type>
          <declname>key_size</declname>
        </param>
        <briefdescription>
<para>Extract key from tuple according to key definition of given index. </para>
        </briefdescription>
        <detaileddescription>
<para>Returned buffer is allocated on <ref refid="module_8h_1adf5cc88ba87d8e5afe81604385609191" kindref="member">box_txn_alloc()</ref> with this key. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>tuple</parametername>
</parameternamelist>
<parameterdescription>
<para>Tuple from which need to extract key. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>space_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Space identifier. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>index_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Index identifier. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>not</parametername>
</parameternamelist>
<parameterdescription>
<para>NULL Success </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NULL</parametername>
</parameternamelist>
<parameterdescription>
<para>Memory Allocation error </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/module.h" line="2420" column="1" declfile="src/module.h" declline="2420" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="module_8h_1a9b58e493b5515222c6bb9c0393d092ce" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char* box_error_type</definition>
        <argsstring>(const box_error_t *error)</argsstring>
        <name>box_error_type</name>
        <param>
          <type>const <ref refid="module_8h_1ad49d5e355555804f6b46b79513715be8" kindref="member">box_error_t</ref> *</type>
          <declname>error</declname>
        </param>
        <briefdescription>
<para>Return the error type, e.g. </para>
        </briefdescription>
        <detaileddescription>
<para>&quot;ClientError&quot;, &quot;SocketError&quot;, etc. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>error</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>not-null string </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/module.h" line="2478" column="1" declfile="src/module.h" declline="2478" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="module_8h_1a800a57f7e18f0b9c3880d4e516589e73" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t box_error_code</definition>
        <argsstring>(const box_error_t *error)</argsstring>
        <name>box_error_code</name>
        <param>
          <type>const <ref refid="module_8h_1ad49d5e355555804f6b46b79513715be8" kindref="member">box_error_t</ref> *</type>
          <declname>error</declname>
        </param>
        <briefdescription>
<para>Return IPROTO error code. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>error</parametername>
</parameternamelist>
<parameterdescription>
<para>error </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>enum box_error_code </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/module.h" line="2486" column="1" declfile="src/module.h" declline="2486" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="module_8h_1aff2a8679174320da6a54edc6df4681ae" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char* box_error_message</definition>
        <argsstring>(const box_error_t *error)</argsstring>
        <name>box_error_message</name>
        <param>
          <type>const <ref refid="module_8h_1ad49d5e355555804f6b46b79513715be8" kindref="member">box_error_t</ref> *</type>
          <declname>error</declname>
        </param>
        <briefdescription>
<para>Return the error message. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>error</parametername>
</parameternamelist>
<parameterdescription>
<para>error </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>not-null string </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/module.h" line="2494" column="1" declfile="src/module.h" declline="2494" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="module_8h_1af8f82c313ba49fc97782663ffba71f58" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="module_8h_1ad49d5e355555804f6b46b79513715be8" kindref="member">box_error_t</ref> *</type>
        <definition>box_error_t* box_error_last</definition>
        <argsstring>(void)</argsstring>
        <name>box_error_last</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Get the information about the last API call error. </para>
        </briefdescription>
        <detaileddescription>
<para>The Tarantool error handling works most like libc&apos;s errno. All API calls return -1 or NULL in the event of error. An internal pointer to box_error_t type is set by API functions to indicate what went wrong. This value is only significant if API call failed (returned -1 or NULL).</para>
<para>Successful function can also touch the last error in some cases. You don&apos;t have to clear the last error before calling API functions. The returned object is valid only until next call to <bold>any</bold> API function.</para>
<para>You must set the last error using <ref refid="module_8h_1aa6e6803bc4309c3f59b93e2709cb418b" kindref="member">box_error_set()</ref> in your stored C procedures if you want to return a custom error message. You can re-throw the last API error to IPROTO client by keeping the current value and returning -1 to Tarantool from your stored procedure.</para>
<para><simplesect kind="return"><para>last error. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/module.h" line="2518" column="1" declfile="src/module.h" declline="2518" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="module_8h_1a1c2143635d7ff4aeb2ced40ffa033527" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void box_error_clear</definition>
        <argsstring>(void)</argsstring>
        <name>box_error_clear</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Clear the last error. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/module.h" line="2524" column="1" declfile="src/module.h" declline="2524" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="module_8h_1aa6e6803bc4309c3f59b93e2709cb418b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int box_error_set</definition>
        <argsstring>(const char *file, unsigned line, uint32_t code, const char *format,...)</argsstring>
        <name>box_error_set</name>
        <param>
          <type>const char *</type>
          <declname>file</declname>
        </param>
        <param>
          <type>unsigned</type>
          <declname>line</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>code</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>format</declname>
        </param>
        <param>
          <type>...</type>
        </param>
        <briefdescription>
<para>Set the last error. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>code</parametername>
</parameternamelist>
<parameterdescription>
<para>IPROTO error code (enum <ref refid="module_8h_1a800a57f7e18f0b9c3880d4e516589e73" kindref="member">box_error_code</ref>) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>format</parametername>
</parameternamelist>
<parameterdescription>
<para>(const char * ) - printf()-like format string </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>...</parametername>
</parameternamelist>
<parameterdescription>
<para>- format arguments </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>-1 for convention use</para>
</simplesect>
<simplesect kind="see"><para>enum <ref refid="module_8h_1a029e9d16d637a97b37560ccf24c4adce" kindref="member">box_error_code</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/module.h" line="2537" column="1" declfile="src/module.h" declline="2537" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="module_8h_1a6f106407ff1e6560bd8cba9b4698040d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="module_8h_1a880c3e1e8e63b9a12353853fb6aefa3f" kindref="member">box_tuple_t</ref> *</type>
        <definition>box_tuple_t* luaT_checktuple</definition>
        <argsstring>(struct lua_State *L, int idx)</argsstring>
        <name>luaT_checktuple</name>
        <param>
          <type>struct lua_State *</type>
          <declname>L</declname>
        </param>
        <param>
          <type>int</type>
          <declname>idx</declname>
        </param>
        <briefdescription>
<para>public </para>
        </briefdescription>
        <detaileddescription>
<para>Checks whether the argument idx is a tuple and returns it.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>L</parametername>
</parameternamelist>
<parameterdescription>
<para>Lua State </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>idx</parametername>
</parameternamelist>
<parameterdescription>
<para>the stack index </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>non-NULL</parametername>
</parameternamelist>
<parameterdescription>
<para>argument is tuple </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>error</parametername>
</parameternamelist>
<parameterdescription>
<para>if the argument is not a tuple. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/module.h" line="2559" column="1" declfile="src/module.h" declline="2559" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="module_8h_1a0ddb8bf7e1f41149fe67352de0f276d4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void luaT_pushtuple</definition>
        <argsstring>(struct lua_State *L, box_tuple_t *tuple)</argsstring>
        <name>luaT_pushtuple</name>
        <param>
          <type>struct lua_State *</type>
          <declname>L</declname>
        </param>
        <param>
          <type><ref refid="module_8h_1a880c3e1e8e63b9a12353853fb6aefa3f" kindref="member">box_tuple_t</ref> *</type>
          <declname>tuple</declname>
        </param>
        <briefdescription>
<para>Push a tuple onto the stack. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>L</parametername>
</parameternamelist>
<parameterdescription>
<para>Lua State </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="module_8h_1ab1dce37206b2951e42b76a9ce704f9f2" kindref="member">luaT_istuple</ref> </para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>on</parametername>
</parameternamelist>
<parameterdescription>
<para>OOM </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/module.h" line="2568" column="1" declfile="src/module.h" declline="2568" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="module_8h_1ab1dce37206b2951e42b76a9ce704f9f2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="module_8h_1a880c3e1e8e63b9a12353853fb6aefa3f" kindref="member">box_tuple_t</ref> *</type>
        <definition>box_tuple_t* luaT_istuple</definition>
        <argsstring>(struct lua_State *L, int idx)</argsstring>
        <name>luaT_istuple</name>
        <param>
          <type>struct lua_State *</type>
          <declname>L</declname>
        </param>
        <param>
          <type>int</type>
          <declname>idx</declname>
        </param>
        <briefdescription>
<para>Checks whether argument idx is a tuple. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>L</parametername>
</parameternamelist>
<parameterdescription>
<para>Lua State </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>idx</parametername>
</parameternamelist>
<parameterdescription>
<para>the stack index </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>non-NULL</parametername>
</parameternamelist>
<parameterdescription>
<para>argument is tuple </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NULL</parametername>
</parameternamelist>
<parameterdescription>
<para>argument is not tuple </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/module.h" line="2579" column="1" declfile="src/module.h" declline="2579" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="module_8h_1ab57d953ad39d6f1e0704a6c536b7ab60" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char* luaT_tuple_encode</definition>
        <argsstring>(struct lua_State *L, int idx, size_t *tuple_len_ptr)</argsstring>
        <name>luaT_tuple_encode</name>
        <param>
          <type>struct lua_State *</type>
          <declname>L</declname>
        </param>
        <param>
          <type>int</type>
          <declname>idx</declname>
        </param>
        <param>
          <type>size_t *</type>
          <declname>tuple_len_ptr</declname>
        </param>
        <briefdescription>
<para>Encode a table or a tuple on the Lua stack as an MsgPack array. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>L</parametername>
</parameternamelist>
<parameterdescription>
<para>Lua state. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>idx</parametername>
</parameternamelist>
<parameterdescription>
<para>Acceptable index on the Lua stack. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tuple_len_ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>Where to store tuple data size in bytes (or NULL).</para>
</parameterdescription>
</parameteritem>
</parameterlist>
The storage for data is allocated on the box region. A caller should call &lt;box_region_truncate&gt;() to release the data.</para>
<para>In case of an error set a diag and return NULL.</para>
<para><simplesect kind="see"><para><ref refid="module_8h_1a2a9365f857b2bb2b02d03b0c075fd793" kindref="member">luaT_tuple_new()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/module.h" line="2597" column="1" declfile="src/module.h" declline="2597" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="module_8h_1a2a9365f857b2bb2b02d03b0c075fd793" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="module_8h_1a880c3e1e8e63b9a12353853fb6aefa3f" kindref="member">box_tuple_t</ref> *</type>
        <definition>box_tuple_t* luaT_tuple_new</definition>
        <argsstring>(struct lua_State *L, int idx, box_tuple_format_t *format)</argsstring>
        <name>luaT_tuple_new</name>
        <param>
          <type>struct lua_State *</type>
          <declname>L</declname>
        </param>
        <param>
          <type>int</type>
          <declname>idx</declname>
        </param>
        <param>
          <type><ref refid="module_8h_1ab230ff08fb24d580407126fc905cc271" kindref="member">box_tuple_format_t</ref> *</type>
          <declname>format</declname>
        </param>
        <briefdescription>
<para>Create a new tuple with specific format from a Lua table or a tuple. </para>
        </briefdescription>
        <detaileddescription>
<para>The new tuple is referenced in the same way as one created by &lt;box_tuple_new&gt;(). There are two possible usage scenarios:</para>
<para><orderedlist>
<listitem><para>A short living tuple may not be referenced explicitly and will be collected automatically at the next module API call that yields or returns a tuple.</para>
</listitem><listitem><para>A long living tuple must be referenced using &lt;box_tuple_ref&gt;() and unreferenced then with &lt;box_tuple_unref&gt;().</para>
</listitem></orderedlist>
</para>
<para><simplesect kind="see"><para><ref refid="module_8h_1a2211f2682d19f564c55f2888e35d6430" kindref="member">box_tuple_ref()</ref></para>
</simplesect>
In case of an error set a diag and return NULL. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/module.h" line="2618" column="1" declfile="src/module.h" declline="2618" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="module_8h_1a7c106ac756a1b7fa422a72e71b379b0a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="module_8h_1a923d13f137e4bdb8c852ea04637da58d" kindref="member">box_latch_t</ref> *</type>
        <definition>box_latch_t* box_latch_new</definition>
        <argsstring>(void)</argsstring>
        <name>box_latch_new</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Allocate and initialize the new latch. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>latch </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/module.h" line="2633" column="1" declfile="src/module.h" declline="2633" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="module_8h_1a83a897e7386e946cd5ffd2ea1cb47a52" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void box_latch_delete</definition>
        <argsstring>(box_latch_t *latch)</argsstring>
        <name>box_latch_delete</name>
        <param>
          <type><ref refid="module_8h_1a923d13f137e4bdb8c852ea04637da58d" kindref="member">box_latch_t</ref> *</type>
          <declname>latch</declname>
        </param>
        <briefdescription>
<para>Destroy and free the latch. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>latch</parametername>
</parameternamelist>
<parameterdescription>
<para>latch </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/module.h" line="2640" column="1" declfile="src/module.h" declline="2640" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="module_8h_1aef397199dd9a19cb7b9362233a1d4a98" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void box_latch_lock</definition>
        <argsstring>(box_latch_t *latch)</argsstring>
        <name>box_latch_lock</name>
        <param>
          <type><ref refid="module_8h_1a923d13f137e4bdb8c852ea04637da58d" kindref="member">box_latch_t</ref> *</type>
          <declname>latch</declname>
        </param>
        <briefdescription>
<para>Lock a latch. </para>
        </briefdescription>
        <detaileddescription>
<para>Waits indefinitely until the current fiber can gain access to the latch. Locks are acquired in the strict order as they were requested.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>latch</parametername>
</parameternamelist>
<parameterdescription>
<para>a latch </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/module.h" line="2649" column="1" declfile="src/module.h" declline="2649" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="module_8h_1a294e53c819e91f172428d580a29f434f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int box_latch_trylock</definition>
        <argsstring>(box_latch_t *latch)</argsstring>
        <name>box_latch_trylock</name>
        <param>
          <type><ref refid="module_8h_1a923d13f137e4bdb8c852ea04637da58d" kindref="member">box_latch_t</ref> *</type>
          <declname>latch</declname>
        </param>
        <briefdescription>
<para>Try to lock a latch. </para>
        </briefdescription>
        <detaileddescription>
<para>Return immediately if the latch is locked. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>latch</parametername>
</parameternamelist>
<parameterdescription>
<para>a latch </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>- success </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>1</parametername>
</parameternamelist>
<parameterdescription>
<para>- the latch is locked. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/module.h" line="2658" column="1" declfile="src/module.h" declline="2658" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="module_8h_1a11dea9d7a0347d38956ed59f739c68ca" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void box_latch_unlock</definition>
        <argsstring>(box_latch_t *latch)</argsstring>
        <name>box_latch_unlock</name>
        <param>
          <type><ref refid="module_8h_1a923d13f137e4bdb8c852ea04637da58d" kindref="member">box_latch_t</ref> *</type>
          <declname>latch</declname>
        </param>
        <briefdescription>
<para>Unlock a latch. </para>
        </briefdescription>
        <detaileddescription>
<para>The fiber calling this function must own the latch.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>latch</parametername>
</parameternamelist>
<parameterdescription>
<para>a latch </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/module.h" line="2667" column="1" declfile="src/module.h" declline="2667" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="module_8h_1a82b915cd0f2fbf8da0031594334d1161" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double clock_realtime</definition>
        <argsstring>(void)</argsstring>
        <name>clock_realtime</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>public </para>
        </briefdescription>
        <detaileddescription>
<para>A settable system-wide clock that measures real (i.e., wall-clock) time.</para>
<para>See clock_gettime(2), CLOCK_REALTIME. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/module.h" line="2679" column="1" declfile="src/module.h" declline="2679" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="module_8h_1a35900530fb24b7e882c37016b01603aa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double clock_monotonic</definition>
        <argsstring>(void)</argsstring>
        <name>clock_monotonic</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>A nonsettable system-wide clock that represents monotonic time. </para>
        </briefdescription>
        <detaileddescription>
<para>See clock_gettime(2), CLOCK_MONOTONIC. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/module.h" line="2687" column="1" declfile="src/module.h" declline="2687" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="module_8h_1a7ecf77597c056216e310c34951bf21b9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double clock_process</definition>
        <argsstring>(void)</argsstring>
        <name>clock_process</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>A clock that measures CPU time consumed by this process (by all threads in the process). </para>
        </briefdescription>
        <detaileddescription>
<para>See clock_gettime(2), CLOCK_PROCESS_CPUTIME_ID. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/module.h" line="2696" column="1" declfile="src/module.h" declline="2696" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="module_8h_1aac6c5ad4ed25168dd171bd2f9d112d0d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double clock_thread</definition>
        <argsstring>(void)</argsstring>
        <name>clock_thread</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>A clock that measures CPU time consumed by this thread. </para>
        </briefdescription>
        <detaileddescription>
<para>See clock_gettime(2), CLOCK_THREAD_CPUTIME_ID. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/module.h" line="2704" column="1" declfile="src/module.h" declline="2704" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="module_8h_1a3bbe6ebb913f8356f36c68e724473b45" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int64_t</type>
        <definition>int64_t clock_realtime64</definition>
        <argsstring>(void)</argsstring>
        <name>clock_realtime64</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Same as <ref refid="module_8h_1a82b915cd0f2fbf8da0031594334d1161" kindref="member">clock_realtime()</ref>, but returns the time as 64 bit signed integer. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/module.h" line="2711" column="1" declfile="src/module.h" declline="2711" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="module_8h_1a29caad1a3f9995d2a2844a1d4672e3cd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int64_t</type>
        <definition>int64_t clock_monotonic64</definition>
        <argsstring>(void)</argsstring>
        <name>clock_monotonic64</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Same as <ref refid="module_8h_1a35900530fb24b7e882c37016b01603aa" kindref="member">clock_monotonic()</ref>, but returns the time as 64 bit signed integer. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/module.h" line="2718" column="1" declfile="src/module.h" declline="2718" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="module_8h_1a162cf2a3d31840c4a904d5c543980104" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int64_t</type>
        <definition>int64_t clock_process64</definition>
        <argsstring>(void)</argsstring>
        <name>clock_process64</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Same as <ref refid="module_8h_1a7ecf77597c056216e310c34951bf21b9" kindref="member">clock_process()</ref>, but returns the time as 64 bit signed integer. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/module.h" line="2725" column="1" declfile="src/module.h" declline="2725" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="module_8h_1afac4e0ab14aaaf4b7d101e28c55c18cf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int64_t</type>
        <definition>int64_t clock_thread64</definition>
        <argsstring>(void)</argsstring>
        <name>clock_thread64</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Same as <ref refid="module_8h_1aac6c5ad4ed25168dd171bd2f9d112d0d" kindref="member">clock_thread()</ref>, but returns the time as 64 bit signed integer. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/module.h" line="2732" column="1" declfile="src/module.h" declline="2732" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="module_8h_1a1815f3add53077a6f1383db1d9347c99" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int box_decimal_precision</definition>
        <argsstring>(const box_decimal_t *dec)</argsstring>
        <name>box_decimal_precision</name>
        <param>
          <type>const <ref refid="module_8h_1a90d26cf0c54dfa5e878e95ca0f73202a" kindref="member">box_decimal_t</ref> *</type>
          <declname>dec</declname>
        </param>
        <briefdescription>
<para>Decimal precision. </para>
        </briefdescription>
        <detaileddescription>
<para>It is equivalent to amount of decimal digits in the string representation (not counting minus, decimal separator and the leading zero in 0.ddd...ddd number, but counting trailing zeros if any).</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dec</parametername>
</parameternamelist>
<parameterdescription>
<para>decimal number </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>precision </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/module.h" line="2803" column="1" declfile="src/module.h" declline="2803" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="module_8h_1a3499bd306b660788339570ea8b9f4733" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int box_decimal_scale</definition>
        <argsstring>(const box_decimal_t *dec)</argsstring>
        <name>box_decimal_scale</name>
        <param>
          <type>const <ref refid="module_8h_1a90d26cf0c54dfa5e878e95ca0f73202a" kindref="member">box_decimal_t</ref> *</type>
          <declname>dec</declname>
        </param>
        <briefdescription>
<para>Decimal scale. </para>
        </briefdescription>
        <detaileddescription>
<para>It is equivalent to amount of digits after the decimal separator.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dec</parametername>
</parameternamelist>
<parameterdescription>
<para>decimal number </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>scale </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/module.h" line="2815" column="1" declfile="src/module.h" declline="2815" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="module_8h_1a1adad9501fc38ba6e6a54f58d6152840" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool box_decimal_is_int</definition>
        <argsstring>(const box_decimal_t *dec)</argsstring>
        <name>box_decimal_is_int</name>
        <param>
          <type>const <ref refid="module_8h_1a90d26cf0c54dfa5e878e95ca0f73202a" kindref="member">box_decimal_t</ref> *</type>
          <declname>dec</declname>
        </param>
        <briefdescription>
<para>Whether the fractional part of a decimal number is 0. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dec</parametername>
</parameternamelist>
<parameterdescription>
<para>decimal number </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if the fractional part is zero </para>
</simplesect>
<simplesect kind="return"><para>false otherwise </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/module.h" line="2825" column="1" declfile="src/module.h" declline="2825" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="module_8h_1a74749ee03d5f2860c5813b0bf36cabe4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool box_decimal_is_neg</definition>
        <argsstring>(const box_decimal_t *dec)</argsstring>
        <name>box_decimal_is_neg</name>
        <param>
          <type>const <ref refid="module_8h_1a90d26cf0c54dfa5e878e95ca0f73202a" kindref="member">box_decimal_t</ref> *</type>
          <declname>dec</declname>
        </param>
        <briefdescription>
<para>Whether a decimal number is negative. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dec</parametername>
</parameternamelist>
<parameterdescription>
<para>decimal number </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if the decimal is less than zero </para>
</simplesect>
<simplesect kind="return"><para>false otherwise </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/module.h" line="2835" column="1" declfile="src/module.h" declline="2835" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="module_8h_1ab5057a778894e99543a07aecbce998af" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="module_8h_1a90d26cf0c54dfa5e878e95ca0f73202a" kindref="member">box_decimal_t</ref> *</type>
        <definition>box_decimal_t* box_decimal_zero</definition>
        <argsstring>(box_decimal_t *dec)</argsstring>
        <name>box_decimal_zero</name>
        <param>
          <type><ref refid="module_8h_1a90d26cf0c54dfa5e878e95ca0f73202a" kindref="member">box_decimal_t</ref> *</type>
          <declname>dec</declname>
        </param>
        <briefdescription>
<para>Initialize a zero decimal number. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dec</parametername>
</parameternamelist>
<parameterdescription>
<para>where to store the decimal result </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the decimal result </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/module.h" line="2848" column="1" declfile="src/module.h" declline="2848" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="module_8h_1ae81c9e590563ab312a470066e732c874" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="module_8h_1a90d26cf0c54dfa5e878e95ca0f73202a" kindref="member">box_decimal_t</ref> *</type>
        <definition>box_decimal_t* box_decimal_from_string</definition>
        <argsstring>(box_decimal_t *dec, const char *str)</argsstring>
        <name>box_decimal_from_string</name>
        <param>
          <type><ref refid="module_8h_1a90d26cf0c54dfa5e878e95ca0f73202a" kindref="member">box_decimal_t</ref> *</type>
          <declname>dec</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>str</declname>
        </param>
        <briefdescription>
<para>Initialize a decimal with a value from a string. </para>
        </briefdescription>
        <detaileddescription>
<para>The fractional part may be rounded if a maximum precision is reached.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dec</parametername>
</parameternamelist>
<parameterdescription>
<para>where to store the decimal result </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>str</parametername>
</parameternamelist>
<parameterdescription>
<para>source string value </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>NULL if the string is invalid or the number is too big </para>
</simplesect>
<simplesect kind="return"><para>decimal result </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/module.h" line="2862" column="1" declfile="src/module.h" declline="2862" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="module_8h_1a69214f1ba250729dbf5d06894ff7d4cc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="module_8h_1a90d26cf0c54dfa5e878e95ca0f73202a" kindref="member">box_decimal_t</ref> *</type>
        <definition>box_decimal_t* box_decimal_from_double</definition>
        <argsstring>(box_decimal_t *dec, double d)</argsstring>
        <name>box_decimal_from_double</name>
        <param>
          <type><ref refid="module_8h_1a90d26cf0c54dfa5e878e95ca0f73202a" kindref="member">box_decimal_t</ref> *</type>
          <declname>dec</declname>
        </param>
        <param>
          <type>double</type>
          <declname>d</declname>
        </param>
        <briefdescription>
<para>Initialize a decimal from double. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dec</parametername>
</parameternamelist>
<parameterdescription>
<para>where to store the decimal result </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>d</parametername>
</parameternamelist>
<parameterdescription>
<para>source double value </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>NULL if the double is NaN, Infinity or greater than a maximum precision for decimal values </para>
</simplesect>
<simplesect kind="return"><para>decimal result </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/module.h" line="2874" column="1" declfile="src/module.h" declline="2874" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="module_8h_1a4e0a0856aae8c1c80208eee4027e5f83" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="module_8h_1a90d26cf0c54dfa5e878e95ca0f73202a" kindref="member">box_decimal_t</ref> *</type>
        <definition>box_decimal_t* box_decimal_from_int64</definition>
        <argsstring>(box_decimal_t *dec, int64_t num)</argsstring>
        <name>box_decimal_from_int64</name>
        <param>
          <type><ref refid="module_8h_1a90d26cf0c54dfa5e878e95ca0f73202a" kindref="member">box_decimal_t</ref> *</type>
          <declname>dec</declname>
        </param>
        <param>
          <type>int64_t</type>
          <declname>num</declname>
        </param>
        <briefdescription>
<para>Initialize a decimal with a signed integer value. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dec</parametername>
</parameternamelist>
<parameterdescription>
<para>where to store the decimal result </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>num</parametername>
</parameternamelist>
<parameterdescription>
<para>source integer value (signed) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>decimal result </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/module.h" line="2884" column="1" declfile="src/module.h" declline="2884" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="module_8h_1a74864d2137cbd53f64999bd419a721fb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="module_8h_1a90d26cf0c54dfa5e878e95ca0f73202a" kindref="member">box_decimal_t</ref> *</type>
        <definition>box_decimal_t* box_decimal_from_uint64</definition>
        <argsstring>(box_decimal_t *dec, uint64_t num)</argsstring>
        <name>box_decimal_from_uint64</name>
        <param>
          <type><ref refid="module_8h_1a90d26cf0c54dfa5e878e95ca0f73202a" kindref="member">box_decimal_t</ref> *</type>
          <declname>dec</declname>
        </param>
        <param>
          <type>uint64_t</type>
          <declname>num</declname>
        </param>
        <briefdescription>
<para>Initialize a decimal with a unsigned integer value. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dec</parametername>
</parameternamelist>
<parameterdescription>
<para>where to store the decimal result </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>num</parametername>
</parameternamelist>
<parameterdescription>
<para>source integer value (unsigned) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>decimal result </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/module.h" line="2894" column="1" declfile="src/module.h" declline="2894" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="module_8h_1ab67fc69b043029952787aeb05b146145" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="module_8h_1a90d26cf0c54dfa5e878e95ca0f73202a" kindref="member">box_decimal_t</ref> *</type>
        <definition>box_decimal_t* box_decimal_copy</definition>
        <argsstring>(box_decimal_t *dest, const box_decimal_t *src)</argsstring>
        <name>box_decimal_copy</name>
        <param>
          <type><ref refid="module_8h_1a90d26cf0c54dfa5e878e95ca0f73202a" kindref="member">box_decimal_t</ref> *</type>
          <declname>dest</declname>
        </param>
        <param>
          <type>const <ref refid="module_8h_1a90d26cf0c54dfa5e878e95ca0f73202a" kindref="member">box_decimal_t</ref> *</type>
          <declname>src</declname>
        </param>
        <briefdescription>
<para>Copy decimal value from one storage to another. </para>
        </briefdescription>
        <detaileddescription>
<para>Use this function where you would use memcpy() if the precise data size would be known.</para>
<para>The memory areas must not overlap.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dest</parametername>
</parameternamelist>
<parameterdescription>
<para>where to store the copy </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>src</parametername>
</parameternamelist>
<parameterdescription>
<para>from where to copy </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the copy (<emphasis>dest</emphasis>) </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/module.h" line="2909" column="1" declfile="src/module.h" declline="2909" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="module_8h_1a7a20acf8704e0a8de6b2c6e70cabda94" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void box_decimal_to_string</definition>
        <argsstring>(const box_decimal_t *dec, char *buf)</argsstring>
        <name>box_decimal_to_string</name>
        <param>
          <type>const <ref refid="module_8h_1a90d26cf0c54dfa5e878e95ca0f73202a" kindref="member">box_decimal_t</ref> *</type>
          <declname>dec</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>buf</declname>
        </param>
        <briefdescription>
<para>Write the decimal as a string into the passed buffer. </para>
        </briefdescription>
        <detaileddescription>
<para>The buffer must have at least <ref refid="module_8h_1afd0415940d06f795e1f4dcfd40dd6c5b" kindref="member">BOX_DECIMAL_STRING_BUFFER_SIZE</ref> bytes.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dec</parametername>
</parameternamelist>
<parameterdescription>
<para>source decimal number </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>where to write <emphasis>dec</emphasis> string representation </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/module.h" line="2925" column="1" declfile="src/module.h" declline="2925" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="module_8h_1aa213d0898e63876e3ca57cbe506bdfe6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="module_8h_1a90d26cf0c54dfa5e878e95ca0f73202a" kindref="member">box_decimal_t</ref> *</type>
        <definition>const box_decimal_t* box_decimal_to_int64</definition>
        <argsstring>(const box_decimal_t *dec, int64_t *num)</argsstring>
        <name>box_decimal_to_int64</name>
        <param>
          <type>const <ref refid="module_8h_1a90d26cf0c54dfa5e878e95ca0f73202a" kindref="member">box_decimal_t</ref> *</type>
          <declname>dec</declname>
        </param>
        <param>
          <type>int64_t *</type>
          <declname>num</declname>
        </param>
        <briefdescription>
<para>Convert a given decimal to int64_t. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dec</parametername>
</parameternamelist>
<parameterdescription>
<para>source decimal number </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>num</parametername>
</parameternamelist>
<parameterdescription>
<para>where to store <emphasis>dec</emphasis> integer representation </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>NULL if the value does not fit into int64_t </para>
</simplesect>
<simplesect kind="return"><para><emphasis>dec</emphasis> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/module.h" line="2936" column="1" declfile="src/module.h" declline="2936" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="module_8h_1af45f83c5dd155eb132a17f0a4e2efa47" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="module_8h_1a90d26cf0c54dfa5e878e95ca0f73202a" kindref="member">box_decimal_t</ref> *</type>
        <definition>const box_decimal_t* box_decimal_to_uint64</definition>
        <argsstring>(const box_decimal_t *dec, uint64_t *num)</argsstring>
        <name>box_decimal_to_uint64</name>
        <param>
          <type>const <ref refid="module_8h_1a90d26cf0c54dfa5e878e95ca0f73202a" kindref="member">box_decimal_t</ref> *</type>
          <declname>dec</declname>
        </param>
        <param>
          <type>uint64_t *</type>
          <declname>num</declname>
        </param>
        <briefdescription>
<para>Convert a given decimal to uint64_t. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dec</parametername>
</parameternamelist>
<parameterdescription>
<para>source decimal number </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>num</parametername>
</parameternamelist>
<parameterdescription>
<para>where to store <emphasis>dec</emphasis> integer representation </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>NULL if the value does not fit into uint64_t </para>
</simplesect>
<simplesect kind="return"><para><emphasis>dec</emphasis> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/module.h" line="2947" column="1" declfile="src/module.h" declline="2947" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="module_8h_1aae4e2827ab276075fedde86a576d15e9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="module_8h_1a90d26cf0c54dfa5e878e95ca0f73202a" kindref="member">box_decimal_t</ref> *</type>
        <definition>box_decimal_t* box_decimal_round</definition>
        <argsstring>(box_decimal_t *dec, int scale)</argsstring>
        <name>box_decimal_round</name>
        <param>
          <type><ref refid="module_8h_1a90d26cf0c54dfa5e878e95ca0f73202a" kindref="member">box_decimal_t</ref> *</type>
          <declname>dec</declname>
        </param>
        <param>
          <type>int</type>
          <declname>scale</declname>
        </param>
        <briefdescription>
<para>Round to nearest decimal at given <emphasis>scale</emphasis>, half goes away from zero. </para>
        </briefdescription>
        <detaileddescription>
<para>round(-0.66, 1) -&gt; -0.7 round(-0.65, 1) -&gt; -0.7 round(-0.64, 1) -&gt; -0.6</para>
<para>round(0.64, 1) -&gt; 0.6 round(0.65, 1) -&gt; 0.7 round(0.66, 1) -&gt; 0.7</para>
<para>Resulting decimal number has not more than <emphasis>scale</emphasis> digits after the decimal point.</para>
<para>If <emphasis>scale</emphasis> if greater than current <emphasis>dec</emphasis> scale, do nothing.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dec</parametername>
</parameternamelist>
<parameterdescription>
<para>decimal number @oaram scale target scale </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>NULL if <emphasis>scale</emphasis> is out of supported range </para>
</simplesect>
<simplesect kind="return"><para><emphasis>dec</emphasis> (changed) </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/module.h" line="2976" column="1" declfile="src/module.h" declline="2976" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="module_8h_1a471927fb872be29fdff66d0e198a3878" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="module_8h_1a90d26cf0c54dfa5e878e95ca0f73202a" kindref="member">box_decimal_t</ref> *</type>
        <definition>box_decimal_t* box_decimal_floor</definition>
        <argsstring>(box_decimal_t *dec, int scale)</argsstring>
        <name>box_decimal_floor</name>
        <param>
          <type><ref refid="module_8h_1a90d26cf0c54dfa5e878e95ca0f73202a" kindref="member">box_decimal_t</ref> *</type>
          <declname>dec</declname>
        </param>
        <param>
          <type>int</type>
          <declname>scale</declname>
        </param>
        <briefdescription>
<para>Apply a floor function to a decimal, i.e. </para>
        </briefdescription>
        <detaileddescription>
<para>round it towards zero to a decimal with given <emphasis>scale</emphasis>.</para>
<para>floor(-0.66, 1) -&gt; -0.6 floor(-0.65, 1) -&gt; -0.6 floor(-0.64, 1) -&gt; -0.6</para>
<para>floor(0.64, 1) -&gt; 0.6 floor(0.65, 1) -&gt; 0.6 floor(0.66, 1) -&gt; 0.6</para>
<para><simplesect kind="see"><para><ref refid="module_8h_1aae4e2827ab276075fedde86a576d15e9" kindref="member">box_decimal_round</ref></para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dec</parametername>
</parameternamelist>
<parameterdescription>
<para>decimal number @oaram scale target scale </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>NULL if <emphasis>scale</emphasis> is out of supported range </para>
</simplesect>
<simplesect kind="return"><para><emphasis>dec</emphasis> (changed) </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/module.h" line="2998" column="1" declfile="src/module.h" declline="2998" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="module_8h_1a8d6b6c8fd7096a6bfe54d65007255281" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="module_8h_1a90d26cf0c54dfa5e878e95ca0f73202a" kindref="member">box_decimal_t</ref> *</type>
        <definition>box_decimal_t* box_decimal_trim</definition>
        <argsstring>(box_decimal_t *dec)</argsstring>
        <name>box_decimal_trim</name>
        <param>
          <type><ref refid="module_8h_1a90d26cf0c54dfa5e878e95ca0f73202a" kindref="member">box_decimal_t</ref> *</type>
          <declname>dec</declname>
        </param>
        <briefdescription>
<para>Remove trailing zeros from the fractional part of a number. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dec</parametername>
</parameternamelist>
<parameterdescription>
<para>decimal number </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><emphasis>dec</emphasis> (changed) </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/module.h" line="3007" column="1" declfile="src/module.h" declline="3007" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="module_8h_1ac3599d3e81a8144fa1a10199908a84f2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="module_8h_1a90d26cf0c54dfa5e878e95ca0f73202a" kindref="member">box_decimal_t</ref> *</type>
        <definition>box_decimal_t* box_decimal_rescale</definition>
        <argsstring>(box_decimal_t *dec, int scale)</argsstring>
        <name>box_decimal_rescale</name>
        <param>
          <type><ref refid="module_8h_1a90d26cf0c54dfa5e878e95ca0f73202a" kindref="member">box_decimal_t</ref> *</type>
          <declname>dec</declname>
        </param>
        <param>
          <type>int</type>
          <declname>scale</declname>
        </param>
        <briefdescription>
<para>Set scale of <emphasis>dec</emphasis> to <emphasis>scale</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para>If <emphasis>scale</emphasis> is less than scale(<emphasis>dec</emphasis>), round the decimal. Otherwise append a sufficient amount of trailing fractional zeros.</para>
<para><simplesect kind="see"><para><ref refid="module_8h_1aae4e2827ab276075fedde86a576d15e9" kindref="member">box_decimal_round</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="module_8h_1a8d6b6c8fd7096a6bfe54d65007255281" kindref="member">box_decimal_trim</ref></para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dec</parametername>
</parameternamelist>
<parameterdescription>
<para>decimal number @oaram scale target scale </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>NULL if scale is out of supported range (less than zero or too big) </para>
</simplesect>
<simplesect kind="return"><para><emphasis>dec</emphasis> (changed) </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/module.h" line="3026" column="1" declfile="src/module.h" declline="3026" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="module_8h_1aaf0376671f42b04fdafb2706527762b4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int box_decimal_compare</definition>
        <argsstring>(const box_decimal_t *lhs, const box_decimal_t *rhs)</argsstring>
        <name>box_decimal_compare</name>
        <param>
          <type>const <ref refid="module_8h_1a90d26cf0c54dfa5e878e95ca0f73202a" kindref="member">box_decimal_t</ref> *</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="module_8h_1a90d26cf0c54dfa5e878e95ca0f73202a" kindref="member">box_decimal_t</ref> *</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Compare two decimal values. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>lhs</parametername>
</parameternamelist>
<parameterdescription>
<para>left hand side operand </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rhs</parametername>
</parameternamelist>
<parameterdescription>
<para>right hand side operand </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>-1 if lhs &lt; rhs </para>
</simplesect>
<simplesect kind="return"><para>0 if lhs = rhs </para>
</simplesect>
<simplesect kind="return"><para>1 if lhs &gt; rhs </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/module.h" line="3042" column="1" declfile="src/module.h" declline="3042" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="module_8h_1a2a33cc8495c4fc3ef343bf4ffe767d81" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="module_8h_1a90d26cf0c54dfa5e878e95ca0f73202a" kindref="member">box_decimal_t</ref> *</type>
        <definition>box_decimal_t* box_decimal_abs</definition>
        <argsstring>(box_decimal_t *res, const box_decimal_t *dec)</argsstring>
        <name>box_decimal_abs</name>
        <param>
          <type><ref refid="module_8h_1a90d26cf0c54dfa5e878e95ca0f73202a" kindref="member">box_decimal_t</ref> *</type>
          <declname>res</declname>
        </param>
        <param>
          <type>const <ref refid="module_8h_1a90d26cf0c54dfa5e878e95ca0f73202a" kindref="member">box_decimal_t</ref> *</type>
          <declname>dec</declname>
        </param>
        <briefdescription>
<para>Get the absolute value of a decimal. </para>
        </briefdescription>
        <detaileddescription>
<para><emphasis>res</emphasis> is set to the absolute value of <emphasis>dec</emphasis>.</para>
<para>box_decimal_abs(&amp;a, &amp;a) is allowed.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>res</parametername>
</parameternamelist>
<parameterdescription>
<para>where to store the result </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dec</parametername>
</parameternamelist>
<parameterdescription>
<para>decimal operand </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><emphasis>res</emphasis> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/module.h" line="3056" column="1" declfile="src/module.h" declline="3056" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="module_8h_1ac58747fcce83cdad8ffde68b78ad57da" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="module_8h_1a90d26cf0c54dfa5e878e95ca0f73202a" kindref="member">box_decimal_t</ref> *</type>
        <definition>box_decimal_t* box_decimal_minus</definition>
        <argsstring>(box_decimal_t *res, const box_decimal_t *dec)</argsstring>
        <name>box_decimal_minus</name>
        <param>
          <type><ref refid="module_8h_1a90d26cf0c54dfa5e878e95ca0f73202a" kindref="member">box_decimal_t</ref> *</type>
          <declname>res</declname>
        </param>
        <param>
          <type>const <ref refid="module_8h_1a90d26cf0c54dfa5e878e95ca0f73202a" kindref="member">box_decimal_t</ref> *</type>
          <declname>dec</declname>
        </param>
        <briefdescription>
<para>Perform unary minus operation. </para>
        </briefdescription>
        <detaileddescription>
<para><emphasis>res</emphasis> is set to -dec.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>res</parametername>
</parameternamelist>
<parameterdescription>
<para>where to store the result </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dec</parametername>
</parameternamelist>
<parameterdescription>
<para>decimal operand </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><emphasis>res</emphasis> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/module.h" line="3068" column="1" declfile="src/module.h" declline="3068" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="module_8h_1a39c5c7bbc81f8c39f8767cccc27b0d09" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="module_8h_1a90d26cf0c54dfa5e878e95ca0f73202a" kindref="member">box_decimal_t</ref> *</type>
        <definition>box_decimal_t* box_decimal_add</definition>
        <argsstring>(box_decimal_t *res, const box_decimal_t *lhs, const box_decimal_t *rhs)</argsstring>
        <name>box_decimal_add</name>
        <param>
          <type><ref refid="module_8h_1a90d26cf0c54dfa5e878e95ca0f73202a" kindref="member">box_decimal_t</ref> *</type>
          <declname>res</declname>
        </param>
        <param>
          <type>const <ref refid="module_8h_1a90d26cf0c54dfa5e878e95ca0f73202a" kindref="member">box_decimal_t</ref> *</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="module_8h_1a90d26cf0c54dfa5e878e95ca0f73202a" kindref="member">box_decimal_t</ref> *</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Calculate a sum of two decimal numbers. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>res</parametername>
</parameternamelist>
<parameterdescription>
<para>where to hold the result </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>lhs</parametername>
</parameternamelist>
<parameterdescription>
<para>left hand side operand </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rhs</parametername>
</parameternamelist>
<parameterdescription>
<para>right hand side operand </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>NULL on an error (an overflow for example) </para>
</simplesect>
<simplesect kind="return"><para>decimal result (@res) </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/module.h" line="3080" column="1" declfile="src/module.h" declline="3080" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="module_8h_1a26473f8f35e87789e1f7e51e0c9c01d5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="module_8h_1a90d26cf0c54dfa5e878e95ca0f73202a" kindref="member">box_decimal_t</ref> *</type>
        <definition>box_decimal_t* box_decimal_sub</definition>
        <argsstring>(box_decimal_t *res, const box_decimal_t *lhs, const box_decimal_t *rhs)</argsstring>
        <name>box_decimal_sub</name>
        <param>
          <type><ref refid="module_8h_1a90d26cf0c54dfa5e878e95ca0f73202a" kindref="member">box_decimal_t</ref> *</type>
          <declname>res</declname>
        </param>
        <param>
          <type>const <ref refid="module_8h_1a90d26cf0c54dfa5e878e95ca0f73202a" kindref="member">box_decimal_t</ref> *</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="module_8h_1a90d26cf0c54dfa5e878e95ca0f73202a" kindref="member">box_decimal_t</ref> *</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Subtract one decimal number from another. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>res</parametername>
</parameternamelist>
<parameterdescription>
<para>where to hold the result </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>lhs</parametername>
</parameternamelist>
<parameterdescription>
<para>left hand side operand </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rhs</parametername>
</parameternamelist>
<parameterdescription>
<para>right hand side operand </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>NULL on an error (an overflow for example) </para>
</simplesect>
<simplesect kind="return"><para>decimal result (@res) </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/module.h" line="3093" column="1" declfile="src/module.h" declline="3093" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="module_8h_1af8ab08f3604f10eb105b18868511a66d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="module_8h_1a90d26cf0c54dfa5e878e95ca0f73202a" kindref="member">box_decimal_t</ref> *</type>
        <definition>box_decimal_t* box_decimal_mul</definition>
        <argsstring>(box_decimal_t *res, const box_decimal_t *lhs, const box_decimal_t *rhs)</argsstring>
        <name>box_decimal_mul</name>
        <param>
          <type><ref refid="module_8h_1a90d26cf0c54dfa5e878e95ca0f73202a" kindref="member">box_decimal_t</ref> *</type>
          <declname>res</declname>
        </param>
        <param>
          <type>const <ref refid="module_8h_1a90d26cf0c54dfa5e878e95ca0f73202a" kindref="member">box_decimal_t</ref> *</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="module_8h_1a90d26cf0c54dfa5e878e95ca0f73202a" kindref="member">box_decimal_t</ref> *</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Multiply two decimal numbers. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>res</parametername>
</parameternamelist>
<parameterdescription>
<para>where to hold the result </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>lhs</parametername>
</parameternamelist>
<parameterdescription>
<para>left hand side operand </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rhs</parametername>
</parameternamelist>
<parameterdescription>
<para>right hand side operand </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>NULL on an error (an overflow for example) </para>
</simplesect>
<simplesect kind="return"><para>decimal result (@res) </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/module.h" line="3106" column="1" declfile="src/module.h" declline="3106" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="module_8h_1a2246edd7f0b9df9c182038bdbb6d2b11" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="module_8h_1a90d26cf0c54dfa5e878e95ca0f73202a" kindref="member">box_decimal_t</ref> *</type>
        <definition>box_decimal_t* box_decimal_div</definition>
        <argsstring>(box_decimal_t *res, const box_decimal_t *lhs, const box_decimal_t *rhs)</argsstring>
        <name>box_decimal_div</name>
        <param>
          <type><ref refid="module_8h_1a90d26cf0c54dfa5e878e95ca0f73202a" kindref="member">box_decimal_t</ref> *</type>
          <declname>res</declname>
        </param>
        <param>
          <type>const <ref refid="module_8h_1a90d26cf0c54dfa5e878e95ca0f73202a" kindref="member">box_decimal_t</ref> *</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="module_8h_1a90d26cf0c54dfa5e878e95ca0f73202a" kindref="member">box_decimal_t</ref> *</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Divide one decimal number on another. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>res</parametername>
</parameternamelist>
<parameterdescription>
<para>where to hold the result </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>lhs</parametername>
</parameternamelist>
<parameterdescription>
<para>left hand side operand </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rhs</parametername>
</parameternamelist>
<parameterdescription>
<para>right hand side operand </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>NULL on an error </para>
</simplesect>
<simplesect kind="return"><para>decimal result (@res) </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/module.h" line="3119" column="1" declfile="src/module.h" declline="3119" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="module_8h_1aaeb908abdbaea9d758545b1825604101" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="module_8h_1a90d26cf0c54dfa5e878e95ca0f73202a" kindref="member">box_decimal_t</ref> *</type>
        <definition>box_decimal_t* box_decimal_remainder</definition>
        <argsstring>(box_decimal_t *res, const box_decimal_t *lhs, const box_decimal_t *rhs)</argsstring>
        <name>box_decimal_remainder</name>
        <param>
          <type><ref refid="module_8h_1a90d26cf0c54dfa5e878e95ca0f73202a" kindref="member">box_decimal_t</ref> *</type>
          <declname>res</declname>
        </param>
        <param>
          <type>const <ref refid="module_8h_1a90d26cf0c54dfa5e878e95ca0f73202a" kindref="member">box_decimal_t</ref> *</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="module_8h_1a90d26cf0c54dfa5e878e95ca0f73202a" kindref="member">box_decimal_t</ref> *</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Get the remainder of diviging two decimals. </para>
        </briefdescription>
        <detaileddescription>
<para><emphasis>res</emphasis> is set to the remainder of dividing <emphasis>lhs</emphasis> by <emphasis>rhs</emphasis>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>res</parametername>
</parameternamelist>
<parameterdescription>
<para>where to hold the result </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>lhs</parametername>
</parameternamelist>
<parameterdescription>
<para>left hand side operand </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rhs</parametername>
</parameternamelist>
<parameterdescription>
<para>right hand side operand </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>NULL on an error </para>
</simplesect>
<simplesect kind="return"><para>decimal result (@res) </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/module.h" line="3134" column="1" declfile="src/module.h" declline="3134" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="module_8h_1af92596f1e666deb84a3569b7af48af95" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="module_8h_1a90d26cf0c54dfa5e878e95ca0f73202a" kindref="member">box_decimal_t</ref> *</type>
        <definition>box_decimal_t* box_decimal_log10</definition>
        <argsstring>(box_decimal_t *res, const box_decimal_t *dec)</argsstring>
        <name>box_decimal_log10</name>
        <param>
          <type><ref refid="module_8h_1a90d26cf0c54dfa5e878e95ca0f73202a" kindref="member">box_decimal_t</ref> *</type>
          <declname>res</declname>
        </param>
        <param>
          <type>const <ref refid="module_8h_1a90d26cf0c54dfa5e878e95ca0f73202a" kindref="member">box_decimal_t</ref> *</type>
          <declname>dec</declname>
        </param>
        <briefdescription>
<para>Calculate a common logarithm (base 10). </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>res</parametername>
</parameternamelist>
<parameterdescription>
<para>where to hold the result </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dec</parametername>
</parameternamelist>
<parameterdescription>
<para>decimal operand </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>NULL on an error </para>
</simplesect>
<simplesect kind="return"><para>decimal result (@res) </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/module.h" line="3150" column="1" declfile="src/module.h" declline="3150" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="module_8h_1afe79a92142c93b7344f6e6559edea7a6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="module_8h_1a90d26cf0c54dfa5e878e95ca0f73202a" kindref="member">box_decimal_t</ref> *</type>
        <definition>box_decimal_t* box_decimal_ln</definition>
        <argsstring>(box_decimal_t *res, const box_decimal_t *dec)</argsstring>
        <name>box_decimal_ln</name>
        <param>
          <type><ref refid="module_8h_1a90d26cf0c54dfa5e878e95ca0f73202a" kindref="member">box_decimal_t</ref> *</type>
          <declname>res</declname>
        </param>
        <param>
          <type>const <ref refid="module_8h_1a90d26cf0c54dfa5e878e95ca0f73202a" kindref="member">box_decimal_t</ref> *</type>
          <declname>dec</declname>
        </param>
        <briefdescription>
<para>Calculate a natural logarithm (base e). </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>res</parametername>
</parameternamelist>
<parameterdescription>
<para>where to hold the result </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dec</parametername>
</parameternamelist>
<parameterdescription>
<para>decimal operand </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>NULL on an error </para>
</simplesect>
<simplesect kind="return"><para>decimal result (@res) </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/module.h" line="3161" column="1" declfile="src/module.h" declline="3161" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="module_8h_1a78523b113439b54d761c5ffe19317f59" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="module_8h_1a90d26cf0c54dfa5e878e95ca0f73202a" kindref="member">box_decimal_t</ref> *</type>
        <definition>box_decimal_t* box_decimal_pow</definition>
        <argsstring>(box_decimal_t *res, const box_decimal_t *lhs, const box_decimal_t *rhs)</argsstring>
        <name>box_decimal_pow</name>
        <param>
          <type><ref refid="module_8h_1a90d26cf0c54dfa5e878e95ca0f73202a" kindref="member">box_decimal_t</ref> *</type>
          <declname>res</declname>
        </param>
        <param>
          <type>const <ref refid="module_8h_1a90d26cf0c54dfa5e878e95ca0f73202a" kindref="member">box_decimal_t</ref> *</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="module_8h_1a90d26cf0c54dfa5e878e95ca0f73202a" kindref="member">box_decimal_t</ref> *</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Calculate <emphasis>lhs</emphasis> raised to the power of <emphasis>rhs</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>res</parametername>
</parameternamelist>
<parameterdescription>
<para>where to hold the result </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>lhs</parametername>
</parameternamelist>
<parameterdescription>
<para>left hand side operand, base </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rhs</parametername>
</parameternamelist>
<parameterdescription>
<para>right hand side operand, power </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>NULL on an error </para>
</simplesect>
<simplesect kind="return"><para>decimal result (@res) </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/module.h" line="3173" column="1" declfile="src/module.h" declline="3173" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="module_8h_1aaf4d239489a058ab770f6da11c16dcd4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="module_8h_1a90d26cf0c54dfa5e878e95ca0f73202a" kindref="member">box_decimal_t</ref> *</type>
        <definition>box_decimal_t* box_decimal_exp</definition>
        <argsstring>(box_decimal_t *res, const box_decimal_t *dec)</argsstring>
        <name>box_decimal_exp</name>
        <param>
          <type><ref refid="module_8h_1a90d26cf0c54dfa5e878e95ca0f73202a" kindref="member">box_decimal_t</ref> *</type>
          <declname>res</declname>
        </param>
        <param>
          <type>const <ref refid="module_8h_1a90d26cf0c54dfa5e878e95ca0f73202a" kindref="member">box_decimal_t</ref> *</type>
          <declname>dec</declname>
        </param>
        <briefdescription>
<para>Calculate exp(<emphasis>dec</emphasis>), i.e. </para>
        </briefdescription>
        <detaileddescription>
<para>pow(e, <emphasis>dec</emphasis>).</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>res</parametername>
</parameternamelist>
<parameterdescription>
<para>where to hold the result </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dec</parametername>
</parameternamelist>
<parameterdescription>
<para>decimal operand </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>NULL on an error </para>
</simplesect>
<simplesect kind="return"><para>decimal result (@res) </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/module.h" line="3185" column="1" declfile="src/module.h" declline="3185" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="module_8h_1a8947463e9d73c92ffee508b32a3b3d9b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="module_8h_1a90d26cf0c54dfa5e878e95ca0f73202a" kindref="member">box_decimal_t</ref> *</type>
        <definition>box_decimal_t* box_decimal_sqrt</definition>
        <argsstring>(box_decimal_t *res, const box_decimal_t *dec)</argsstring>
        <name>box_decimal_sqrt</name>
        <param>
          <type><ref refid="module_8h_1a90d26cf0c54dfa5e878e95ca0f73202a" kindref="member">box_decimal_t</ref> *</type>
          <declname>res</declname>
        </param>
        <param>
          <type>const <ref refid="module_8h_1a90d26cf0c54dfa5e878e95ca0f73202a" kindref="member">box_decimal_t</ref> *</type>
          <declname>dec</declname>
        </param>
        <briefdescription>
<para>Calculate a square root. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>res</parametername>
</parameternamelist>
<parameterdescription>
<para>where to hold the result </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dec</parametername>
</parameternamelist>
<parameterdescription>
<para>decimal operand </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>NULL on an error </para>
</simplesect>
<simplesect kind="return"><para>decimal result (@res) </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/module.h" line="3196" column="1" declfile="src/module.h" declline="3196" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="module_8h_1ad847059b54874f3e4bde5550ec228fd3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t box_decimal_mp_sizeof</definition>
        <argsstring>(const box_decimal_t *dec)</argsstring>
        <name>box_decimal_mp_sizeof</name>
        <param>
          <type>const <ref refid="module_8h_1a90d26cf0c54dfa5e878e95ca0f73202a" kindref="member">box_decimal_t</ref> *</type>
          <declname>dec</declname>
        </param>
        <briefdescription>
<para>Calculate exact buffer size needed to store msgpack representation of a decimal. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dec</parametername>
</parameternamelist>
<parameterdescription>
<para>decimal operand </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the buffer size </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/module.h" line="3210" column="1" declfile="src/module.h" declline="3210" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="module_8h_1afc7cf68d7ca8998fad15492ae99bbf7e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char* box_decimal_mp_encode</definition>
        <argsstring>(const box_decimal_t *dec, char *data)</argsstring>
        <name>box_decimal_mp_encode</name>
        <param>
          <type>const <ref refid="module_8h_1a90d26cf0c54dfa5e878e95ca0f73202a" kindref="member">box_decimal_t</ref> *</type>
          <declname>dec</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>data</declname>
        </param>
        <briefdescription>
<para>Encode a decimal as msgpack. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dec</parametername>
</parameternamelist>
<parameterdescription>
<para>decimal number to encode </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>buffer to write the result </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><emphasis>data</emphasis> + box_decimal_mp_sizeof(<emphasis>dec</emphasis>) </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/module.h" line="3220" column="1" declfile="src/module.h" declline="3220" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="module_8h_1aa91f14822373ac8e50ecb18bd23aeee4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="module_8h_1a90d26cf0c54dfa5e878e95ca0f73202a" kindref="member">box_decimal_t</ref> *</type>
        <definition>box_decimal_t* box_decimal_mp_decode</definition>
        <argsstring>(box_decimal_t *dec, const char **data)</argsstring>
        <name>box_decimal_mp_decode</name>
        <param>
          <type><ref refid="module_8h_1a90d26cf0c54dfa5e878e95ca0f73202a" kindref="member">box_decimal_t</ref> *</type>
          <declname>dec</declname>
        </param>
        <param>
          <type>const char **</type>
          <declname>data</declname>
        </param>
        <briefdescription>
<para>Decode a decimal from msgpack <emphasis>data</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dec</parametername>
</parameternamelist>
<parameterdescription>
<para>where to store the decoded decimal </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to a buffer with the msgpack data </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>NULL if the msgpack data does not represent a valid decimal value </para>
</simplesect>
<simplesect kind="return"><para>the decoded decimal </para>
</simplesect>
<simplesect kind="post"><para>*data = *data + box_decimal_mp_sizeof(retval) </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/module.h" line="3233" column="1" declfile="src/module.h" declline="3233" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="module_8h_1ae69f4b3c80347bcbfb617a70b57f820e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="module_8h_1a90d26cf0c54dfa5e878e95ca0f73202a" kindref="member">box_decimal_t</ref> *</type>
        <definition>box_decimal_t* box_decimal_mp_decode_data</definition>
        <argsstring>(box_decimal_t *dec, const char **data, uint32_t size)</argsstring>
        <name>box_decimal_mp_decode_data</name>
        <param>
          <type><ref refid="module_8h_1a90d26cf0c54dfa5e878e95ca0f73202a" kindref="member">box_decimal_t</ref> *</type>
          <declname>dec</declname>
        </param>
        <param>
          <type>const char **</type>
          <declname>data</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>size</declname>
        </param>
        <briefdescription>
<para>Decode a decimal from msgpack <emphasis>data</emphasis> without the msgpack extension header. </para>
        </briefdescription>
        <detaileddescription>
<para>| <ref refid="module_8h_1ae69f4b3c80347bcbfb617a70b57f820e" kindref="member">box_decimal_mp_decode_data()</ref> must be called for this position | | | v | &lt;msgpack type&gt; &lt;size&gt; &lt;extension type&gt; &lt;data&gt; | ^ | | | <ref refid="module_8h_1aa91f14822373ac8e50ecb18bd23aeee4" kindref="member">box_decimal_mp_decode()</ref> must be called for this position</para>
<para>This function is suitable to finish decoding after calling mp_decode_extl() (from the msgpuck library).</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dec</parametername>
</parameternamelist>
<parameterdescription>
<para>where to store the decoded decimal </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to a buffer with the msgpack data </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>NULL if the msgpack data does not represent a valid decimal value </para>
</simplesect>
<simplesect kind="return"><para>the decoded decimal </para>
</simplesect>
<simplesect kind="post"><para>*data = *data + <emphasis>size</emphasis> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/module.h" line="3258" column="1" declfile="src/module.h" declline="3258" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="module_8h_1a7062a07e1c119c2c50b65afd23d0ce40" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="module_8h_1a90d26cf0c54dfa5e878e95ca0f73202a" kindref="member">box_decimal_t</ref> *</type>
        <definition>box_decimal_t* luaT_newdecimal</definition>
        <argsstring>(struct lua_State *L)</argsstring>
        <name>luaT_newdecimal</name>
        <param>
          <type>struct lua_State *</type>
          <declname>L</declname>
        </param>
        <briefdescription>
<para>public </para>
        </briefdescription>
        <detaileddescription>
<para>Allocate a new decimal on the Lua stack and return a pointer to it. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/module.h" line="3271" column="1" declfile="src/module.h" declline="3271" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="module_8h_1aef837b9429a6fe562b43d5bff5c3c426" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="module_8h_1a90d26cf0c54dfa5e878e95ca0f73202a" kindref="member">box_decimal_t</ref> *</type>
        <definition>box_decimal_t* luaT_pushdecimal</definition>
        <argsstring>(struct lua_State *L, const box_decimal_t *dec)</argsstring>
        <name>luaT_pushdecimal</name>
        <param>
          <type>struct lua_State *</type>
          <declname>L</declname>
        </param>
        <param>
          <type>const <ref refid="module_8h_1a90d26cf0c54dfa5e878e95ca0f73202a" kindref="member">box_decimal_t</ref> *</type>
          <declname>dec</declname>
        </param>
        <briefdescription>
<para>Allocate a new decimal on the Lua stack with copy of given decimal and return a pointer to it. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/module.h" line="3278" column="1" declfile="src/module.h" declline="3278" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="module_8h_1a53f6c9c6047142026a2e3727e4e43a24" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="module_8h_1a90d26cf0c54dfa5e878e95ca0f73202a" kindref="member">box_decimal_t</ref> *</type>
        <definition>box_decimal_t* luaT_isdecimal</definition>
        <argsstring>(struct lua_State *L, int index)</argsstring>
        <name>luaT_isdecimal</name>
        <param>
          <type>struct lua_State *</type>
          <declname>L</declname>
        </param>
        <param>
          <type>int</type>
          <declname>index</declname>
        </param>
        <briefdescription>
<para>Check whether a value on the Lua stack is a decimal. </para>
        </briefdescription>
        <detaileddescription>
<para>Returns a pointer to the decimal on a successful check, NULL otherwise. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/module.h" line="3287" column="1" declfile="src/module.h" declline="3287" declcolumn="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#ifndef<sp/>TARANTOOL_MODULE_H_INCLUDED</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TARANTOOL_MODULE_H_INCLUDED</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>2010-2016,<sp/>Tarantool<sp/>AUTHORS,<sp/>please<sp/>see<sp/>AUTHORS<sp/>file.</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*<sp/>Redistribution<sp/>and<sp/>use<sp/>in<sp/>source<sp/>and<sp/>binary<sp/>forms,<sp/>with<sp/>or</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*<sp/>without<sp/>modification,<sp/>are<sp/>permitted<sp/>provided<sp/>that<sp/>the<sp/>following</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*<sp/>conditions<sp/>are<sp/>met:</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*<sp/>1.<sp/>Redistributions<sp/>of<sp/>source<sp/>code<sp/>must<sp/>retain<sp/>the<sp/>above</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>copyright<sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>following<sp/>disclaimer.</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>*<sp/>2.<sp/>Redistributions<sp/>in<sp/>binary<sp/>form<sp/>must<sp/>reproduce<sp/>the<sp/>above</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>copyright<sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>disclaimer<sp/>in<sp/>the<sp/>documentation<sp/>and/or<sp/>other<sp/>materials</highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>provided<sp/>with<sp/>the<sp/>distribution.</highlight></codeline>
<codeline lineno="19"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="20"><highlight class="comment"><sp/>*<sp/>THIS<sp/>SOFTWARE<sp/>IS<sp/>PROVIDED<sp/>BY<sp/>AUTHORS<sp/>``AS<sp/>IS&apos;&apos;<sp/>AND</highlight></codeline>
<codeline lineno="21"><highlight class="comment"><sp/>*<sp/>ANY<sp/>EXPRESS<sp/>OR<sp/>IMPLIED<sp/>WARRANTIES,<sp/>INCLUDING,<sp/>BUT<sp/>NOT<sp/>LIMITED</highlight></codeline>
<codeline lineno="22"><highlight class="comment"><sp/>*<sp/>TO,<sp/>THE<sp/>IMPLIED<sp/>WARRANTIES<sp/>OF<sp/>MERCHANTABILITY<sp/>AND<sp/>FITNESS<sp/>FOR</highlight></codeline>
<codeline lineno="23"><highlight class="comment"><sp/>*<sp/>A<sp/>PARTICULAR<sp/>PURPOSE<sp/>ARE<sp/>DISCLAIMED.<sp/>IN<sp/>NO<sp/>EVENT<sp/>SHALL</highlight></codeline>
<codeline lineno="24"><highlight class="comment"><sp/>*<sp/>&lt;COPYRIGHT<sp/>HOLDER&gt;<sp/>OR<sp/>CONTRIBUTORS<sp/>BE<sp/>LIABLE<sp/>FOR<sp/>ANY<sp/>DIRECT,</highlight></codeline>
<codeline lineno="25"><highlight class="comment"><sp/>*<sp/>INDIRECT,<sp/>INCIDENTAL,<sp/>SPECIAL,<sp/>EXEMPLARY,<sp/>OR<sp/>CONSEQUENTIAL</highlight></codeline>
<codeline lineno="26"><highlight class="comment"><sp/>*<sp/>DAMAGES<sp/>(INCLUDING,<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO,<sp/>PROCUREMENT<sp/>OF</highlight></codeline>
<codeline lineno="27"><highlight class="comment"><sp/>*<sp/>SUBSTITUTE<sp/>GOODS<sp/>OR<sp/>SERVICES;<sp/>LOSS<sp/>OF<sp/>USE,<sp/>DATA,<sp/>OR<sp/>PROFITS;<sp/>OR</highlight></codeline>
<codeline lineno="28"><highlight class="comment"><sp/>*<sp/>BUSINESS<sp/>INTERRUPTION)<sp/>HOWEVER<sp/>CAUSED<sp/>AND<sp/>ON<sp/>ANY<sp/>THEORY<sp/>OF</highlight></codeline>
<codeline lineno="29"><highlight class="comment"><sp/>*<sp/>LIABILITY,<sp/>WHETHER<sp/>IN<sp/>CONTRACT,<sp/>STRICT<sp/>LIABILITY,<sp/>OR<sp/>TORT</highlight></codeline>
<codeline lineno="30"><highlight class="comment"><sp/>*<sp/>(INCLUDING<sp/>NEGLIGENCE<sp/>OR<sp/>OTHERWISE)<sp/>ARISING<sp/>IN<sp/>ANY<sp/>WAY<sp/>OUT<sp/>OF</highlight></codeline>
<codeline lineno="31"><highlight class="comment"><sp/>*<sp/>THE<sp/>USE<sp/>OF<sp/>THIS<sp/>SOFTWARE,<sp/>EVEN<sp/>IF<sp/>ADVISED<sp/>OF<sp/>THE<sp/>POSSIBILITY<sp/>OF</highlight></codeline>
<codeline lineno="32"><highlight class="comment"><sp/>*<sp/>SUCH<sp/>DAMAGE.</highlight></codeline>
<codeline lineno="33"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="preprocessor">#include<sp/>&lt;stddef.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdarg.h&gt;</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">/*<sp/>va_list<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;errno.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string.h&gt;</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">/*<sp/>strerror(3)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdint.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdbool.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdio.h&gt;</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">/*<sp/>ssize_t<sp/>for<sp/>Apple<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;sys/types.h&gt;</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">/*<sp/>ssize_t<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(__cplusplus)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>defined(__cplusplus)<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;lua.h&quot;</highlight><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>does<sp/>not<sp/>have<sp/>extern<sp/>C<sp/>wrappers<sp/>*/</highlight></codeline>
<codeline lineno="58" refid="module_8h_1ac5f2c7580fd5bf200c5027443420902f" refkind="member"><highlight class="preprocessor">#define<sp/>PACKAGE_VERSION_MAJOR<sp/>2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight></codeline>
<codeline lineno="62" refid="module_8h_1a4ab155eaff0a115e522c1faae631196e" refkind="member"><highlight class="preprocessor">#define<sp/>PACKAGE_VERSION_MINOR<sp/>6</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight></codeline>
<codeline lineno="66" refid="module_8h_1abd1dbec4fd6761084d3e0c05afe2b138" refkind="member"><highlight class="preprocessor">#define<sp/>PACKAGE_VERSION_PATCH<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight></codeline>
<codeline lineno="71" refid="module_8h_1aa326a05d5e30f9e9a4bb0b4469d5d0c0" refkind="member"><highlight class="preprocessor">#define<sp/>PACKAGE_VERSION<sp/>&quot;2.6.0-2268-g02fae15a3&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight></codeline>
<codeline lineno="77" refid="module_8h_1adb6d1259777e8f56c6260be6faed183e" refkind="member"><highlight class="preprocessor">#define<sp/>SYSCONF_DIR<sp/>&quot;etc&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight></codeline>
<codeline lineno="79" refid="module_8h_1a643b6b7ac15874197420e2adbea8b6bb" refkind="member"><highlight class="preprocessor">#define<sp/>INSTALL_PREFIX<sp/>&quot;/usr/local&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight></codeline>
<codeline lineno="81" refid="module_8h_1a040141d0f88e012c0b915e3531fef5cc" refkind="member"><highlight class="preprocessor">#define<sp/>BUILD_TYPE<sp/>&quot;Debug&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight></codeline>
<codeline lineno="83" refid="module_8h_1ac8c9f90a1d4b7435c509fd2020e4aa88" refkind="member"><highlight class="preprocessor">#define<sp/>BUILD_INFO<sp/>&quot;Linux-x86_64-Debug&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight></codeline>
<codeline lineno="85" refid="module_8h_1a2863d95c06ae4d073ea443a8ae48c5b6" refkind="member"><highlight class="preprocessor">#define<sp/>BUILD_OPTIONS<sp/>&quot;cmake<sp/>.<sp/>-DCMAKE_INSTALL_PREFIX=/usr/local<sp/>-DENABLE_BACKTRACE=TRUE&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight></codeline>
<codeline lineno="87" refid="module_8h_1a835dbb7b4216a8258c588d9781a3b66b" refkind="member"><highlight class="preprocessor">#define<sp/>COMPILER_INFO<sp/>&quot;/usr/bin/cc<sp/>/usr/bin/c++&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight></codeline>
<codeline lineno="89" refid="module_8h_1adc01d1a8b018ef75d112a8f51dde4e27" refkind="member"><highlight class="preprocessor">#define<sp/>TARANTOOL_C_FLAGS<sp/>&quot;<sp/>-fexceptions<sp/>-funwind-tables<sp/>-fno-common<sp/>-fopenmp<sp/>-msse2<sp/>-std=c11<sp/>-Wall<sp/>-Wextra<sp/>-Wno-strict-aliasing<sp/>-Wno-char-subscripts<sp/>-Wno-format-truncation<sp/>-Wno-gnu-alignof-expression<sp/>-fno-gnu89-inline<sp/>-Wno-cast-function-type<sp/>-Werror&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight></codeline>
<codeline lineno="91" refid="module_8h_1a2118c0a1a997878f04f860b4049ca934" refkind="member"><highlight class="preprocessor">#define<sp/>TARANTOOL_CXX_FLAGS<sp/>&quot;<sp/>-fexceptions<sp/>-funwind-tables<sp/>-fno-common<sp/>-fopenmp<sp/>-msse2<sp/>-std=c++11<sp/>-Wall<sp/>-Wextra<sp/>-Wno-strict-aliasing<sp/>-Wno-char-subscripts<sp/>-Wno-format-truncation<sp/>-Wno-invalid-offsetof<sp/>-Wno-gnu-alignof-expression<sp/>-Wno-cast-function-type<sp/>-Werror&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight></codeline>
<codeline lineno="94" refid="module_8h_1a44bca7e3d39f063be25a9d61a0a9d421" refkind="member"><highlight class="preprocessor">#define<sp/>MODULE_LIBDIR<sp/>&quot;/usr/local/lib/tarantool&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight></codeline>
<codeline lineno="96" refid="module_8h_1a8114e8df5bc35951db601268ec25d600" refkind="member"><highlight class="preprocessor">#define<sp/>MODULE_LUADIR<sp/>&quot;/usr/local/share/tarantool&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight></codeline>
<codeline lineno="98" refid="module_8h_1a516a42b6eee771a85d83b371c0f22337" refkind="member"><highlight class="preprocessor">#define<sp/>MODULE_INCLUDEDIR<sp/>&quot;/usr/local/include/tarantool&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight></codeline>
<codeline lineno="100" refid="module_8h_1a5e471f2a326d5e86e09a56f9da3d383f" refkind="member"><highlight class="preprocessor">#define<sp/>MODULE_LUAPATH<sp/>&quot;/usr/local/share/tarantool/?.lua;/usr/local/share/tarantool/?/init.lua;/usr/share/tarantool/?.lua;/usr/share/tarantool/?/init.lua;/usr/local/share/lua/5.1/?.lua;/usr/local/share/lua/5.1/?/init.lua;/usr/share/lua/5.1/?.lua;/usr/share/lua/5.1/?/init.lua&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight></codeline>
<codeline lineno="102" refid="module_8h_1a83a0a80ad0559e26298ce670050609e2" refkind="member"><highlight class="preprocessor">#define<sp/>MODULE_LIBPATH<sp/>&quot;/usr/local/lib/x86_64-linux-gnu/tarantool/?.so;/usr/local/lib/tarantool/?.so;/usr/lib/x86_64-linux-gnu/tarantool/?.so;/usr/local/lib/x86_64-linux-gnu/lua/5.1/?.so;/usr/local/lib/lua/5.1/?.so;/usr/lib/x86_64-linux-gnu/lua/5.1/?.so&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight></codeline>
<codeline lineno="104" refid="module_8h_1a894125cfa770b79267d0eb49e83c2279" refkind="member"><highlight class="preprocessor">#define<sp/>MODULE_LIBSUFFIX<sp/>&quot;.so&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="preprocessor">#ifndef<sp/>__has_feature</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="115" refid="module_8h_1af989845e24678c452b9222afdac95e7f" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>__has_feature(x)<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>__has_builtin</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>__has_builtin(x)<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>__has_attribute</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>__has_attribute(x)<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>__has_cpp_attribute</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>__has_cpp_attribute(x)<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight></codeline>
<codeline lineno="140"><highlight class="preprocessor">#if<sp/>__has_builtin(__builtin_expect)<sp/>||<sp/>defined(__GNUC__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>likely(x)<sp/><sp/><sp/><sp/>__builtin_expect(!!<sp/>(x),1)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>unlikely(x)<sp/><sp/>__builtin_expect(!!<sp/>(x),0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="144" refid="module_8h_1a217a0bd562b98ae8c2ffce44935351e1" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>likely(x)<sp/><sp/><sp/><sp/>(x)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>unlikely(x)<sp/><sp/>(x)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal"></highlight></codeline>
<codeline lineno="168"><highlight class="preprocessor">#if<sp/>__has_builtin(__builtin_prefetch)<sp/>||<sp/>defined(__GNUC__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="169"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>prefetch(addr,<sp/>...)<sp/>(__builtin_prefetch(addr,<sp/>__VA_ARGS__))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="170"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="171" refid="module_8h_1add6458adcc00e90c64bc87db324d1602" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>prefetch(addr,<sp/>...)<sp/>((void)<sp/>addr)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="172"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="173"><highlight class="normal"></highlight></codeline>
<codeline lineno="179"><highlight class="preprocessor">#if<sp/>__has_builtin(__builtin_unreachable)<sp/>||<sp/>defined(__GNUC__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="180"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>unreachable()<sp/>(assert(0),<sp/>__builtin_unreachable())</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="181"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="182" refid="module_8h_1a86d08c1b23d67eca942da0ac012d89f3" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>unreachable()<sp/>(assert(0))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="183"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="184"><highlight class="normal"></highlight></codeline>
<codeline lineno="191"><highlight class="preprocessor">#ifndef<sp/>offsetof</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="192" refid="module_8h_1afd049f7ad59dbe455f460807475c2841" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>offsetof(type,<sp/>member)<sp/>((size_t)<sp/>&amp;((type<sp/>*)0)-&gt;member)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="193"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="194"><highlight class="normal"></highlight></codeline>
<codeline lineno="199"><highlight class="preprocessor">#ifndef<sp/>container_of</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="200" refid="module_8h_1af8c317a42292b61c93aae91e59118a46" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>container_of(ptr,<sp/>type,<sp/>member)<sp/>({<sp/>\</highlight></codeline>
<codeline lineno="201"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>typeof(<sp/>((type<sp/>*)0)-&gt;member<sp/><sp/>)<sp/>*__mptr<sp/>=<sp/>(ptr);<sp/>\</highlight></codeline>
<codeline lineno="202"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(type<sp/>*)(<sp/>(char<sp/>*)__mptr<sp/>-<sp/>offsetof(type,member)<sp/><sp/>);})</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="203"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="204"><highlight class="normal"></highlight></codeline>
<codeline lineno="214"><highlight class="preprocessor">#if<sp/>defined(__cplusplus)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="215"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>include<sp/>&lt;stdalign.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="216"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="217"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!defined(alignas)<sp/>&amp;&amp;<sp/>!defined(__alignas_is_defined)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="218"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>if<sp/>__has_feature(c_alignas)<sp/>||<sp/>(defined(__GNUC__)<sp/>&amp;&amp;<sp/>__GNUC__<sp/>&gt;=<sp/>5)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="219"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/>include<sp/>&lt;stdalign.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="220"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>elif<sp/>__has_attribute(aligned)<sp/>||<sp/>defined(__GNUC__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="221"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/>define<sp/>alignas(_n)<sp/>__attribute__((aligned(_n)))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="222"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/>define<sp/>__alignas_is_defined<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="223"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="224"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/>define<sp/>alignas(_n)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="225"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="226"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="227"><highlight class="normal"></highlight></codeline>
<codeline lineno="233"><highlight class="preprocessor">#if<sp/>!defined(alignof)<sp/>&amp;&amp;<sp/>!defined(__alignof_is_defined)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="234"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>if<sp/>__has_feature(c_alignof)<sp/>||<sp/>(defined(__GNUC__)<sp/>&amp;&amp;<sp/>__GNUC__<sp/>&gt;=<sp/>5)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="235"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/>include<sp/>&lt;stdalign.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="236"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>elif<sp/>defined(__GNUC__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="237"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/>define<sp/>alignof(_T)<sp/>__alignof(_T)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="238"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/>define<sp/>__alignof_is_defined<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="239"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="240" refid="module_8h_1a3ed9482331696beaadb8ab2e6b4dfead" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/>define<sp/>alignof(_T)<sp/>offsetof(struct<sp/>{<sp/>char<sp/>c;<sp/>_T<sp/>member;<sp/>},<sp/>member)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="241"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/>define<sp/>__alignof_is_defined<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="242"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="243"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="244"><highlight class="normal"></highlight></codeline>
<codeline lineno="265"><highlight class="preprocessor">#if<sp/>defined(__cplusplus)<sp/>&amp;&amp;<sp/>__has_cpp_attribute(maybe_unused)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="266"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>MAYBE_UNUSED<sp/>[[maybe_unused]]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="267"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>__has_attribute(unused)<sp/>||<sp/>defined(__GNUC__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="268"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>MAYBE_UNUSED<sp/>__attribute__((unused))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="269"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="270"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>MAYBE_UNUSED</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="271"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="272"><highlight class="normal"></highlight></codeline>
<codeline lineno="280"><highlight class="preprocessor">#if<sp/>defined(__cplusplus)<sp/>&amp;&amp;<sp/>__has_cpp_attribute(nodiscard)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="281"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>NODISCARD<sp/>[[nodiscard]]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="282"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>__has_attribute(warn_unused_result)<sp/>||<sp/>defined(__GNUC__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="283"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>NODISCARD<sp/>__attribute__((warn_unused_result))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="284"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="285"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>NODISCARD</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="286"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="287"><highlight class="normal"></highlight></codeline>
<codeline lineno="294"><highlight class="preprocessor">#if<sp/>__has_attribute(noinline)<sp/>||<sp/>defined(__GNUC__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="295"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>NOINLINE<sp/>__attribute__((noinline))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="296"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="297"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>NOINLINE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="298"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="299"><highlight class="normal"></highlight></codeline>
<codeline lineno="307"><highlight class="preprocessor">#if<sp/>defined(__cplusplus)<sp/>&amp;&amp;<sp/>__has_cpp_attribute(noreturn)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="308"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>NORETURN<sp/>[[noreturn]]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="309"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>__has_attribute(noreturn)<sp/>||<sp/>defined(__GNUC__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="310"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>NORETURN<sp/><sp/>__attribute__((noreturn))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="311"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="312"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>NORETURN</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="313"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="314"><highlight class="normal"></highlight></codeline>
<codeline lineno="320"><highlight class="preprocessor">#if<sp/>defined(__cplusplus)<sp/>&amp;&amp;<sp/>__has_cpp_attribute(deprecated)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="321"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>DEPRECATED(_msg)<sp/>[[deprecated(_msg)]]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="322"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>__has_attribute(deprecated)<sp/>||<sp/>defined(__GNUC__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="323"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>DEPREACTED<sp/><sp/>__attribute__((deprecated(_msg)))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="324"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="325" refid="module_8h_1a033c6face33bc7db165c0ba591696fcc" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>DEPRECATED(_msg)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="326"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="327"><highlight class="normal"></highlight></codeline>
<codeline lineno="331"><highlight class="preprocessor">#if<sp/>defined(__cplusplus)<sp/>&amp;&amp;<sp/>defined(__GNUC__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="332"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>API_EXPORT<sp/>extern<sp/>&quot;C&quot;<sp/>__attribute__<sp/>((nothrow,<sp/>visibility<sp/>(&quot;default&quot;)))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="333"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>defined(__cplusplus)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="334"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>API_EXPORT<sp/>extern<sp/>&quot;C&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="335"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>defined(__GNUC__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="336"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>API_EXPORT<sp/>extern<sp/>__attribute__<sp/>((nothrow,<sp/>visibility<sp/>(&quot;default&quot;)))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="337"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="338" refid="module_8h_1a5e3652cae8b48c1ad174f0b06bbd06d0" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>API_EXPORT<sp/>extern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="339"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="340"><highlight class="normal"></highlight></codeline>
<codeline lineno="348"><highlight class="preprocessor">#if<sp/>__has_attribute(format)<sp/>||<sp/>defined(__GNUC__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="349"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>CFORMAT(_archetype,<sp/>_stringindex,<sp/>_firsttocheck)<sp/>\</highlight></codeline>
<codeline lineno="350"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__attribute__((format(_archetype,<sp/>_stringindex,<sp/>_firsttocheck)))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="351"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="352" refid="module_8h_1a75df7795fe4158ac681564ae0520d975" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>CFORMAT(archetype,<sp/>stringindex,<sp/>firsttocheck)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="353"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="354"><highlight class="normal"></highlight></codeline>
<codeline lineno="363"><highlight class="preprocessor">#if<sp/>__has_attribute(packed)<sp/>||<sp/>defined(__GNUC__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="364"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>PACKED<sp/><sp/>__attribute__((packed))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="365"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>defined(__CC_ARM)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="366"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>PACKED<sp/>__packed</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="367"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="368"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>PACKED</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="369"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="370"><highlight class="normal"></highlight></codeline>
<codeline lineno="386"><highlight class="preprocessor">#if<sp/>defined(__cplusplus)<sp/>&amp;&amp;<sp/>__has_cpp_attribute(fallthrough)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="387"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>FALLTHROUGH<sp/>[[fallthrough]]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="388"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>__has_attribute(fallthrough)<sp/>||<sp/>(defined(__GNUC__)<sp/>&amp;&amp;<sp/>__GNUC__<sp/>&gt;=<sp/>7)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="389"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>FALLTHROUGH<sp/>__attribute__((fallthrough))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="390"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="391" refid="module_8h_1a0cf2d82c57a09723ab59e6f4dcc45b84" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>FALLTHROUGH</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="392"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="393"><highlight class="normal"></highlight></codeline>
<codeline lineno="416"><highlight class="normal"><ref refid="module_8h_1a5e3652cae8b48c1ad174f0b06bbd06d0" kindref="member">API_EXPORT</ref><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="417"><highlight class="normal"><ref refid="module_8h_1a4a35d7a7fe53c673112e06ab78794216" kindref="member">box_on_shutdown</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*arg,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>(*new_handler)(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*),</highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>(*old_handler)(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*));</highlight></codeline>
<codeline lineno="419"><highlight class="normal"></highlight></codeline>
<codeline lineno="424" refid="module_8h_1af667a90dfe6a8cc25b510af73d98bb82" refkind="member"><highlight class="keyword">enum</highlight><highlight class="normal"><sp/><ref refid="module_8h_1af667a90dfe6a8cc25b510af73d98bb82" kindref="member">say_level</ref><sp/>{</highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>S_FATAL,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>do<sp/>not<sp/>use<sp/>this<sp/>value<sp/>directly<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>S_SYSERROR,</highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>S_ERROR,</highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>S_CRIT,</highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>S_WARN,</highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>S_INFO,</highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>S_VERBOSE,</highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>S_DEBUG</highlight></codeline>
<codeline lineno="433"><highlight class="normal">};</highlight></codeline>
<codeline lineno="434"><highlight class="normal"></highlight></codeline>
<codeline lineno="436" refid="module_8h_1ade0789f1bee95be5f9005c6ff4e0b2ad" refkind="member"><highlight class="keyword">enum</highlight><highlight class="normal"><sp/><ref refid="module_8h_1ade0789f1bee95be5f9005c6ff4e0b2ad" kindref="member">say_format</ref><sp/>{</highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SF_PLAIN,</highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SF_JSON,</highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>say_format_MAX</highlight></codeline>
<codeline lineno="440"><highlight class="normal">};</highlight></codeline>
<codeline lineno="441"><highlight class="normal"></highlight></codeline>
<codeline lineno="442"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>log_level;</highlight></codeline>
<codeline lineno="443"><highlight class="normal"></highlight></codeline>
<codeline lineno="444"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="445"><highlight class="normal">say_log_level_is_enabled(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>level)</highlight></codeline>
<codeline lineno="446"><highlight class="normal">{</highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>level<sp/>&lt;=<sp/>log_level;</highlight></codeline>
<codeline lineno="448"><highlight class="normal">}</highlight></codeline>
<codeline lineno="449"><highlight class="normal"></highlight></codeline>
<codeline lineno="452" refid="module_8h_1a24a548551bdc95d156210ec216ded4f9" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>void<sp/>(*<ref refid="module_8h_1a24a548551bdc95d156210ec216ded4f9" kindref="member">sayfunc_t</ref>)(int,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*,<sp/>int,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*,</highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*,<sp/>...);</highlight></codeline>
<codeline lineno="454"><highlight class="normal"></highlight></codeline>
<codeline lineno="456"><highlight class="normal"><ref refid="module_8h_1a75df7795fe4158ac681564ae0520d975" kindref="member">CFORMAT</ref>(printf,<sp/>5,<sp/>6)<sp/>extern<sp/><ref refid="module_8h_1a24a548551bdc95d156210ec216ded4f9" kindref="member">sayfunc_t</ref><sp/>_say;</highlight></codeline>
<codeline lineno="457"><highlight class="normal"></highlight></codeline>
<codeline lineno="470" refid="module_8h_1aed82e9747a226e287b0355deecfee5d1" refkind="member"><highlight class="preprocessor">#define<sp/>say_file_line(level,<sp/>file,<sp/>line,<sp/>error,<sp/>format,<sp/>...)<sp/>({<sp/>\</highlight></codeline>
<codeline lineno="471"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(say_log_level_is_enabled(level))<sp/>\</highlight></codeline>
<codeline lineno="472"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_say(level,<sp/>file,<sp/>line,<sp/>error,<sp/>format,<sp/>##__VA_ARGS__);<sp/>})</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="473"><highlight class="normal"></highlight></codeline>
<codeline lineno="484" refid="module_8h_1a5b2bb360001f6dfb4f946335950cabbf" refkind="member"><highlight class="preprocessor">#define<sp/>say(level,<sp/>error,<sp/>format,<sp/>...)<sp/>({<sp/>\</highlight></codeline>
<codeline lineno="485"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>say_file_line(level,<sp/>__FILE__,<sp/>__LINE__,<sp/>error,<sp/>format,<sp/>##__VA_ARGS__);<sp/>})</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="486"><highlight class="normal"></highlight></codeline>
<codeline lineno="499" refid="module_8h_1a0a7d66a81cb7c12fdb2bf2c16b9c563e" refkind="member"><highlight class="preprocessor">#define<sp/>say_error(format,<sp/>...)<sp/>say(S_ERROR,<sp/>NULL,<sp/>format,<sp/>##__VA_ARGS__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="500"><highlight class="normal"></highlight></codeline>
<codeline lineno="501" refid="module_8h_1a7971b0f41c615be5a0b7100b5e42dcb3" refkind="member"><highlight class="preprocessor">#define<sp/>say_crit(format,<sp/>...)<sp/>say(S_CRIT,<sp/>NULL,<sp/>format,<sp/>##__VA_ARGS__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="502"><highlight class="normal"></highlight></codeline>
<codeline lineno="503" refid="module_8h_1ac1ea95f80b8aa81fe56ca4291814b8a3" refkind="member"><highlight class="preprocessor">#define<sp/>say_warn(format,<sp/>...)<sp/>say(S_WARN,<sp/>NULL,<sp/>format,<sp/>##__VA_ARGS__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="504"><highlight class="normal"></highlight></codeline>
<codeline lineno="505" refid="module_8h_1ae02d530f5d4ff18fd7786c3648dac2cf" refkind="member"><highlight class="preprocessor">#define<sp/>say_info(format,<sp/>...)<sp/>say(S_INFO,<sp/>NULL,<sp/>format,<sp/>##__VA_ARGS__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="506"><highlight class="normal"></highlight></codeline>
<codeline lineno="507" refid="module_8h_1a01a0037b2d3389e850c9bd7d66996b42" refkind="member"><highlight class="preprocessor">#define<sp/>say_verbose(format,<sp/>...)<sp/>say(S_VERBOSE,<sp/>NULL,<sp/>format,<sp/>##__VA_ARGS__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="508"><highlight class="normal"></highlight></codeline>
<codeline lineno="509" refid="module_8h_1ab318c2435df2b04c7180df57a3c217ae" refkind="member"><highlight class="preprocessor">#define<sp/>say_debug(format,<sp/>...)<sp/>say(S_DEBUG,<sp/>NULL,<sp/>format,<sp/>##__VA_ARGS__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="510"><highlight class="normal"></highlight></codeline>
<codeline lineno="511" refid="module_8h_1a39929109aefade22a76048b9ac73bd8d" refkind="member"><highlight class="preprocessor">#define<sp/>say_syserror(format,<sp/>...)<sp/>say(S_SYSERROR,<sp/>strerror(errno),<sp/>format,<sp/>\</highlight></codeline>
<codeline lineno="512"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>##__VA_ARGS__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="513"><highlight class="normal"></highlight></codeline>
<codeline lineno="519"><highlight class="keyword">struct<sp/></highlight><highlight class="normal">fiber_attr;</highlight></codeline>
<codeline lineno="520"><highlight class="normal"></highlight></codeline>
<codeline lineno="527"><highlight class="normal"><ref refid="module_8h_1a5e3652cae8b48c1ad174f0b06bbd06d0" kindref="member">API_EXPORT</ref><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">fiber_attr<sp/>*</highlight></codeline>
<codeline lineno="528"><highlight class="normal"><ref refid="module_8h_1a615728b106aa274514dea63a9a693fd1" kindref="member">fiber_attr_new</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="529"><highlight class="normal"></highlight></codeline>
<codeline lineno="536"><highlight class="normal"><ref refid="module_8h_1a5e3652cae8b48c1ad174f0b06bbd06d0" kindref="member">API_EXPORT</ref><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="537"><highlight class="normal"><ref refid="module_8h_1ac4003e7d28985f1573cf3faf8b4d38ee" kindref="member">fiber_attr_delete</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>fiber_attr<sp/>*fiber_attr);</highlight></codeline>
<codeline lineno="538"><highlight class="normal"></highlight></codeline>
<codeline lineno="545"><highlight class="normal"><ref refid="module_8h_1a5e3652cae8b48c1ad174f0b06bbd06d0" kindref="member">API_EXPORT</ref><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="546"><highlight class="normal"><ref refid="module_8h_1a4f42c1a444922edf2163806c5433ae1a" kindref="member">fiber_attr_setstacksize</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>fiber_attr<sp/>*fiber_attr,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>stack_size);</highlight></codeline>
<codeline lineno="547"><highlight class="normal"></highlight></codeline>
<codeline lineno="554"><highlight class="normal"><ref refid="module_8h_1a5e3652cae8b48c1ad174f0b06bbd06d0" kindref="member">API_EXPORT</ref><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="555"><highlight class="normal"><ref refid="module_8h_1ad628f573827cf2393f0849c194719a94" kindref="member">fiber_attr_getstacksize</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>fiber_attr<sp/>*fiber_attr);</highlight></codeline>
<codeline lineno="556"><highlight class="normal"></highlight></codeline>
<codeline lineno="557"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">fiber;</highlight></codeline>
<codeline lineno="562" refid="module_8h_1a94849dd4556ce6560a898d5af2d20779" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>int<sp/>(*<ref refid="module_8h_1a94849dd4556ce6560a898d5af2d20779" kindref="member">fiber_func</ref>)(va_list);</highlight></codeline>
<codeline lineno="563"><highlight class="normal"></highlight></codeline>
<codeline lineno="567"><highlight class="normal"><ref refid="module_8h_1a5e3652cae8b48c1ad174f0b06bbd06d0" kindref="member">API_EXPORT</ref><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">fiber<sp/>*</highlight></codeline>
<codeline lineno="568"><highlight class="normal"><ref refid="module_8h_1a6de8ea84fe46359b0a3dc9d6a401e0ab" kindref="member">fiber_self</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="569"><highlight class="normal"></highlight></codeline>
<codeline lineno="586"><highlight class="normal"><ref refid="module_8h_1a5e3652cae8b48c1ad174f0b06bbd06d0" kindref="member">API_EXPORT</ref><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">fiber<sp/>*</highlight></codeline>
<codeline lineno="587"><highlight class="normal"><ref refid="module_8h_1ac0d955b4ac367ab3b95c6c0d0df31050" kindref="member">fiber_new</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*name,<sp/><ref refid="module_8h_1a94849dd4556ce6560a898d5af2d20779" kindref="member">fiber_func</ref><sp/>f);</highlight></codeline>
<codeline lineno="588"><highlight class="normal"></highlight></codeline>
<codeline lineno="605"><highlight class="normal"><ref refid="module_8h_1a5e3652cae8b48c1ad174f0b06bbd06d0" kindref="member">API_EXPORT</ref><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">fiber<sp/>*</highlight></codeline>
<codeline lineno="606"><highlight class="normal"><ref refid="module_8h_1a8e8dbdb4656ce6c89ea1e3215c0d6adf" kindref="member">fiber_new_ex</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*name,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>fiber_attr<sp/>*fiber_attr,<sp/><ref refid="module_8h_1a94849dd4556ce6560a898d5af2d20779" kindref="member">fiber_func</ref><sp/>f);</highlight></codeline>
<codeline lineno="607"><highlight class="normal"></highlight></codeline>
<codeline lineno="613"><highlight class="normal"><ref refid="module_8h_1a5e3652cae8b48c1ad174f0b06bbd06d0" kindref="member">API_EXPORT</ref><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="614"><highlight class="normal"><ref refid="module_8h_1aaa5beb40f119b9400bb57b81820b24ff" kindref="member">fiber_yield</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="615"><highlight class="normal"></highlight></codeline>
<codeline lineno="624"><highlight class="normal"><ref refid="module_8h_1a5e3652cae8b48c1ad174f0b06bbd06d0" kindref="member">API_EXPORT</ref><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="625"><highlight class="normal"><ref refid="module_8h_1abca18eb68ebf89507d4cf5eb3c402cb2" kindref="member">fiber_start</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>fiber<sp/>*callee,<sp/>...);</highlight></codeline>
<codeline lineno="626"><highlight class="normal"></highlight></codeline>
<codeline lineno="632"><highlight class="normal"><ref refid="module_8h_1a5e3652cae8b48c1ad174f0b06bbd06d0" kindref="member">API_EXPORT</ref><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="633"><highlight class="normal"><ref refid="module_8h_1a661de7f72aa265ff6ffcb8b3acfafe40" kindref="member">fiber_wakeup</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>fiber<sp/>*f);</highlight></codeline>
<codeline lineno="634"><highlight class="normal"></highlight></codeline>
<codeline lineno="645"><highlight class="normal"><ref refid="module_8h_1a5e3652cae8b48c1ad174f0b06bbd06d0" kindref="member">API_EXPORT</ref><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="646"><highlight class="normal"><ref refid="module_8h_1a9a5b700b2122f08e6bc1298ac7eb0435" kindref="member">fiber_cancel</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>fiber<sp/>*f);</highlight></codeline>
<codeline lineno="647"><highlight class="normal"></highlight></codeline>
<codeline lineno="655"><highlight class="normal"><ref refid="module_8h_1a5e3652cae8b48c1ad174f0b06bbd06d0" kindref="member">API_EXPORT</ref><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="656"><highlight class="normal"><ref refid="module_8h_1a4078cbddc22b0ed941548f86672224d9" kindref="member">fiber_set_cancellable</ref>(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>yesno);</highlight></codeline>
<codeline lineno="657"><highlight class="normal"></highlight></codeline>
<codeline lineno="662"><highlight class="normal"><ref refid="module_8h_1a5e3652cae8b48c1ad174f0b06bbd06d0" kindref="member">API_EXPORT</ref><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="663"><highlight class="normal"><ref refid="module_8h_1a8ee4e98a4e9c2239b5d7eb98c2b0b208" kindref="member">fiber_set_joinable</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>fiber<sp/>*fiber,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>yesno);</highlight></codeline>
<codeline lineno="664"><highlight class="normal"></highlight></codeline>
<codeline lineno="674"><highlight class="normal"><ref refid="module_8h_1a5e3652cae8b48c1ad174f0b06bbd06d0" kindref="member">API_EXPORT</ref><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="675"><highlight class="normal"><ref refid="module_8h_1a58ac22e89f3fdab0556cc5f6922f0f59" kindref="member">fiber_join</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>fiber<sp/>*f);</highlight></codeline>
<codeline lineno="676"><highlight class="normal"></highlight></codeline>
<codeline lineno="690"><highlight class="normal"><ref refid="module_8h_1a5e3652cae8b48c1ad174f0b06bbd06d0" kindref="member">API_EXPORT</ref><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="691"><highlight class="normal"><ref refid="module_8h_1a676e8a263a2592320b7260095f5c10f3" kindref="member">fiber_join_timeout</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>fiber<sp/>*f,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>timeout);</highlight></codeline>
<codeline lineno="692"><highlight class="normal"></highlight></codeline>
<codeline lineno="700"><highlight class="normal"><ref refid="module_8h_1a5e3652cae8b48c1ad174f0b06bbd06d0" kindref="member">API_EXPORT</ref><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="701"><highlight class="normal"><ref refid="module_8h_1a0ab0816e3ddf7e11b448926569e6bc49" kindref="member">fiber_sleep</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>s);</highlight></codeline>
<codeline lineno="702"><highlight class="normal"></highlight></codeline>
<codeline lineno="707"><highlight class="normal"><ref refid="module_8h_1a5e3652cae8b48c1ad174f0b06bbd06d0" kindref="member">API_EXPORT</ref><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="708"><highlight class="normal"><ref refid="module_8h_1a972d46a2ac9d787bc69b61ce09938587" kindref="member">fiber_is_cancelled</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="709"><highlight class="normal"></highlight></codeline>
<codeline lineno="714"><highlight class="normal"><ref refid="module_8h_1a5e3652cae8b48c1ad174f0b06bbd06d0" kindref="member">API_EXPORT</ref><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="715"><highlight class="normal"><ref refid="module_8h_1a077a6068c998d2e548168be5e1a6008f" kindref="member">fiber_time</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="716"><highlight class="normal"></highlight></codeline>
<codeline lineno="721"><highlight class="normal"><ref refid="module_8h_1a5e3652cae8b48c1ad174f0b06bbd06d0" kindref="member">API_EXPORT</ref><sp/>int64_t</highlight></codeline>
<codeline lineno="722"><highlight class="normal"><ref refid="module_8h_1ae1e9fb25b47b6090a587c92aaf536aed" kindref="member">fiber_time64</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="723"><highlight class="normal"></highlight></codeline>
<codeline lineno="728"><highlight class="normal"><ref refid="module_8h_1a5e3652cae8b48c1ad174f0b06bbd06d0" kindref="member">API_EXPORT</ref><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="729"><highlight class="normal"><ref refid="module_8h_1a0e1c835fac5180f57e01c388a95440d5" kindref="member">fiber_clock</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="730"><highlight class="normal"></highlight></codeline>
<codeline lineno="735"><highlight class="normal"><ref refid="module_8h_1a5e3652cae8b48c1ad174f0b06bbd06d0" kindref="member">API_EXPORT</ref><sp/>int64_t</highlight></codeline>
<codeline lineno="736"><highlight class="normal"><ref refid="module_8h_1a8ed4eb4281eaa96a74c6e052995af645" kindref="member">fiber_clock64</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="737"><highlight class="normal"></highlight></codeline>
<codeline lineno="741"><highlight class="normal"><ref refid="module_8h_1a5e3652cae8b48c1ad174f0b06bbd06d0" kindref="member">API_EXPORT</ref><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="742"><highlight class="normal"><ref refid="module_8h_1a1d0122a4705796fd32c2a54e218c2ff8" kindref="member">fiber_reschedule</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="743"><highlight class="normal"></highlight></codeline>
<codeline lineno="747"><highlight class="keyword">struct<sp/></highlight><highlight class="normal">slab_cache;</highlight></codeline>
<codeline lineno="748"><highlight class="normal"><ref refid="module_8h_1a5e3652cae8b48c1ad174f0b06bbd06d0" kindref="member">API_EXPORT</ref><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">slab_cache<sp/>*</highlight></codeline>
<codeline lineno="749"><highlight class="normal">cord_slab_cache(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="750"><highlight class="normal"></highlight></codeline>
<codeline lineno="801"><highlight class="normal"><ref refid="module_8h_1a5e3652cae8b48c1ad174f0b06bbd06d0" kindref="member">API_EXPORT</ref><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="802"><highlight class="normal"><ref refid="module_8h_1a113af82955ade6d52b5a03fc327b266f" kindref="member">box_region_used</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="803"><highlight class="normal"></highlight></codeline>
<codeline lineno="815"><highlight class="normal"><ref refid="module_8h_1a5e3652cae8b48c1ad174f0b06bbd06d0" kindref="member">API_EXPORT</ref><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*</highlight></codeline>
<codeline lineno="816"><highlight class="normal"><ref refid="module_8h_1ac8e7d6a912f5f8230bd8c8035735ef2f" kindref="member">box_region_alloc</ref>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size);</highlight></codeline>
<codeline lineno="817"><highlight class="normal"></highlight></codeline>
<codeline lineno="826"><highlight class="normal"><ref refid="module_8h_1a5e3652cae8b48c1ad174f0b06bbd06d0" kindref="member">API_EXPORT</ref><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*</highlight></codeline>
<codeline lineno="827"><highlight class="normal"><ref refid="module_8h_1a541b6608e37fc392112a9aee229432fa" kindref="member">box_region_aligned_alloc</ref>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>alignment);</highlight></codeline>
<codeline lineno="828"><highlight class="normal"></highlight></codeline>
<codeline lineno="832"><highlight class="normal"><ref refid="module_8h_1a5e3652cae8b48c1ad174f0b06bbd06d0" kindref="member">API_EXPORT</ref><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="833"><highlight class="normal"><ref refid="module_8h_1a6575301cf1bd4df1bfad9a319b80a0b4" kindref="member">box_region_truncate</ref>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size);</highlight></codeline>
<codeline lineno="834"><highlight class="normal"></highlight></codeline>
<codeline lineno="848"><highlight class="keyword">struct<sp/></highlight><highlight class="normal">fiber_cond;</highlight></codeline>
<codeline lineno="849"><highlight class="normal"></highlight></codeline>
<codeline lineno="856"><highlight class="keyword">struct<sp/></highlight><highlight class="normal">fiber_cond<sp/>*</highlight></codeline>
<codeline lineno="857"><highlight class="normal"><ref refid="module_8h_1a670f12ab6752093a3e2ae0ff48ccd491" kindref="member">fiber_cond_new</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="858"><highlight class="normal"></highlight></codeline>
<codeline lineno="863"><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="864"><highlight class="normal"><ref refid="module_8h_1a64787aacecdc620e9b7e402babf9ae1e" kindref="member">fiber_cond_delete</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>fiber_cond<sp/>*cond);</highlight></codeline>
<codeline lineno="865"><highlight class="normal"></highlight></codeline>
<codeline lineno="871"><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="872"><highlight class="normal"><ref refid="module_8h_1a3f13caca027d090cc02574e333c78f3c" kindref="member">fiber_cond_signal</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>fiber_cond<sp/>*cond);</highlight></codeline>
<codeline lineno="873"><highlight class="normal"></highlight></codeline>
<codeline lineno="878"><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="879"><highlight class="normal"><ref refid="module_8h_1abbca6fff4cd2ccf2b65528ea5e1e1e39" kindref="member">fiber_cond_broadcast</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>fiber_cond<sp/>*cond);</highlight></codeline>
<codeline lineno="880"><highlight class="normal"></highlight></codeline>
<codeline lineno="893"><highlight class="keywordtype">int</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="894"><highlight class="normal"><ref refid="module_8h_1a9e7882234efd30663364ded133ab3fad" kindref="member">fiber_cond_wait_timeout</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>fiber_cond<sp/>*cond,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>timeout);</highlight></codeline>
<codeline lineno="895"><highlight class="normal"></highlight></codeline>
<codeline lineno="900"><highlight class="keywordtype">int</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="901"><highlight class="normal"><ref refid="module_8h_1a1dd72e262e9e59a14c1337bc0fa2447c" kindref="member">fiber_cond_wait</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>fiber_cond<sp/>*cond);</highlight></codeline>
<codeline lineno="902"><highlight class="normal"></highlight></codeline>
<codeline lineno="906"><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="908" refid="module_8h_1a06fc87d81c62e9abb8790b6e5713c55ba4e556d3f75a54e162feaa8e9451cfce7" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="module_8h_1a06fc87d81c62e9abb8790b6e5713c55ba4e556d3f75a54e162feaa8e9451cfce7" kindref="member">COIO_READ</ref><sp/><sp/>=<sp/>0x1,</highlight></codeline>
<codeline lineno="910" refid="module_8h_1a06fc87d81c62e9abb8790b6e5713c55ba9ccd504861956d107f717efa66b3f1b7" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="module_8h_1a06fc87d81c62e9abb8790b6e5713c55ba9ccd504861956d107f717efa66b3f1b7" kindref="member">COIO_WRITE</ref><sp/>=<sp/>0x2,</highlight></codeline>
<codeline lineno="911"><highlight class="normal">};</highlight></codeline>
<codeline lineno="912"><highlight class="normal"></highlight></codeline>
<codeline lineno="923"><highlight class="normal"><ref refid="module_8h_1a5e3652cae8b48c1ad174f0b06bbd06d0" kindref="member">API_EXPORT</ref><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="924"><highlight class="normal"><ref refid="module_8h_1ab9c521a569fd78b25f355f3b7525ba9a" kindref="member">coio_wait</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>fd,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>event,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>timeout);</highlight></codeline>
<codeline lineno="925"><highlight class="normal"></highlight></codeline>
<codeline lineno="930"><highlight class="normal"><ref refid="module_8h_1a5e3652cae8b48c1ad174f0b06bbd06d0" kindref="member">API_EXPORT</ref><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="931"><highlight class="normal"><ref refid="module_8h_1af23dc320746ce4ec9afdf433a66ef596" kindref="member">coio_close</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>fd);</highlight></codeline>
<codeline lineno="932"><highlight class="normal"></highlight></codeline>
<codeline lineno="961"><highlight class="normal">ssize_t</highlight></codeline>
<codeline lineno="962"><highlight class="normal"><ref refid="module_8h_1af9433c7d42d7747f1f69b79a0d98df13" kindref="member">coio_call</ref>(ssize_t<sp/>(*func)(va_list),<sp/>...);</highlight></codeline>
<codeline lineno="963"><highlight class="normal"></highlight></codeline>
<codeline lineno="964"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">addrinfo;</highlight></codeline>
<codeline lineno="965"><highlight class="normal"></highlight></codeline>
<codeline lineno="980"><highlight class="keywordtype">int</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="981"><highlight class="normal"><ref refid="module_8h_1a832b67e03175570d9f6fa17ffd77bf83" kindref="member">coio_getaddrinfo</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*host,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*port,</highlight></codeline>
<codeline lineno="982"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>addrinfo<sp/>*hints,<sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>addrinfo<sp/>**res,</highlight></codeline>
<codeline lineno="983"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>timeout);</highlight></codeline>
<codeline lineno="987" refid="module_8h_1ae1cb16b1acef0772ea4192316f742aa8" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">ibuf<sp/><ref refid="module_8h_1ae1cb16b1acef0772ea4192316f742aa8" kindref="member">box_ibuf_t</ref>;</highlight></codeline>
<codeline lineno="988"><highlight class="normal"></highlight></codeline>
<codeline lineno="995"><highlight class="normal"><ref refid="module_8h_1a5e3652cae8b48c1ad174f0b06bbd06d0" kindref="member">API_EXPORT</ref><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*</highlight></codeline>
<codeline lineno="996"><highlight class="normal"><ref refid="module_8h_1a4b6dd91e6e7f26a9b57f4c317c2af203" kindref="member">box_ibuf_reserve</ref>(<ref refid="module_8h_1ae1cb16b1acef0772ea4192316f742aa8" kindref="member">box_ibuf_t</ref><sp/>*ibuf,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size);</highlight></codeline>
<codeline lineno="997"><highlight class="normal"></highlight></codeline>
<codeline lineno="1004"><highlight class="normal"><ref refid="module_8h_1a5e3652cae8b48c1ad174f0b06bbd06d0" kindref="member">API_EXPORT</ref><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1005"><highlight class="normal"><ref refid="module_8h_1a1fb9d369f674c637b476fd92b00d3da5" kindref="member">box_ibuf_read_range</ref>(<ref refid="module_8h_1ae1cb16b1acef0772ea4192316f742aa8" kindref="member">box_ibuf_t</ref><sp/>*ibuf,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>***rpos,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>***wpos);</highlight></codeline>
<codeline lineno="1006"><highlight class="normal"></highlight></codeline>
<codeline lineno="1013"><highlight class="normal"><ref refid="module_8h_1a5e3652cae8b48c1ad174f0b06bbd06d0" kindref="member">API_EXPORT</ref><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1014"><highlight class="normal"><ref refid="module_8h_1ac74b2d0e25c3a295f9ae0200a787c432" kindref="member">box_ibuf_write_range</ref>(<ref refid="module_8h_1ae1cb16b1acef0772ea4192316f742aa8" kindref="member">box_ibuf_t</ref><sp/>*ibuf,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>***wpos,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>***end);</highlight></codeline>
<codeline lineno="1015"><highlight class="normal"></highlight></codeline>
<codeline lineno="1036"><highlight class="normal">LUA_API<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1037"><highlight class="normal"><ref refid="module_8h_1acc9bcfc8296607ac6cbfdd9d44cd7451" kindref="member">luaL_iscdata</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>lua_State<sp/>*L,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>idx);</highlight></codeline>
<codeline lineno="1038"><highlight class="normal"></highlight></codeline>
<codeline lineno="1048"><highlight class="normal">LUA_API<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*</highlight></codeline>
<codeline lineno="1049"><highlight class="normal"><ref refid="module_8h_1a6016a29a15957c333f568d4059923fad" kindref="member">luaL_pushcdata</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>lua_State<sp/>*L,<sp/>uint32_t<sp/>ctypeid);</highlight></codeline>
<codeline lineno="1050"><highlight class="normal"></highlight></codeline>
<codeline lineno="1059"><highlight class="normal">LUA_API<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*</highlight></codeline>
<codeline lineno="1060"><highlight class="normal"><ref refid="module_8h_1a09b8d32a69bc903b97ee3379b34fb2af" kindref="member">luaL_checkcdata</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>lua_State<sp/>*L,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>idx,<sp/>uint32_t<sp/>*ctypeid);</highlight></codeline>
<codeline lineno="1061"><highlight class="normal"></highlight></codeline>
<codeline lineno="1069"><highlight class="normal">LUA_API<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1070"><highlight class="normal"><ref refid="module_8h_1aa62fc5e919f74956a06a9b40fb24f691" kindref="member">luaL_setcdatagc</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>lua_State<sp/>*L,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>idx);</highlight></codeline>
<codeline lineno="1071"><highlight class="normal"></highlight></codeline>
<codeline lineno="1080"><highlight class="normal">LUA_API<sp/>uint32_t</highlight></codeline>
<codeline lineno="1081"><highlight class="normal"><ref refid="module_8h_1a5d1f07b7fe39b8bd9b7a87f7c84d5d73" kindref="member">luaL_ctypeid</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>lua_State<sp/>*L,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*ctypename);</highlight></codeline>
<codeline lineno="1082"><highlight class="normal"></highlight></codeline>
<codeline lineno="1091"><highlight class="normal">LUA_API<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1092"><highlight class="normal"><ref refid="module_8h_1a498681c0c56f0aebe938004ab8947b0f" kindref="member">luaL_cdef</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>lua_State<sp/>*L,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*ctypename);</highlight></codeline>
<codeline lineno="1093"><highlight class="normal"></highlight></codeline>
<codeline lineno="1103"><highlight class="normal">LUA_API<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1104"><highlight class="normal"><ref refid="module_8h_1a6439d4dd158b27d2567e1bfd6243e084" kindref="member">luaL_pushuint64</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>lua_State<sp/>*L,<sp/>uint64_t<sp/>val);</highlight></codeline>
<codeline lineno="1105"><highlight class="normal"></highlight></codeline>
<codeline lineno="1112"><highlight class="normal">LUA_API<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1113"><highlight class="normal"><ref refid="module_8h_1a1dcccfbc48bac7e8cf4802e839c2f198" kindref="member">luaL_pushint64</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>lua_State<sp/>*L,<sp/>int64_t<sp/>val);</highlight></codeline>
<codeline lineno="1114"><highlight class="normal"></highlight></codeline>
<codeline lineno="1120"><highlight class="normal">LUA_API<sp/>uint64_t</highlight></codeline>
<codeline lineno="1121"><highlight class="normal"><ref refid="module_8h_1ac5247fbc8230e2f49464e25e27b87d35" kindref="member">luaL_checkuint64</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>lua_State<sp/>*L,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>idx);</highlight></codeline>
<codeline lineno="1122"><highlight class="normal"></highlight></codeline>
<codeline lineno="1128"><highlight class="normal">LUA_API<sp/>int64_t</highlight></codeline>
<codeline lineno="1129"><highlight class="normal"><ref refid="module_8h_1a159fe92272b876c3fa7b130f026705bd" kindref="member">luaL_checkint64</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>lua_State<sp/>*L,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>idx);</highlight></codeline>
<codeline lineno="1130"><highlight class="normal"></highlight></codeline>
<codeline lineno="1136"><highlight class="normal">LUA_API<sp/>uint64_t</highlight></codeline>
<codeline lineno="1137"><highlight class="normal"><ref refid="module_8h_1a20e035148bc707412c054291f9b51855" kindref="member">luaL_touint64</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>lua_State<sp/>*L,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>idx);</highlight></codeline>
<codeline lineno="1138"><highlight class="normal"></highlight></codeline>
<codeline lineno="1144"><highlight class="normal">LUA_API<sp/>int64_t</highlight></codeline>
<codeline lineno="1145"><highlight class="normal"><ref refid="module_8h_1a31727f17a0a09ff7fb92ac3d2eaa2dce" kindref="member">luaL_toint64</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>lua_State<sp/>*L,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>idx);</highlight></codeline>
<codeline lineno="1146"><highlight class="normal"></highlight></codeline>
<codeline lineno="1151"><highlight class="normal">LUA_API<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1152"><highlight class="normal"><ref refid="module_8h_1a4c95f4e99d2f7b5be64ca3918fdc4ccf" kindref="member">luaT_call</ref>(lua_State<sp/>*L,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nargs,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nreturns);</highlight></codeline>
<codeline lineno="1153"><highlight class="normal"></highlight></codeline>
<codeline lineno="1158"><highlight class="normal">LUA_API<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1159"><highlight class="normal"><ref refid="module_8h_1a08aafb8aaa59640f2b7130e9281e53ec" kindref="member">luaT_cpcall</ref>(lua_State<sp/>*L,<sp/>lua_CFunction<sp/>func,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*ud);</highlight></codeline>
<codeline lineno="1160"><highlight class="normal"></highlight></codeline>
<codeline lineno="1164"><highlight class="normal">LUA_API<sp/>lua_State<sp/>*</highlight></codeline>
<codeline lineno="1165"><highlight class="normal"><ref refid="module_8h_1adcc2559396474f5dff737adf04edc382" kindref="member">luaT_state</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1166"><highlight class="normal"></highlight></codeline>
<codeline lineno="1170"><highlight class="normal">LUA_API<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*</highlight></codeline>
<codeline lineno="1171"><highlight class="normal"><ref refid="module_8h_1acb0f168f5234ddb59713defe03029118" kindref="member">luaT_tolstring</ref>(lua_State<sp/>*L,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>idx,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>*ssize);</highlight></codeline>
<codeline lineno="1172"><highlight class="normal"></highlight></codeline>
<codeline lineno="1180"><highlight class="normal">LUA_API<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1181"><highlight class="normal"><ref refid="module_8h_1a08ca887563c2bcd2e17ad199dac627b2" kindref="member">luaL_iscallable</ref>(lua_State<sp/>*L,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>idx);</highlight></codeline>
<codeline lineno="1182"><highlight class="normal"></highlight></codeline>
<codeline lineno="1188"><highlight class="normal">LUA_API<sp/><ref refid="module_8h_1ae1cb16b1acef0772ea4192316f742aa8" kindref="member">box_ibuf_t</ref><sp/>*</highlight></codeline>
<codeline lineno="1189"><highlight class="normal"><ref refid="module_8h_1ac572fcff70dbc1c4c33339f1db082315" kindref="member">luaT_toibuf</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>lua_State<sp/>*L,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>idx);</highlight></codeline>
<codeline lineno="1190"><highlight class="normal"></highlight></codeline>
<codeline lineno="1193"><highlight class="keyword">struct<sp/></highlight><highlight class="normal">error;</highlight></codeline>
<codeline lineno="1194"><highlight class="normal"></highlight></codeline>
<codeline lineno="1200"><highlight class="normal">LUA_API<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1201"><highlight class="normal"><ref refid="module_8h_1ae5e643c0eff90628dd8cb09ddd8dfc68" kindref="member">luaT_error</ref>(lua_State<sp/>*L);</highlight></codeline>
<codeline lineno="1202"><highlight class="normal"></highlight></codeline>
<codeline lineno="1209"><highlight class="normal">LUA_API<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1210"><highlight class="normal"><ref refid="module_8h_1aa1740670301221218d3780f2a4df33c6" kindref="member">luaT_push_nil_and_error</ref>(lua_State<sp/>*L);</highlight></codeline>
<codeline lineno="1211"><highlight class="normal"></highlight></codeline>
<codeline lineno="1212"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1213"><highlight class="normal">luaT_pusherror(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>lua_State<sp/>*L,<sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>error<sp/>*e);</highlight></codeline>
<codeline lineno="1229" refid="module_8h_1af2d527c62a52f85cb173c79c31d20ce1" refkind="member"><highlight class="keyword">enum</highlight><highlight class="normal"><sp/><ref refid="module_8h_1af2d527c62a52f85cb173c79c31d20ce1" kindref="member">txn_isolation_level</ref><sp/>{</highlight></codeline>
<codeline lineno="1231" refid="module_8h_1af2d527c62a52f85cb173c79c31d20ce1a4f9fb36818af61558b13124ca0e02363" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="module_8h_1af2d527c62a52f85cb173c79c31d20ce1a4f9fb36818af61558b13124ca0e02363" kindref="member">TXN_ISOLATION_DEFAULT</ref>,</highlight></codeline>
<codeline lineno="1233" refid="module_8h_1af2d527c62a52f85cb173c79c31d20ce1a351aceaaa55693a90f5e33103d051947" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="module_8h_1af2d527c62a52f85cb173c79c31d20ce1a351aceaaa55693a90f5e33103d051947" kindref="member">TXN_ISOLATION_READ_COMMITTED</ref>,</highlight></codeline>
<codeline lineno="1235" refid="module_8h_1af2d527c62a52f85cb173c79c31d20ce1ab2411f8d6a9d68367da464d9fcff932f" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="module_8h_1af2d527c62a52f85cb173c79c31d20ce1ab2411f8d6a9d68367da464d9fcff932f" kindref="member">TXN_ISOLATION_READ_CONFIRMED</ref>,</highlight></codeline>
<codeline lineno="1237" refid="module_8h_1af2d527c62a52f85cb173c79c31d20ce1afa0bc338b3e678625a61d16254991c7b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="module_8h_1af2d527c62a52f85cb173c79c31d20ce1afa0bc338b3e678625a61d16254991c7b" kindref="member">TXN_ISOLATION_BEST_EFFORT</ref>,</highlight></codeline>
<codeline lineno="1239" refid="module_8h_1af2d527c62a52f85cb173c79c31d20ce1a8e225c05de0c630a787eb113f64e3af4" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="module_8h_1af2d527c62a52f85cb173c79c31d20ce1a8e225c05de0c630a787eb113f64e3af4" kindref="member">txn_isolation_level_MAX</ref>,</highlight></codeline>
<codeline lineno="1240"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1241"><highlight class="normal"></highlight></codeline>
<codeline lineno="1250"><highlight class="normal"><ref refid="module_8h_1a5e3652cae8b48c1ad174f0b06bbd06d0" kindref="member">API_EXPORT</ref><sp/>int64_t</highlight></codeline>
<codeline lineno="1251"><highlight class="normal"><ref refid="module_8h_1a94bf484fef1147b9e53323cd5082b505" kindref="member">box_txn_id</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1252"><highlight class="normal"></highlight></codeline>
<codeline lineno="1256"><highlight class="normal"><ref refid="module_8h_1a5e3652cae8b48c1ad174f0b06bbd06d0" kindref="member">API_EXPORT</ref><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1257"><highlight class="normal"><ref refid="module_8h_1af44f82b5dd34b12026c33baf63ba3fee" kindref="member">box_txn</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1258"><highlight class="normal"></highlight></codeline>
<codeline lineno="1269"><highlight class="normal"><ref refid="module_8h_1a5e3652cae8b48c1ad174f0b06bbd06d0" kindref="member">API_EXPORT</ref><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1270"><highlight class="normal"><ref refid="module_8h_1a88346fff21ac55ecf5e8e7e8750093ce" kindref="member">box_txn_begin</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1271"><highlight class="normal"></highlight></codeline>
<codeline lineno="1278"><highlight class="normal"><ref refid="module_8h_1a5e3652cae8b48c1ad174f0b06bbd06d0" kindref="member">API_EXPORT</ref><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1279"><highlight class="normal"><ref refid="module_8h_1a541c69864552de6ae21c4edce2bbf949" kindref="member">box_txn_commit</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1280"><highlight class="normal"></highlight></codeline>
<codeline lineno="1286"><highlight class="normal"><ref refid="module_8h_1a5e3652cae8b48c1ad174f0b06bbd06d0" kindref="member">API_EXPORT</ref><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1287"><highlight class="normal"><ref refid="module_8h_1a59188d28eb2a8cd892d48f74041fec45" kindref="member">box_txn_rollback</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1288"><highlight class="normal"></highlight></codeline>
<codeline lineno="1296"><highlight class="normal"><ref refid="module_8h_1a5e3652cae8b48c1ad174f0b06bbd06d0" kindref="member">API_EXPORT</ref><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*</highlight></codeline>
<codeline lineno="1297"><highlight class="normal"><ref refid="module_8h_1adf5cc88ba87d8e5afe81604385609191" kindref="member">box_txn_alloc</ref>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size);</highlight></codeline>
<codeline lineno="1298"><highlight class="normal"></highlight></codeline>
<codeline lineno="1308"><highlight class="normal"><ref refid="module_8h_1a5e3652cae8b48c1ad174f0b06bbd06d0" kindref="member">API_EXPORT</ref><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1309"><highlight class="normal"><ref refid="module_8h_1a3e930976f6e8e73e213f701c3761fce4" kindref="member">box_txn_set_timeout</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>timeout);</highlight></codeline>
<codeline lineno="1310"><highlight class="normal"></highlight></codeline>
<codeline lineno="1319"><highlight class="normal"><ref refid="module_8h_1a5e3652cae8b48c1ad174f0b06bbd06d0" kindref="member">API_EXPORT</ref><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1320"><highlight class="normal"><ref refid="module_8h_1a8a24686e9b0f80d53ded039aa69dfd33" kindref="member">box_txn_set_isolation</ref>(uint32_t<sp/>level);</highlight></codeline>
<codeline lineno="1321"><highlight class="normal"></highlight></codeline>
<codeline lineno="1325" refid="module_8h_1ab230ff08fb24d580407126fc905cc271" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">tuple_format<sp/><ref refid="module_8h_1ab230ff08fb24d580407126fc905cc271" kindref="member">box_tuple_format_t</ref>;</highlight></codeline>
<codeline lineno="1326"><highlight class="normal"></highlight></codeline>
<codeline lineno="1333"><highlight class="normal"><ref refid="module_8h_1ab230ff08fb24d580407126fc905cc271" kindref="member">box_tuple_format_t</ref><sp/>*</highlight></codeline>
<codeline lineno="1334"><highlight class="normal"><ref refid="module_8h_1a5a457c9503bb15df42c4854fbede340e" kindref="member">box_tuple_format_default</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1335"><highlight class="normal"></highlight></codeline>
<codeline lineno="1339" refid="module_8h_1a880c3e1e8e63b9a12353853fb6aefa3f" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">tuple<sp/><ref refid="module_8h_1a880c3e1e8e63b9a12353853fb6aefa3f" kindref="member">box_tuple_t</ref>;</highlight></codeline>
<codeline lineno="1340"><highlight class="normal"></highlight></codeline>
<codeline lineno="1358"><highlight class="keywordtype">int</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1359"><highlight class="normal"><ref refid="module_8h_1a2211f2682d19f564c55f2888e35d6430" kindref="member">box_tuple_ref</ref>(<ref refid="module_8h_1a880c3e1e8e63b9a12353853fb6aefa3f" kindref="member">box_tuple_t</ref><sp/>*tuple);</highlight></codeline>
<codeline lineno="1360"><highlight class="normal"></highlight></codeline>
<codeline lineno="1367"><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1368"><highlight class="normal"><ref refid="module_8h_1a22d7b12b1afbff0c3cc20726c10cc6cc" kindref="member">box_tuple_unref</ref>(<ref refid="module_8h_1a880c3e1e8e63b9a12353853fb6aefa3f" kindref="member">box_tuple_t</ref><sp/>*tuple);</highlight></codeline>
<codeline lineno="1369"><highlight class="normal"></highlight></codeline>
<codeline lineno="1374"><highlight class="normal">uint32_t</highlight></codeline>
<codeline lineno="1375"><highlight class="normal"><ref refid="module_8h_1a800d61b749ed483d35b65025eaa3039e" kindref="member">box_tuple_field_count</ref>(<ref refid="module_8h_1a880c3e1e8e63b9a12353853fb6aefa3f" kindref="member">box_tuple_t</ref><sp/>*tuple);</highlight></codeline>
<codeline lineno="1376"><highlight class="normal"></highlight></codeline>
<codeline lineno="1381"><highlight class="keywordtype">size_t</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1382"><highlight class="normal"><ref refid="module_8h_1a6812d20a87dc1f55648679680d0d2272" kindref="member">box_tuple_bsize</ref>(<ref refid="module_8h_1a880c3e1e8e63b9a12353853fb6aefa3f" kindref="member">box_tuple_t</ref><sp/>*tuple);</highlight></codeline>
<codeline lineno="1383"><highlight class="normal"></highlight></codeline>
<codeline lineno="1394"><highlight class="normal">ssize_t</highlight></codeline>
<codeline lineno="1395"><highlight class="normal"><ref refid="module_8h_1af520a6742b61a5bcb879b75d09d72f4e" kindref="member">box_tuple_to_buf</ref>(<ref refid="module_8h_1a880c3e1e8e63b9a12353853fb6aefa3f" kindref="member">box_tuple_t</ref><sp/>*tuple,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*buf,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size);</highlight></codeline>
<codeline lineno="1396"><highlight class="normal"></highlight></codeline>
<codeline lineno="1402"><highlight class="normal"><ref refid="module_8h_1ab230ff08fb24d580407126fc905cc271" kindref="member">box_tuple_format_t</ref><sp/>*</highlight></codeline>
<codeline lineno="1403"><highlight class="normal"><ref refid="module_8h_1a7195d3207b3d7e034473d26b6d24dd2f" kindref="member">box_tuple_format</ref>(<ref refid="module_8h_1a880c3e1e8e63b9a12353853fb6aefa3f" kindref="member">box_tuple_t</ref><sp/>*tuple);</highlight></codeline>
<codeline lineno="1404"><highlight class="normal"></highlight></codeline>
<codeline lineno="1415"><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*</highlight></codeline>
<codeline lineno="1416"><highlight class="normal"><ref refid="module_8h_1a13b0c6fa0fbeb5d6f2974e8b82aa83f0" kindref="member">box_tuple_field</ref>(<ref refid="module_8h_1a880c3e1e8e63b9a12353853fb6aefa3f" kindref="member">box_tuple_t</ref><sp/>*tuple,<sp/>uint32_t<sp/>fieldno);</highlight></codeline>
<codeline lineno="1417"><highlight class="normal"></highlight></codeline>
<codeline lineno="1446"><highlight class="normal"><ref refid="module_8h_1a5e3652cae8b48c1ad174f0b06bbd06d0" kindref="member">API_EXPORT</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*</highlight></codeline>
<codeline lineno="1447"><highlight class="normal"><ref refid="module_8h_1a74729917c4ca28b3044569f5eccaecd9" kindref="member">box_tuple_field_by_path</ref>(<ref refid="module_8h_1a880c3e1e8e63b9a12353853fb6aefa3f" kindref="member">box_tuple_t</ref><sp/>*tuple,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*path,</highlight></codeline>
<codeline lineno="1448"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>path_len,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index_base);</highlight></codeline>
<codeline lineno="1452" refid="module_8h_1aa289ab037764b9f065d4b683cb186bda" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">tuple_iterator<sp/><ref refid="module_8h_1aa289ab037764b9f065d4b683cb186bda" kindref="member">box_tuple_iterator_t</ref>;</highlight></codeline>
<codeline lineno="1453"><highlight class="normal"></highlight></codeline>
<codeline lineno="1482"><highlight class="normal"><ref refid="module_8h_1aa289ab037764b9f065d4b683cb186bda" kindref="member">box_tuple_iterator_t</ref><sp/>*</highlight></codeline>
<codeline lineno="1483"><highlight class="normal"><ref refid="module_8h_1a1aabe2cc4f09abaa070664c6d7156cd1" kindref="member">box_tuple_iterator</ref>(<ref refid="module_8h_1a880c3e1e8e63b9a12353853fb6aefa3f" kindref="member">box_tuple_t</ref><sp/>*tuple);</highlight></codeline>
<codeline lineno="1484"><highlight class="normal"></highlight></codeline>
<codeline lineno="1488"><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1489"><highlight class="normal"><ref refid="module_8h_1acbbb37bc35f4c2eac665acb61f08da95" kindref="member">box_tuple_iterator_free</ref>(<ref refid="module_8h_1aa289ab037764b9f065d4b683cb186bda" kindref="member">box_tuple_iterator_t</ref><sp/>*it);</highlight></codeline>
<codeline lineno="1490"><highlight class="normal"></highlight></codeline>
<codeline lineno="1501"><highlight class="normal">uint32_t</highlight></codeline>
<codeline lineno="1502"><highlight class="normal"><ref refid="module_8h_1ac24865c6c4138cd6a252f32c55c812c6" kindref="member">box_tuple_position</ref>(<ref refid="module_8h_1aa289ab037764b9f065d4b683cb186bda" kindref="member">box_tuple_iterator_t</ref><sp/>*it);</highlight></codeline>
<codeline lineno="1503"><highlight class="normal"></highlight></codeline>
<codeline lineno="1510"><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1511"><highlight class="normal"><ref refid="module_8h_1aaa998b89aa550c51d8576d3b766d1a67" kindref="member">box_tuple_rewind</ref>(<ref refid="module_8h_1aa289ab037764b9f065d4b683cb186bda" kindref="member">box_tuple_iterator_t</ref><sp/>*it);</highlight></codeline>
<codeline lineno="1512"><highlight class="normal"></highlight></codeline>
<codeline lineno="1525"><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*</highlight></codeline>
<codeline lineno="1526"><highlight class="normal"><ref refid="module_8h_1a76dc6a76579c761e9c7b2b9ced89290a" kindref="member">box_tuple_seek</ref>(<ref refid="module_8h_1aa289ab037764b9f065d4b683cb186bda" kindref="member">box_tuple_iterator_t</ref><sp/>*it,<sp/>uint32_t<sp/>fieldno);</highlight></codeline>
<codeline lineno="1527"><highlight class="normal"></highlight></codeline>
<codeline lineno="1539"><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*</highlight></codeline>
<codeline lineno="1540"><highlight class="normal"><ref refid="module_8h_1a7b88a4ee472624416d875a906a82d99b" kindref="member">box_tuple_next</ref>(<ref refid="module_8h_1aa289ab037764b9f065d4b683cb186bda" kindref="member">box_tuple_iterator_t</ref><sp/>*it);</highlight></codeline>
<codeline lineno="1541"><highlight class="normal"></highlight></codeline>
<codeline lineno="1553"><highlight class="normal"><ref refid="module_8h_1a880c3e1e8e63b9a12353853fb6aefa3f" kindref="member">box_tuple_t</ref><sp/>*</highlight></codeline>
<codeline lineno="1554"><highlight class="normal"><ref refid="module_8h_1a442eb6797ae4d114d00dc68f2b1e361a" kindref="member">box_tuple_new</ref>(<ref refid="module_8h_1ab230ff08fb24d580407126fc905cc271" kindref="member">box_tuple_format_t</ref><sp/>*format,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*data,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*end);</highlight></codeline>
<codeline lineno="1555"><highlight class="normal"></highlight></codeline>
<codeline lineno="1556"><highlight class="normal"><ref refid="module_8h_1a880c3e1e8e63b9a12353853fb6aefa3f" kindref="member">box_tuple_t</ref><sp/>*</highlight></codeline>
<codeline lineno="1557"><highlight class="normal">box_tuple_update(<ref refid="module_8h_1a880c3e1e8e63b9a12353853fb6aefa3f" kindref="member">box_tuple_t</ref><sp/>*tuple,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*expr,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*expr_end);</highlight></codeline>
<codeline lineno="1558"><highlight class="normal"></highlight></codeline>
<codeline lineno="1559"><highlight class="normal"><ref refid="module_8h_1a880c3e1e8e63b9a12353853fb6aefa3f" kindref="member">box_tuple_t</ref><sp/>*</highlight></codeline>
<codeline lineno="1560"><highlight class="normal">box_tuple_upsert(<ref refid="module_8h_1a880c3e1e8e63b9a12353853fb6aefa3f" kindref="member">box_tuple_t</ref><sp/>*tuple,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*expr,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*expr_end);</highlight></codeline>
<codeline lineno="1561"><highlight class="normal"></highlight></codeline>
<codeline lineno="1570"><highlight class="keywordtype">int</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1571"><highlight class="normal"><ref refid="module_8h_1a8f05611324090cd538b14e0728cf185a" kindref="member">box_tuple_validate</ref>(<ref refid="module_8h_1a880c3e1e8e63b9a12353853fb6aefa3f" kindref="member">box_tuple_t</ref><sp/>*tuple,<sp/><ref refid="module_8h_1ab230ff08fb24d580407126fc905cc271" kindref="member">box_tuple_format_t</ref><sp/>*format);</highlight></codeline>
<codeline lineno="1572"><highlight class="normal"></highlight></codeline>
<codeline lineno="1576" refid="module_8h_1acfbe4043908ad1b4a106689ad2da8814" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">key_def<sp/><ref refid="module_8h_1acfbe4043908ad1b4a106689ad2da8814" kindref="member">box_key_def_t</ref>;</highlight></codeline>
<codeline lineno="1577"><highlight class="normal"></highlight></codeline>
<codeline lineno="1579"><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1580"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BOX_KEY_PART_DEF_IS_NULLABLE<sp/>=<sp/>1<sp/>&lt;&lt;<sp/>0,</highlight></codeline>
<codeline lineno="1581"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BOX_KEY_PART_DEF_EXCLUDE_NULL<sp/>=<sp/>1<sp/>&lt;&lt;<sp/>1,</highlight></codeline>
<codeline lineno="1582"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1583"><highlight class="normal"></highlight></codeline>
<codeline lineno="1608"><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1609"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BOX_KEY_PART_DEF_T_SIZE<sp/>=<sp/>64,</highlight></codeline>
<codeline lineno="1610"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1611"><highlight class="normal"></highlight></codeline>
<codeline lineno="1636" refid="unionPACKED" refkind="compound"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">union<sp/></highlight><highlight class="normal"><ref refid="unionPACKED" kindref="compound">PACKED</ref><sp/>{</highlight></codeline>
<codeline lineno="1637"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1639" refid="unionPACKED_1ab16a07e887ef727e6085637bad928d45" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/><ref refid="unionPACKED_1ab16a07e887ef727e6085637bad928d45" kindref="member">fieldno</ref>;</highlight></codeline>
<codeline lineno="1641" refid="unionPACKED_1a4c3fa9f54c4da8295b2cdf3ca5f843ac" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/><ref refid="unionPACKED_1a4c3fa9f54c4da8295b2cdf3ca5f843ac" kindref="member">flags</ref>;</highlight></codeline>
<codeline lineno="1643" refid="unionPACKED_1ae1b4d9361929d8bc2b374a36a2133910" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="unionPACKED_1ae1b4d9361929d8bc2b374a36a2133910" kindref="member">field_type</ref>;</highlight></codeline>
<codeline lineno="1645" refid="unionPACKED_1abe5b199132aa0fc5215b5933e8b7c8c6" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="unionPACKED_1abe5b199132aa0fc5215b5933e8b7c8c6" kindref="member">collation</ref>;</highlight></codeline>
<codeline lineno="1665" refid="unionPACKED_1a47de0769ba4faf0a06782fd5e8892555" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="unionPACKED_1a47de0769ba4faf0a06782fd5e8892555" kindref="member">path</ref>;</highlight></codeline>
<codeline lineno="1666"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="1671" refid="unionPACKED_1a1782075c62f8d5e3b0f6a87c8382d373" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><ref refid="unionPACKED_1a1782075c62f8d5e3b0f6a87c8382d373" kindref="member">padding</ref>[BOX_KEY_PART_DEF_T_SIZE];</highlight></codeline>
<codeline lineno="1672"><highlight class="normal">}<sp/><ref refid="module_8h_1a302d3f85cf14f03ace911e9541c95c4d" kindref="member">box_key_part_def_t</ref>;</highlight></codeline>
<codeline lineno="1673"><highlight class="normal"></highlight></codeline>
<codeline lineno="1686"><highlight class="normal"><ref refid="module_8h_1a5e3652cae8b48c1ad174f0b06bbd06d0" kindref="member">API_EXPORT</ref><sp/><ref refid="module_8h_1acfbe4043908ad1b4a106689ad2da8814" kindref="member">box_key_def_t</ref><sp/>*</highlight></codeline>
<codeline lineno="1687"><highlight class="normal"><ref refid="module_8h_1aa6977b1c26a2a187c8d4de4e93799186" kindref="member">box_key_def_new</ref>(uint32_t<sp/>*fields,<sp/>uint32_t<sp/>*types,<sp/>uint32_t<sp/>part_count);</highlight></codeline>
<codeline lineno="1688"><highlight class="normal"></highlight></codeline>
<codeline lineno="1720"><highlight class="normal"><ref refid="module_8h_1a5e3652cae8b48c1ad174f0b06bbd06d0" kindref="member">API_EXPORT</ref><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1721"><highlight class="normal"><ref refid="module_8h_1a52f751905f893144ead356172137e796" kindref="member">box_key_part_def_create</ref>(<ref refid="unionPACKED" kindref="compound">box_key_part_def_t</ref><sp/>*part);</highlight></codeline>
<codeline lineno="1722"><highlight class="normal"></highlight></codeline>
<codeline lineno="1735"><highlight class="normal"><ref refid="module_8h_1a5e3652cae8b48c1ad174f0b06bbd06d0" kindref="member">API_EXPORT</ref><sp/><ref refid="module_8h_1acfbe4043908ad1b4a106689ad2da8814" kindref="member">box_key_def_t</ref><sp/>*</highlight></codeline>
<codeline lineno="1736"><highlight class="normal"><ref refid="module_8h_1a3591006ff571eb1ac2b05f5e41a8a8ca" kindref="member">box_key_def_new_v2</ref>(<ref refid="unionPACKED" kindref="compound">box_key_part_def_t</ref><sp/>*parts,<sp/>uint32_t<sp/>part_count);</highlight></codeline>
<codeline lineno="1737"><highlight class="normal"></highlight></codeline>
<codeline lineno="1745"><highlight class="normal"><ref refid="module_8h_1a5e3652cae8b48c1ad174f0b06bbd06d0" kindref="member">API_EXPORT</ref><sp/><ref refid="module_8h_1acfbe4043908ad1b4a106689ad2da8814" kindref="member">box_key_def_t</ref><sp/>*</highlight></codeline>
<codeline lineno="1746"><highlight class="normal"><ref refid="module_8h_1af072fd108644a06c68d5ba1f74efb460" kindref="member">box_key_def_dup</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="module_8h_1acfbe4043908ad1b4a106689ad2da8814" kindref="member">box_key_def_t</ref><sp/>*key_def);</highlight></codeline>
<codeline lineno="1747"><highlight class="normal"></highlight></codeline>
<codeline lineno="1753"><highlight class="normal"><ref refid="module_8h_1a5e3652cae8b48c1ad174f0b06bbd06d0" kindref="member">API_EXPORT</ref><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1754"><highlight class="normal"><ref refid="module_8h_1a82fdf05e0d276baa072123358c29e046" kindref="member">box_key_def_delete</ref>(<ref refid="module_8h_1acfbe4043908ad1b4a106689ad2da8814" kindref="member">box_key_def_t</ref><sp/>*key_def);</highlight></codeline>
<codeline lineno="1755"><highlight class="normal"></highlight></codeline>
<codeline lineno="1769"><highlight class="normal"><ref refid="module_8h_1a5e3652cae8b48c1ad174f0b06bbd06d0" kindref="member">API_EXPORT</ref><sp/><ref refid="unionPACKED" kindref="compound">box_key_part_def_t</ref><sp/>*</highlight></codeline>
<codeline lineno="1770"><highlight class="normal"><ref refid="module_8h_1ab6ea5a24503d921ba39fab504eac17fe" kindref="member">box_key_def_dump_parts</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="module_8h_1acfbe4043908ad1b4a106689ad2da8814" kindref="member">box_key_def_t</ref><sp/>*key_def,<sp/>uint32_t<sp/>*part_count_ptr);</highlight></codeline>
<codeline lineno="1771"><highlight class="normal"></highlight></codeline>
<codeline lineno="1784"><highlight class="normal"><ref refid="module_8h_1a5e3652cae8b48c1ad174f0b06bbd06d0" kindref="member">API_EXPORT</ref><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1785"><highlight class="normal"><ref refid="module_8h_1a3c01aea33b0593fd1b84243be7033469" kindref="member">box_key_def_validate_tuple</ref>(<ref refid="module_8h_1acfbe4043908ad1b4a106689ad2da8814" kindref="member">box_key_def_t</ref><sp/>*key_def,<sp/><ref refid="module_8h_1a880c3e1e8e63b9a12353853fb6aefa3f" kindref="member">box_tuple_t</ref><sp/>*tuple);</highlight></codeline>
<codeline lineno="1786"><highlight class="normal"></highlight></codeline>
<codeline lineno="1796"><highlight class="normal"><ref refid="module_8h_1a5e3652cae8b48c1ad174f0b06bbd06d0" kindref="member">API_EXPORT</ref><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1797"><highlight class="normal"><ref refid="module_8h_1a88b978e168708341cb358a15c5e42430" kindref="member">box_tuple_compare</ref>(<ref refid="module_8h_1a880c3e1e8e63b9a12353853fb6aefa3f" kindref="member">box_tuple_t</ref><sp/>*tuple_a,<sp/><ref refid="module_8h_1a880c3e1e8e63b9a12353853fb6aefa3f" kindref="member">box_tuple_t</ref><sp/>*tuple_b,</highlight></codeline>
<codeline lineno="1798"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="module_8h_1acfbe4043908ad1b4a106689ad2da8814" kindref="member">box_key_def_t</ref><sp/>*key_def);</highlight></codeline>
<codeline lineno="1799"><highlight class="normal"></highlight></codeline>
<codeline lineno="1811"><highlight class="normal"><ref refid="module_8h_1a5e3652cae8b48c1ad174f0b06bbd06d0" kindref="member">API_EXPORT</ref><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1812"><highlight class="normal"><ref refid="module_8h_1ae8fec3862fabe2eb885bb71517b99a5f" kindref="member">box_tuple_compare_with_key</ref>(<ref refid="module_8h_1a880c3e1e8e63b9a12353853fb6aefa3f" kindref="member">box_tuple_t</ref><sp/>*tuple_a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*key_b,</highlight></codeline>
<codeline lineno="1813"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="module_8h_1acfbe4043908ad1b4a106689ad2da8814" kindref="member">box_key_def_t</ref><sp/>*key_def);</highlight></codeline>
<codeline lineno="1814"><highlight class="normal"></highlight></codeline>
<codeline lineno="1829"><highlight class="normal"><ref refid="module_8h_1a5e3652cae8b48c1ad174f0b06bbd06d0" kindref="member">API_EXPORT</ref><sp/><ref refid="module_8h_1acfbe4043908ad1b4a106689ad2da8814" kindref="member">box_key_def_t</ref><sp/>*</highlight></codeline>
<codeline lineno="1830"><highlight class="normal"><ref refid="module_8h_1ad2ee8761b613b5a518f94dc7f2ca0073" kindref="member">box_key_def_merge</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="module_8h_1acfbe4043908ad1b4a106689ad2da8814" kindref="member">box_key_def_t</ref><sp/>*first,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="module_8h_1acfbe4043908ad1b4a106689ad2da8814" kindref="member">box_key_def_t</ref><sp/>*second);</highlight></codeline>
<codeline lineno="1831"><highlight class="normal"></highlight></codeline>
<codeline lineno="1851"><highlight class="normal"><ref refid="module_8h_1a5e3652cae8b48c1ad174f0b06bbd06d0" kindref="member">API_EXPORT</ref><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*</highlight></codeline>
<codeline lineno="1852"><highlight class="normal"><ref refid="module_8h_1a28e3e05887ff307b8ac5390f70f60158" kindref="member">box_key_def_extract_key</ref>(<ref refid="module_8h_1acfbe4043908ad1b4a106689ad2da8814" kindref="member">box_key_def_t</ref><sp/>*key_def,<sp/><ref refid="module_8h_1a880c3e1e8e63b9a12353853fb6aefa3f" kindref="member">box_tuple_t</ref><sp/>*tuple,</highlight></codeline>
<codeline lineno="1853"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>multikey_idx,<sp/>uint32_t<sp/>*key_size_ptr);</highlight></codeline>
<codeline lineno="1854"><highlight class="normal"></highlight></codeline>
<codeline lineno="1877"><highlight class="normal"><ref refid="module_8h_1a5e3652cae8b48c1ad174f0b06bbd06d0" kindref="member">API_EXPORT</ref><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1878"><highlight class="normal"><ref refid="module_8h_1a32868fa25087aa7d7249fd2692a0ac52" kindref="member">box_key_def_validate_key</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="module_8h_1acfbe4043908ad1b4a106689ad2da8814" kindref="member">box_key_def_t</ref><sp/>*key_def,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*key,</highlight></codeline>
<codeline lineno="1879"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>*key_size_ptr);</highlight></codeline>
<codeline lineno="1880"><highlight class="normal"></highlight></codeline>
<codeline lineno="1902"><highlight class="normal"><ref refid="module_8h_1a5e3652cae8b48c1ad174f0b06bbd06d0" kindref="member">API_EXPORT</ref><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1903"><highlight class="normal"><ref refid="module_8h_1a237492509ee5f9e478b72077c4c65833" kindref="member">box_key_def_validate_full_key</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="module_8h_1acfbe4043908ad1b4a106689ad2da8814" kindref="member">box_key_def_t</ref><sp/>*key_def,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*key,</highlight></codeline>
<codeline lineno="1904"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>*key_size_ptr);</highlight></codeline>
<codeline lineno="1905"><highlight class="normal"></highlight></codeline>
<codeline lineno="1909"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1910"><highlight class="comment"><sp/>*<sp/>Possible<sp/>field<sp/>data<sp/>types.<sp/>Can&apos;t<sp/>use<sp/>STRS/ENUM<sp/>macros<sp/>for<sp/>them,</highlight></codeline>
<codeline lineno="1911"><highlight class="comment"><sp/>*<sp/>since<sp/>there<sp/>is<sp/>a<sp/>mismatch<sp/>between<sp/>enum<sp/>name<sp/>(STRING)<sp/>and<sp/>type</highlight></codeline>
<codeline lineno="1912"><highlight class="comment"><sp/>*<sp/>name<sp/>literal<sp/>(&quot;STR&quot;).<sp/>STR<sp/>is<sp/>already<sp/>used<sp/>as<sp/>Objective<sp/>C<sp/>type.</highlight></codeline>
<codeline lineno="1913"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1914" refid="module_8h_1af4e6ca114114786cc23f3d5a1f8d14bf" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/><ref refid="module_8h_1af4e6ca114114786cc23f3d5a1f8d14bf" kindref="member">field_type</ref><sp/>{</highlight></codeline>
<codeline lineno="1915"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FIELD_TYPE_ANY<sp/>=<sp/>0,</highlight></codeline>
<codeline lineno="1916"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FIELD_TYPE_UNSIGNED,</highlight></codeline>
<codeline lineno="1917"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FIELD_TYPE_STRING,</highlight></codeline>
<codeline lineno="1918"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FIELD_TYPE_NUMBER,</highlight></codeline>
<codeline lineno="1919"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FIELD_TYPE_DOUBLE,</highlight></codeline>
<codeline lineno="1920"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FIELD_TYPE_INTEGER,</highlight></codeline>
<codeline lineno="1921"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FIELD_TYPE_BOOLEAN,</highlight></codeline>
<codeline lineno="1922"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FIELD_TYPE_VARBINARY,</highlight></codeline>
<codeline lineno="1923"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FIELD_TYPE_SCALAR,</highlight></codeline>
<codeline lineno="1924"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FIELD_TYPE_DECIMAL,</highlight></codeline>
<codeline lineno="1925"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FIELD_TYPE_UUID,</highlight></codeline>
<codeline lineno="1926"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FIELD_TYPE_DATETIME,</highlight></codeline>
<codeline lineno="1927"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FIELD_TYPE_INTERVAL,</highlight></codeline>
<codeline lineno="1928"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FIELD_TYPE_ARRAY,</highlight></codeline>
<codeline lineno="1929"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FIELD_TYPE_MAP,</highlight></codeline>
<codeline lineno="1930"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>field_type_MAX</highlight></codeline>
<codeline lineno="1931"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1932"><highlight class="normal"></highlight></codeline>
<codeline lineno="1933"><highlight class="normal"></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>on_conflict_action<sp/>{</highlight></codeline>
<codeline lineno="1934"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ON_CONFLICT_ACTION_NONE<sp/>=<sp/>0,</highlight></codeline>
<codeline lineno="1935"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ON_CONFLICT_ACTION_ROLLBACK,</highlight></codeline>
<codeline lineno="1936"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ON_CONFLICT_ACTION_ABORT,</highlight></codeline>
<codeline lineno="1937"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ON_CONFLICT_ACTION_FAIL,</highlight></codeline>
<codeline lineno="1938"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ON_CONFLICT_ACTION_IGNORE,</highlight></codeline>
<codeline lineno="1939"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ON_CONFLICT_ACTION_REPLACE,</highlight></codeline>
<codeline lineno="1940"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ON_CONFLICT_ACTION_DEFAULT,</highlight></codeline>
<codeline lineno="1941"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>on_conflict_action_MAX</highlight></codeline>
<codeline lineno="1942"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1943"><highlight class="normal"></highlight></codeline>
<codeline lineno="1955"><highlight class="normal"><ref refid="module_8h_1ab230ff08fb24d580407126fc905cc271" kindref="member">box_tuple_format_t</ref><sp/>*</highlight></codeline>
<codeline lineno="1956"><highlight class="normal"><ref refid="module_8h_1a1515eaa49be2b9990eab5fff279600be" kindref="member">box_tuple_format_new</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>key_def<sp/>**keys,<sp/>uint16_t<sp/>key_count);</highlight></codeline>
<codeline lineno="1957"><highlight class="normal"></highlight></codeline>
<codeline lineno="1963"><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1964"><highlight class="normal"><ref refid="module_8h_1acc998b676589a854eaf71e2e1fd4debc" kindref="member">box_tuple_format_ref</ref>(<ref refid="module_8h_1ab230ff08fb24d580407126fc905cc271" kindref="member">box_tuple_format_t</ref><sp/>*format);</highlight></codeline>
<codeline lineno="1965"><highlight class="normal"></highlight></codeline>
<codeline lineno="1971"><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1972"><highlight class="normal"><ref refid="module_8h_1a134eab27cb960c030d553d3881d8d074" kindref="member">box_tuple_format_unref</ref>(<ref refid="module_8h_1ab230ff08fb24d580407126fc905cc271" kindref="member">box_tuple_format_t</ref><sp/>*format);</highlight></codeline>
<codeline lineno="1973"><highlight class="normal"></highlight></codeline>
<codeline lineno="1976"><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1978" refid="module_8h_1abc6126af1d45847bc59afa0aa3216b04a05cae1bfc9671a38779ffd9dde4d7f58" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="module_8h_1abc6126af1d45847bc59afa0aa3216b04a05cae1bfc9671a38779ffd9dde4d7f58" kindref="member">BOX_SYSTEM_ID_MIN</ref><sp/>=<sp/>256,</highlight></codeline>
<codeline lineno="1980" refid="module_8h_1abc6126af1d45847bc59afa0aa3216b04ab14386b6fac3c938ed3a3b614510bb72" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="module_8h_1abc6126af1d45847bc59afa0aa3216b04ab14386b6fac3c938ed3a3b614510bb72" kindref="member">BOX_VINYL_DEFERRED_DELETE_ID</ref><sp/>=<sp/>257,</highlight></codeline>
<codeline lineno="1982" refid="module_8h_1abc6126af1d45847bc59afa0aa3216b04a97f8ff937bc22208ebe19175eb0016a0" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="module_8h_1abc6126af1d45847bc59afa0aa3216b04a97f8ff937bc22208ebe19175eb0016a0" kindref="member">BOX_SCHEMA_ID</ref><sp/>=<sp/>272,</highlight></codeline>
<codeline lineno="1984" refid="module_8h_1abc6126af1d45847bc59afa0aa3216b04a3bcd934a5e27f4aee628e875fd422af5" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="module_8h_1abc6126af1d45847bc59afa0aa3216b04a3bcd934a5e27f4aee628e875fd422af5" kindref="member">BOX_COLLATION_ID</ref><sp/>=<sp/>276,</highlight></codeline>
<codeline lineno="1986" refid="module_8h_1abc6126af1d45847bc59afa0aa3216b04a3879bb29a2f51b4de4a923e4d6ba1b63" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="module_8h_1abc6126af1d45847bc59afa0aa3216b04a3879bb29a2f51b4de4a923e4d6ba1b63" kindref="member">BOX_VCOLLATION_ID</ref><sp/>=<sp/>277,</highlight></codeline>
<codeline lineno="1988" refid="module_8h_1abc6126af1d45847bc59afa0aa3216b04a2f5e17bb60cab866ec35b516c75c686a" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="module_8h_1abc6126af1d45847bc59afa0aa3216b04a2f5e17bb60cab866ec35b516c75c686a" kindref="member">BOX_SPACE_ID</ref><sp/>=<sp/>280,</highlight></codeline>
<codeline lineno="1990" refid="module_8h_1abc6126af1d45847bc59afa0aa3216b04abd4d512ca7fdebf9ec1a6bf7f11e1840" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="module_8h_1abc6126af1d45847bc59afa0aa3216b04abd4d512ca7fdebf9ec1a6bf7f11e1840" kindref="member">BOX_VSPACE_ID</ref><sp/>=<sp/>281,</highlight></codeline>
<codeline lineno="1992" refid="module_8h_1abc6126af1d45847bc59afa0aa3216b04a43c8f5e53b0c9db9be2da424c152cec9" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="module_8h_1abc6126af1d45847bc59afa0aa3216b04a43c8f5e53b0c9db9be2da424c152cec9" kindref="member">BOX_SEQUENCE_ID</ref><sp/>=<sp/>284,</highlight></codeline>
<codeline lineno="1994" refid="module_8h_1abc6126af1d45847bc59afa0aa3216b04ad41b03d39d656d7612c911d8a60582c3" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="module_8h_1abc6126af1d45847bc59afa0aa3216b04ad41b03d39d656d7612c911d8a60582c3" kindref="member">BOX_SEQUENCE_DATA_ID</ref><sp/>=<sp/>285,</highlight></codeline>
<codeline lineno="1996" refid="module_8h_1abc6126af1d45847bc59afa0aa3216b04adb9d519142826402c9efc166df12428e" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="module_8h_1abc6126af1d45847bc59afa0aa3216b04adb9d519142826402c9efc166df12428e" kindref="member">BOX_VSEQUENCE_ID</ref><sp/>=<sp/>286,</highlight></codeline>
<codeline lineno="1998" refid="module_8h_1abc6126af1d45847bc59afa0aa3216b04a482bf0fb6fc52ff01f40edb92705c95f" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="module_8h_1abc6126af1d45847bc59afa0aa3216b04a482bf0fb6fc52ff01f40edb92705c95f" kindref="member">BOX_INDEX_ID</ref><sp/>=<sp/>288,</highlight></codeline>
<codeline lineno="2000" refid="module_8h_1abc6126af1d45847bc59afa0aa3216b04ac27ac3d0508d4e5f19f91053f7971cb7" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="module_8h_1abc6126af1d45847bc59afa0aa3216b04ac27ac3d0508d4e5f19f91053f7971cb7" kindref="member">BOX_VINDEX_ID</ref><sp/>=<sp/>289,</highlight></codeline>
<codeline lineno="2002" refid="module_8h_1abc6126af1d45847bc59afa0aa3216b04a744b39a5e9efc8559776daba88b01dd3" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="module_8h_1abc6126af1d45847bc59afa0aa3216b04a744b39a5e9efc8559776daba88b01dd3" kindref="member">BOX_FUNC_ID</ref><sp/>=<sp/>296,</highlight></codeline>
<codeline lineno="2004" refid="module_8h_1abc6126af1d45847bc59afa0aa3216b04a8cb7f39326f7dfc0afcf9dc32f5314da" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="module_8h_1abc6126af1d45847bc59afa0aa3216b04a8cb7f39326f7dfc0afcf9dc32f5314da" kindref="member">BOX_VFUNC_ID</ref><sp/>=<sp/>297,</highlight></codeline>
<codeline lineno="2006" refid="module_8h_1abc6126af1d45847bc59afa0aa3216b04a0f673849e4f92136273e92af04637e81" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="module_8h_1abc6126af1d45847bc59afa0aa3216b04a0f673849e4f92136273e92af04637e81" kindref="member">BOX_USER_ID</ref><sp/>=<sp/>304,</highlight></codeline>
<codeline lineno="2008" refid="module_8h_1abc6126af1d45847bc59afa0aa3216b04ab508bf1accff87e8422bb32785e505bb" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="module_8h_1abc6126af1d45847bc59afa0aa3216b04ab508bf1accff87e8422bb32785e505bb" kindref="member">BOX_VUSER_ID</ref><sp/>=<sp/>305,</highlight></codeline>
<codeline lineno="2010" refid="module_8h_1abc6126af1d45847bc59afa0aa3216b04a1bbd73fc6936dfa1977c7ea18677c4f9" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="module_8h_1abc6126af1d45847bc59afa0aa3216b04a1bbd73fc6936dfa1977c7ea18677c4f9" kindref="member">BOX_PRIV_ID</ref><sp/>=<sp/>312,</highlight></codeline>
<codeline lineno="2012" refid="module_8h_1abc6126af1d45847bc59afa0aa3216b04a37bb51c69ca47d95c4ce5777c9640613" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="module_8h_1abc6126af1d45847bc59afa0aa3216b04a37bb51c69ca47d95c4ce5777c9640613" kindref="member">BOX_VPRIV_ID</ref><sp/>=<sp/>313,</highlight></codeline>
<codeline lineno="2014" refid="module_8h_1abc6126af1d45847bc59afa0aa3216b04ab05d38e39c97e255ecaf3e48db943d62" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="module_8h_1abc6126af1d45847bc59afa0aa3216b04ab05d38e39c97e255ecaf3e48db943d62" kindref="member">BOX_CLUSTER_ID</ref><sp/>=<sp/>320,</highlight></codeline>
<codeline lineno="2016" refid="module_8h_1abc6126af1d45847bc59afa0aa3216b04add17b7c9ec4c6322a8344e00e8c25c62" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="module_8h_1abc6126af1d45847bc59afa0aa3216b04add17b7c9ec4c6322a8344e00e8c25c62" kindref="member">BOX_TRIGGER_ID</ref><sp/>=<sp/>328,</highlight></codeline>
<codeline lineno="2018" refid="module_8h_1abc6126af1d45847bc59afa0aa3216b04a41c61daeecfce31f01f55ac6eb971f72" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="module_8h_1abc6126af1d45847bc59afa0aa3216b04a41c61daeecfce31f01f55ac6eb971f72" kindref="member">BOX_TRUNCATE_ID</ref><sp/>=<sp/>330,</highlight></codeline>
<codeline lineno="2020" refid="module_8h_1abc6126af1d45847bc59afa0aa3216b04ad4db1b50b1f6446f75a8db82e0327374" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="module_8h_1abc6126af1d45847bc59afa0aa3216b04ad4db1b50b1f6446f75a8db82e0327374" kindref="member">BOX_SPACE_SEQUENCE_ID</ref><sp/>=<sp/>340,</highlight></codeline>
<codeline lineno="2022" refid="module_8h_1abc6126af1d45847bc59afa0aa3216b04a99e954bd1de658ba6586d7354fe06378" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="module_8h_1abc6126af1d45847bc59afa0aa3216b04a99e954bd1de658ba6586d7354fe06378" kindref="member">BOX_FK_CONSTRAINT_ID</ref><sp/>=<sp/>356,</highlight></codeline>
<codeline lineno="2024" refid="module_8h_1abc6126af1d45847bc59afa0aa3216b04ae97c7da44f193fcfea35afe2dfe98dc8" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="module_8h_1abc6126af1d45847bc59afa0aa3216b04ae97c7da44f193fcfea35afe2dfe98dc8" kindref="member">BOX_CK_CONSTRAINT_ID</ref><sp/>=<sp/>364,</highlight></codeline>
<codeline lineno="2026" refid="module_8h_1abc6126af1d45847bc59afa0aa3216b04a5590980099004e7b53cd73cd5418f98b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="module_8h_1abc6126af1d45847bc59afa0aa3216b04a5590980099004e7b53cd73cd5418f98b" kindref="member">BOX_FUNC_INDEX_ID</ref><sp/>=<sp/>372,</highlight></codeline>
<codeline lineno="2028" refid="module_8h_1abc6126af1d45847bc59afa0aa3216b04a03e08a677af627a4199839a08b9020e8" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="module_8h_1abc6126af1d45847bc59afa0aa3216b04a03e08a677af627a4199839a08b9020e8" kindref="member">BOX_SESSION_SETTINGS_ID</ref><sp/>=<sp/>380,</highlight></codeline>
<codeline lineno="2030" refid="module_8h_1abc6126af1d45847bc59afa0aa3216b04abb87df1b61192ee3aea178534071b9cd" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="module_8h_1abc6126af1d45847bc59afa0aa3216b04abb87df1b61192ee3aea178534071b9cd" kindref="member">BOX_SYSTEM_ID_MAX</ref><sp/>=<sp/>511,</highlight></codeline>
<codeline lineno="2031"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BOX_ID_NIL<sp/>=<sp/>2147483647</highlight></codeline>
<codeline lineno="2032"><highlight class="normal">};</highlight></codeline>
<codeline lineno="2036"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2037"><highlight class="comment"><sp/>*<sp/>Opaque<sp/>structure<sp/>passed<sp/>to<sp/>the<sp/>stored<sp/>C<sp/>procedure</highlight></codeline>
<codeline lineno="2038"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2039" refid="module_8h_1aa37ca06842be0fe827d5272493e2311f" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">box_function_ctx<sp/><ref refid="module_8h_1aa37ca06842be0fe827d5272493e2311f" kindref="member">box_function_ctx_t</ref>;</highlight></codeline>
<codeline lineno="2040"><highlight class="normal"></highlight></codeline>
<codeline lineno="2052"><highlight class="normal"><ref refid="module_8h_1a5e3652cae8b48c1ad174f0b06bbd06d0" kindref="member">API_EXPORT</ref><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2053"><highlight class="normal"><ref refid="module_8h_1a7fb00cd4eac4d388d58e9e5ef1ea1b3f" kindref="member">box_return_tuple</ref>(<ref refid="module_8h_1aa37ca06842be0fe827d5272493e2311f" kindref="member">box_function_ctx_t</ref><sp/>*ctx,<sp/><ref refid="module_8h_1a880c3e1e8e63b9a12353853fb6aefa3f" kindref="member">box_tuple_t</ref><sp/>*tuple);</highlight></codeline>
<codeline lineno="2054"><highlight class="normal"></highlight></codeline>
<codeline lineno="2071"><highlight class="normal"><ref refid="module_8h_1a5e3652cae8b48c1ad174f0b06bbd06d0" kindref="member">API_EXPORT</ref><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2072"><highlight class="normal"><ref refid="module_8h_1a96bf7ae13f994a18d2f9dcf7816578ca" kindref="member">box_return_mp</ref>(<ref refid="module_8h_1aa37ca06842be0fe827d5272493e2311f" kindref="member">box_function_ctx_t</ref><sp/>*ctx,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*mp,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*mp_end);</highlight></codeline>
<codeline lineno="2073"><highlight class="normal"></highlight></codeline>
<codeline lineno="2084"><highlight class="normal"><ref refid="module_8h_1a5e3652cae8b48c1ad174f0b06bbd06d0" kindref="member">API_EXPORT</ref><sp/>uint32_t</highlight></codeline>
<codeline lineno="2085"><highlight class="normal"><ref refid="module_8h_1a4a816d0fc386d810b874b50db1f50293" kindref="member">box_space_id_by_name</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*name,<sp/>uint32_t<sp/>len);</highlight></codeline>
<codeline lineno="2086"><highlight class="normal"></highlight></codeline>
<codeline lineno="2098"><highlight class="normal"><ref refid="module_8h_1a5e3652cae8b48c1ad174f0b06bbd06d0" kindref="member">API_EXPORT</ref><sp/>uint32_t</highlight></codeline>
<codeline lineno="2099"><highlight class="normal"><ref refid="module_8h_1a4abb8381625fb1364af63d58a0235b3a" kindref="member">box_index_id_by_name</ref>(uint32_t<sp/>space_id,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*name,<sp/>uint32_t<sp/>len);</highlight></codeline>
<codeline lineno="2100"><highlight class="normal"></highlight></codeline>
<codeline lineno="2112"><highlight class="normal"><ref refid="module_8h_1a5e3652cae8b48c1ad174f0b06bbd06d0" kindref="member">API_EXPORT</ref><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2113"><highlight class="normal"><ref refid="module_8h_1a08571f03c05abf96fd6e98a590d78822" kindref="member">box_insert</ref>(uint32_t<sp/>space_id,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*tuple,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*tuple_end,</highlight></codeline>
<codeline lineno="2114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="module_8h_1a880c3e1e8e63b9a12353853fb6aefa3f" kindref="member">box_tuple_t</ref><sp/>**result);</highlight></codeline>
<codeline lineno="2115"><highlight class="normal"></highlight></codeline>
<codeline lineno="2127"><highlight class="normal"><ref refid="module_8h_1a5e3652cae8b48c1ad174f0b06bbd06d0" kindref="member">API_EXPORT</ref><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2128"><highlight class="normal"><ref refid="module_8h_1a933b6e9cbf9d4fc05e3964b0949b5bd0" kindref="member">box_replace</ref>(uint32_t<sp/>space_id,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*tuple,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*tuple_end,</highlight></codeline>
<codeline lineno="2129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="module_8h_1a880c3e1e8e63b9a12353853fb6aefa3f" kindref="member">box_tuple_t</ref><sp/>**result);</highlight></codeline>
<codeline lineno="2130"><highlight class="normal"></highlight></codeline>
<codeline lineno="2143"><highlight class="normal"><ref refid="module_8h_1a5e3652cae8b48c1ad174f0b06bbd06d0" kindref="member">API_EXPORT</ref><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2144"><highlight class="normal"><ref refid="module_8h_1a740bf8f0f5f912dfa78221c9fe5f21bb" kindref="member">box_delete</ref>(uint32_t<sp/>space_id,<sp/>uint32_t<sp/>index_id,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*key,</highlight></codeline>
<codeline lineno="2145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*key_end,<sp/><ref refid="module_8h_1a880c3e1e8e63b9a12353853fb6aefa3f" kindref="member">box_tuple_t</ref><sp/>**result);</highlight></codeline>
<codeline lineno="2146"><highlight class="normal"></highlight></codeline>
<codeline lineno="2165"><highlight class="normal"><ref refid="module_8h_1a5e3652cae8b48c1ad174f0b06bbd06d0" kindref="member">API_EXPORT</ref><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2166"><highlight class="normal"><ref refid="module_8h_1a9badf4d5cc54e424a157439fcb58b96a" kindref="member">box_update</ref>(uint32_t<sp/>space_id,<sp/>uint32_t<sp/>index_id,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*key,</highlight></codeline>
<codeline lineno="2167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*key_end,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*ops,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*ops_end,</highlight></codeline>
<codeline lineno="2168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index_base,<sp/><ref refid="module_8h_1a880c3e1e8e63b9a12353853fb6aefa3f" kindref="member">box_tuple_t</ref><sp/>**result);</highlight></codeline>
<codeline lineno="2169"><highlight class="normal"></highlight></codeline>
<codeline lineno="2188"><highlight class="normal"><ref refid="module_8h_1a5e3652cae8b48c1ad174f0b06bbd06d0" kindref="member">API_EXPORT</ref><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2189"><highlight class="normal"><ref refid="module_8h_1a268a03389cd856206f0ddfc90f3cbf84" kindref="member">box_upsert</ref>(uint32_t<sp/>space_id,<sp/>uint32_t<sp/>index_id,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*tuple,</highlight></codeline>
<codeline lineno="2190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*tuple_end,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*ops,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*ops_end,</highlight></codeline>
<codeline lineno="2191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index_base,<sp/><ref refid="module_8h_1a880c3e1e8e63b9a12353853fb6aefa3f" kindref="member">box_tuple_t</ref><sp/>**result);</highlight></codeline>
<codeline lineno="2192"><highlight class="normal"></highlight></codeline>
<codeline lineno="2198"><highlight class="normal"><ref refid="module_8h_1a5e3652cae8b48c1ad174f0b06bbd06d0" kindref="member">API_EXPORT</ref><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2199"><highlight class="normal"><ref refid="module_8h_1a20de21b171ded688588f1063ac04a9d3" kindref="member">box_truncate</ref>(uint32_t<sp/>space_id);</highlight></codeline>
<codeline lineno="2200"><highlight class="normal"></highlight></codeline>
<codeline lineno="2210"><highlight class="normal"><ref refid="module_8h_1a5e3652cae8b48c1ad174f0b06bbd06d0" kindref="member">API_EXPORT</ref><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2211"><highlight class="normal"><ref refid="module_8h_1a3e5fd9116818749f73bf868d4e780256" kindref="member">box_sequence_next</ref>(uint32_t<sp/>seq_id,<sp/>int64_t<sp/>*result);</highlight></codeline>
<codeline lineno="2212"><highlight class="normal"></highlight></codeline>
<codeline lineno="2222"><highlight class="normal"><ref refid="module_8h_1a5e3652cae8b48c1ad174f0b06bbd06d0" kindref="member">API_EXPORT</ref><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2223"><highlight class="normal"><ref refid="module_8h_1a66ac5f1357a07acaae764e5d2e2e55fa" kindref="member">box_sequence_current</ref>(uint32_t<sp/>seq_id,<sp/>int64_t<sp/>*result);</highlight></codeline>
<codeline lineno="2224"><highlight class="normal"></highlight></codeline>
<codeline lineno="2234"><highlight class="normal"><ref refid="module_8h_1a5e3652cae8b48c1ad174f0b06bbd06d0" kindref="member">API_EXPORT</ref><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2235"><highlight class="normal"><ref refid="module_8h_1ac2243f60e2773d3522a540103f645110" kindref="member">box_sequence_set</ref>(uint32_t<sp/>seq_id,<sp/>int64_t<sp/>value);</highlight></codeline>
<codeline lineno="2236"><highlight class="normal"></highlight></codeline>
<codeline lineno="2244"><highlight class="normal"><ref refid="module_8h_1a5e3652cae8b48c1ad174f0b06bbd06d0" kindref="member">API_EXPORT</ref><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2245"><highlight class="normal"><ref refid="module_8h_1a8f9c3210df64b1f6fd89eb2c5e088e94" kindref="member">box_sequence_reset</ref>(uint32_t<sp/>seq_id);</highlight></codeline>
<codeline lineno="2246"><highlight class="normal"></highlight></codeline>
<codeline lineno="2258"><highlight class="normal"><ref refid="module_8h_1a5e3652cae8b48c1ad174f0b06bbd06d0" kindref="member">API_EXPORT</ref><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2259"><highlight class="normal"><ref refid="module_8h_1a0e9c91d463ce4aca081e5bd376aac1d9" kindref="member">box_session_push</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*data,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*data_end);</highlight></codeline>
<codeline lineno="2260"><highlight class="normal"></highlight></codeline>
<codeline lineno="2264" refid="module_8h_1a2b04d0397e455b7ed42b530c1c1ea9e6" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">iterator<sp/><ref refid="module_8h_1a2b04d0397e455b7ed42b530c1c1ea9e6" kindref="member">box_iterator_t</ref>;</highlight></codeline>
<codeline lineno="2265"><highlight class="normal"></highlight></codeline>
<codeline lineno="2281"><highlight class="normal"><ref refid="module_8h_1a2b04d0397e455b7ed42b530c1c1ea9e6" kindref="member">box_iterator_t</ref><sp/>*</highlight></codeline>
<codeline lineno="2282"><highlight class="normal"><ref refid="module_8h_1aab8b69829c8d89799a9fb0e5d360e84b" kindref="member">box_index_iterator</ref>(uint32_t<sp/>space_id,<sp/>uint32_t<sp/>index_id,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>type,</highlight></codeline>
<codeline lineno="2283"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*key,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*key_end);</highlight></codeline>
<codeline lineno="2292"><highlight class="keywordtype">int</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2293"><highlight class="normal"><ref refid="module_8h_1ae4361728e6abe6243e7f02b098e7b347" kindref="member">box_iterator_next</ref>(<ref refid="module_8h_1a2b04d0397e455b7ed42b530c1c1ea9e6" kindref="member">box_iterator_t</ref><sp/>*iterator,<sp/><ref refid="module_8h_1a880c3e1e8e63b9a12353853fb6aefa3f" kindref="member">box_tuple_t</ref><sp/>**result);</highlight></codeline>
<codeline lineno="2294"><highlight class="normal"></highlight></codeline>
<codeline lineno="2300"><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2301"><highlight class="normal"><ref refid="module_8h_1a6f7fe762b15009de313fdf915378429c" kindref="member">box_iterator_free</ref>(<ref refid="module_8h_1a2b04d0397e455b7ed42b530c1c1ea9e6" kindref="member">box_iterator_t</ref><sp/>*iterator);</highlight></codeline>
<codeline lineno="2302"><highlight class="normal"></highlight></codeline>
<codeline lineno="2311"><highlight class="normal">ssize_t</highlight></codeline>
<codeline lineno="2312"><highlight class="normal"><ref refid="module_8h_1a698d8991fa015a4b490f078b29e8d929" kindref="member">box_index_len</ref>(uint32_t<sp/>space_id,<sp/>uint32_t<sp/>index_id);</highlight></codeline>
<codeline lineno="2313"><highlight class="normal"></highlight></codeline>
<codeline lineno="2322"><highlight class="normal">ssize_t</highlight></codeline>
<codeline lineno="2323"><highlight class="normal"><ref refid="module_8h_1aaeda3d99d32c382bc5ac2bc8f0a09f48" kindref="member">box_index_bsize</ref>(uint32_t<sp/>space_id,<sp/>uint32_t<sp/>index_id);</highlight></codeline>
<codeline lineno="2324"><highlight class="normal"></highlight></codeline>
<codeline lineno="2336"><highlight class="keywordtype">int</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2337"><highlight class="normal"><ref refid="module_8h_1aa56e2bf2a5720259ea3997149ae53ca9" kindref="member">box_index_random</ref>(uint32_t<sp/>space_id,<sp/>uint32_t<sp/>index_id,<sp/>uint32_t<sp/>rnd,</highlight></codeline>
<codeline lineno="2338"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="module_8h_1a880c3e1e8e63b9a12353853fb6aefa3f" kindref="member">box_tuple_t</ref><sp/>**result);</highlight></codeline>
<codeline lineno="2339"><highlight class="normal"></highlight></codeline>
<codeline lineno="2356"><highlight class="keywordtype">int</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2357"><highlight class="normal"><ref refid="module_8h_1a5c9cedd4198d62ddfe6c77ef2bf89f56" kindref="member">box_index_get</ref>(uint32_t<sp/>space_id,<sp/>uint32_t<sp/>index_id,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*key,</highlight></codeline>
<codeline lineno="2358"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*key_end,<sp/><ref refid="module_8h_1a880c3e1e8e63b9a12353853fb6aefa3f" kindref="member">box_tuple_t</ref><sp/>**result);</highlight></codeline>
<codeline lineno="2359"><highlight class="normal"></highlight></codeline>
<codeline lineno="2372"><highlight class="keywordtype">int</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2373"><highlight class="normal"><ref refid="module_8h_1a4fbd278987613571a9d6475de6103a4f" kindref="member">box_index_min</ref>(uint32_t<sp/>space_id,<sp/>uint32_t<sp/>index_id,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*key,</highlight></codeline>
<codeline lineno="2374"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*key_end,<sp/><ref refid="module_8h_1a880c3e1e8e63b9a12353853fb6aefa3f" kindref="member">box_tuple_t</ref><sp/>**result);</highlight></codeline>
<codeline lineno="2375"><highlight class="normal"></highlight></codeline>
<codeline lineno="2388"><highlight class="keywordtype">int</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2389"><highlight class="normal"><ref refid="module_8h_1a044e5f79addcfd9c7312fe66e7be7514" kindref="member">box_index_max</ref>(uint32_t<sp/>space_id,<sp/>uint32_t<sp/>index_id,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*key,</highlight></codeline>
<codeline lineno="2390"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*key_end,<sp/><ref refid="module_8h_1a880c3e1e8e63b9a12353853fb6aefa3f" kindref="member">box_tuple_t</ref><sp/>**result);</highlight></codeline>
<codeline lineno="2391"><highlight class="normal"></highlight></codeline>
<codeline lineno="2405"><highlight class="normal">ssize_t</highlight></codeline>
<codeline lineno="2406"><highlight class="normal"><ref refid="module_8h_1a3f06a7df9e461267455477bd84ce02ed" kindref="member">box_index_count</ref>(uint32_t<sp/>space_id,<sp/>uint32_t<sp/>index_id,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>type,</highlight></codeline>
<codeline lineno="2407"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*key,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*key_end);</highlight></codeline>
<codeline lineno="2408"><highlight class="normal"></highlight></codeline>
<codeline lineno="2419"><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*</highlight></codeline>
<codeline lineno="2420"><highlight class="normal"><ref refid="module_8h_1a4b1314851b7b1ec2fab6908eaef71f52" kindref="member">box_tuple_extract_key</ref>(<ref refid="module_8h_1a880c3e1e8e63b9a12353853fb6aefa3f" kindref="member">box_tuple_t</ref><sp/>*tuple,<sp/>uint32_t<sp/>space_id,</highlight></codeline>
<codeline lineno="2421"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>index_id,<sp/>uint32_t<sp/>*key_size);</highlight></codeline>
<codeline lineno="2422"><highlight class="normal"></highlight></codeline>
<codeline lineno="2446" refid="module_8h_1a2693ce4bd8fa71e8ac1e5272fc64d17e" refkind="member"><highlight class="keyword">enum</highlight><highlight class="normal"><sp/><ref refid="module_8h_1a2693ce4bd8fa71e8ac1e5272fc64d17e" kindref="member">iterator_type</ref><sp/>{</highlight></codeline>
<codeline lineno="2447"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>ITER_EQ<sp/>must<sp/>be<sp/>the<sp/>first<sp/>member<sp/>for<sp/>request_create<sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2448"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ITER_EQ<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/><sp/>0,<sp/></highlight><highlight class="comment">/*<sp/>key<sp/>==<sp/>x<sp/>ASC<sp/>order<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2449"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ITER_REQ<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/><sp/>1,<sp/></highlight><highlight class="comment">/*<sp/>key<sp/>==<sp/>x<sp/>DESC<sp/>order<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2450"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ITER_ALL<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/><sp/>2,<sp/></highlight><highlight class="comment">/*<sp/>all<sp/>tuples<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2451"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ITER_LT<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/><sp/>3,<sp/></highlight><highlight class="comment">/*<sp/>key<sp/>&lt;<sp/><sp/>x<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2452"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ITER_LE<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/><sp/>4,<sp/></highlight><highlight class="comment">/*<sp/>key<sp/>&lt;=<sp/>x<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2453"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ITER_GE<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/><sp/>5,<sp/></highlight><highlight class="comment">/*<sp/>key<sp/>&gt;=<sp/>x<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2454"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ITER_GT<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/><sp/>6,<sp/></highlight><highlight class="comment">/*<sp/>key<sp/>&gt;<sp/><sp/>x<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2455"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ITER_BITS_ALL_SET<sp/><sp/><sp/><sp/><sp/>=<sp/><sp/>7,<sp/></highlight><highlight class="comment">/*<sp/>all<sp/>bits<sp/>from<sp/>x<sp/>are<sp/>set<sp/>in<sp/>key<sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2456"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ITER_BITS_ANY_SET<sp/><sp/><sp/><sp/><sp/>=<sp/><sp/>8,<sp/></highlight><highlight class="comment">/*<sp/>at<sp/>least<sp/>one<sp/>x&apos;s<sp/>bit<sp/>is<sp/>set<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2457"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ITER_BITS_ALL_NOT_SET<sp/>=<sp/><sp/>9,<sp/></highlight><highlight class="comment">/*<sp/>all<sp/>bits<sp/>are<sp/>not<sp/>set<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2458"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ITER_OVERLAPS<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>10,<sp/></highlight><highlight class="comment">/*<sp/>key<sp/>overlaps<sp/>x<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2459"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ITER_NEIGHBOR<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>11,<sp/></highlight><highlight class="comment">/*<sp/>tuples<sp/>in<sp/>distance<sp/>ascending<sp/>order<sp/>from<sp/>specified<sp/>point<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2460"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>iterator_type_MAX</highlight></codeline>
<codeline lineno="2461"><highlight class="normal">};</highlight></codeline>
<codeline lineno="2462"><highlight class="normal"></highlight></codeline>
<codeline lineno="2466"><highlight class="keyword">struct<sp/></highlight><highlight class="normal">error;</highlight></codeline>
<codeline lineno="2470" refid="module_8h_1ad49d5e355555804f6b46b79513715be8" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">error<sp/><ref refid="module_8h_1ad49d5e355555804f6b46b79513715be8" kindref="member">box_error_t</ref>;</highlight></codeline>
<codeline lineno="2471"><highlight class="normal"></highlight></codeline>
<codeline lineno="2477"><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*</highlight></codeline>
<codeline lineno="2478"><highlight class="normal"><ref refid="module_8h_1a9b58e493b5515222c6bb9c0393d092ce" kindref="member">box_error_type</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="module_8h_1ad49d5e355555804f6b46b79513715be8" kindref="member">box_error_t</ref><sp/>*error);</highlight></codeline>
<codeline lineno="2479"><highlight class="normal"></highlight></codeline>
<codeline lineno="2485"><highlight class="normal">uint32_t</highlight></codeline>
<codeline lineno="2486"><highlight class="normal"><ref refid="module_8h_1a029e9d16d637a97b37560ccf24c4adce" kindref="member">box_error_code</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="module_8h_1ad49d5e355555804f6b46b79513715be8" kindref="member">box_error_t</ref><sp/>*error);</highlight></codeline>
<codeline lineno="2487"><highlight class="normal"></highlight></codeline>
<codeline lineno="2493"><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*</highlight></codeline>
<codeline lineno="2494"><highlight class="normal"><ref refid="module_8h_1aff2a8679174320da6a54edc6df4681ae" kindref="member">box_error_message</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="module_8h_1ad49d5e355555804f6b46b79513715be8" kindref="member">box_error_t</ref><sp/>*error);</highlight></codeline>
<codeline lineno="2495"><highlight class="normal"></highlight></codeline>
<codeline lineno="2517"><highlight class="normal"><ref refid="module_8h_1ad49d5e355555804f6b46b79513715be8" kindref="member">box_error_t</ref><sp/>*</highlight></codeline>
<codeline lineno="2518"><highlight class="normal"><ref refid="module_8h_1af8f82c313ba49fc97782663ffba71f58" kindref="member">box_error_last</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2519"><highlight class="normal"></highlight></codeline>
<codeline lineno="2523"><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2524"><highlight class="normal"><ref refid="module_8h_1a1c2143635d7ff4aeb2ced40ffa033527" kindref="member">box_error_clear</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2525"><highlight class="normal"></highlight></codeline>
<codeline lineno="2536"><highlight class="keywordtype">int</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2537"><highlight class="normal"><ref refid="module_8h_1aa6e6803bc4309c3f59b93e2709cb418b" kindref="member">box_error_set</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*file,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>line,<sp/>uint32_t<sp/>code,</highlight></codeline>
<codeline lineno="2538"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*format,<sp/>...);</highlight></codeline>
<codeline lineno="2539"><highlight class="normal"></highlight></codeline>
<codeline lineno="2543" refid="module_8h_1aef61141a7db6fda3c9710bbc8c340e2e" refkind="member"><highlight class="preprocessor">#define<sp/>box_error_raise(code,<sp/>format,<sp/>...)<sp/>\</highlight></codeline>
<codeline lineno="2544"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>box_error_set(__FILE__,<sp/>__LINE__,<sp/>code,<sp/>format,<sp/>##__VA_ARGS__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2545"><highlight class="normal"></highlight></codeline>
<codeline lineno="2558"><highlight class="normal"><ref refid="module_8h_1a5e3652cae8b48c1ad174f0b06bbd06d0" kindref="member">API_EXPORT</ref><sp/><ref refid="module_8h_1a880c3e1e8e63b9a12353853fb6aefa3f" kindref="member">box_tuple_t</ref><sp/>*</highlight></codeline>
<codeline lineno="2559"><highlight class="normal"><ref refid="module_8h_1a6f106407ff1e6560bd8cba9b4698040d" kindref="member">luaT_checktuple</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>lua_State<sp/>*L,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>idx);</highlight></codeline>
<codeline lineno="2560"><highlight class="normal"></highlight></codeline>
<codeline lineno="2567"><highlight class="normal"><ref refid="module_8h_1a5e3652cae8b48c1ad174f0b06bbd06d0" kindref="member">API_EXPORT</ref><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2568"><highlight class="normal"><ref refid="module_8h_1a0ddb8bf7e1f41149fe67352de0f276d4" kindref="member">luaT_pushtuple</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>lua_State<sp/>*L,<sp/><ref refid="module_8h_1a880c3e1e8e63b9a12353853fb6aefa3f" kindref="member">box_tuple_t</ref><sp/>*tuple);</highlight></codeline>
<codeline lineno="2569"><highlight class="normal"></highlight></codeline>
<codeline lineno="2578"><highlight class="normal"><ref refid="module_8h_1a5e3652cae8b48c1ad174f0b06bbd06d0" kindref="member">API_EXPORT</ref><sp/><ref refid="module_8h_1a880c3e1e8e63b9a12353853fb6aefa3f" kindref="member">box_tuple_t</ref><sp/>*</highlight></codeline>
<codeline lineno="2579"><highlight class="normal"><ref refid="module_8h_1ab1dce37206b2951e42b76a9ce704f9f2" kindref="member">luaT_istuple</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>lua_State<sp/>*L,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>idx);</highlight></codeline>
<codeline lineno="2580"><highlight class="normal"></highlight></codeline>
<codeline lineno="2596"><highlight class="normal"><ref refid="module_8h_1a5e3652cae8b48c1ad174f0b06bbd06d0" kindref="member">API_EXPORT</ref><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*</highlight></codeline>
<codeline lineno="2597"><highlight class="normal"><ref refid="module_8h_1ab57d953ad39d6f1e0704a6c536b7ab60" kindref="member">luaT_tuple_encode</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>lua_State<sp/>*L,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>idx,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>*tuple_len_ptr);</highlight></codeline>
<codeline lineno="2598"><highlight class="normal"></highlight></codeline>
<codeline lineno="2617"><highlight class="normal"><ref refid="module_8h_1a5e3652cae8b48c1ad174f0b06bbd06d0" kindref="member">API_EXPORT</ref><sp/><ref refid="module_8h_1a880c3e1e8e63b9a12353853fb6aefa3f" kindref="member">box_tuple_t</ref><sp/>*</highlight></codeline>
<codeline lineno="2618"><highlight class="normal"><ref refid="module_8h_1a2a9365f857b2bb2b02d03b0c075fd793" kindref="member">luaT_tuple_new</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>lua_State<sp/>*L,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>idx,<sp/><ref refid="module_8h_1ab230ff08fb24d580407126fc905cc271" kindref="member">box_tuple_format_t</ref><sp/>*format);</highlight></codeline>
<codeline lineno="2619"><highlight class="normal"></highlight></codeline>
<codeline lineno="2626" refid="module_8h_1a923d13f137e4bdb8c852ea04637da58d" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">box_latch<sp/><ref refid="module_8h_1a923d13f137e4bdb8c852ea04637da58d" kindref="member">box_latch_t</ref>;</highlight></codeline>
<codeline lineno="2627"><highlight class="normal"></highlight></codeline>
<codeline lineno="2632"><highlight class="normal"><ref refid="module_8h_1a923d13f137e4bdb8c852ea04637da58d" kindref="member">box_latch_t</ref>*</highlight></codeline>
<codeline lineno="2633"><highlight class="normal"><ref refid="module_8h_1a7c106ac756a1b7fa422a72e71b379b0a" kindref="member">box_latch_new</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2634"><highlight class="normal"></highlight></codeline>
<codeline lineno="2639"><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2640"><highlight class="normal"><ref refid="module_8h_1a83a897e7386e946cd5ffd2ea1cb47a52" kindref="member">box_latch_delete</ref>(<ref refid="module_8h_1a923d13f137e4bdb8c852ea04637da58d" kindref="member">box_latch_t</ref><sp/>*latch);</highlight></codeline>
<codeline lineno="2641"><highlight class="normal"></highlight></codeline>
<codeline lineno="2648"><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2649"><highlight class="normal"><ref refid="module_8h_1aef397199dd9a19cb7b9362233a1d4a98" kindref="member">box_latch_lock</ref>(<ref refid="module_8h_1a923d13f137e4bdb8c852ea04637da58d" kindref="member">box_latch_t</ref><sp/>*latch);</highlight></codeline>
<codeline lineno="2650"><highlight class="normal"></highlight></codeline>
<codeline lineno="2657"><highlight class="keywordtype">int</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2658"><highlight class="normal"><ref refid="module_8h_1a294e53c819e91f172428d580a29f434f" kindref="member">box_latch_trylock</ref>(<ref refid="module_8h_1a923d13f137e4bdb8c852ea04637da58d" kindref="member">box_latch_t</ref><sp/>*latch);</highlight></codeline>
<codeline lineno="2659"><highlight class="normal"></highlight></codeline>
<codeline lineno="2666"><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2667"><highlight class="normal"><ref refid="module_8h_1a11dea9d7a0347d38956ed59f739c68ca" kindref="member">box_latch_unlock</ref>(<ref refid="module_8h_1a923d13f137e4bdb8c852ea04637da58d" kindref="member">box_latch_t</ref><sp/>*latch);</highlight></codeline>
<codeline lineno="2668"><highlight class="normal"></highlight></codeline>
<codeline lineno="2678"><highlight class="keywordtype">double</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2679"><highlight class="normal"><ref refid="module_8h_1a82b915cd0f2fbf8da0031594334d1161" kindref="member">clock_realtime</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2680"><highlight class="normal"></highlight></codeline>
<codeline lineno="2686"><highlight class="keywordtype">double</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2687"><highlight class="normal"><ref refid="module_8h_1a35900530fb24b7e882c37016b01603aa" kindref="member">clock_monotonic</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2688"><highlight class="normal"></highlight></codeline>
<codeline lineno="2695"><highlight class="keywordtype">double</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2696"><highlight class="normal"><ref refid="module_8h_1a7ecf77597c056216e310c34951bf21b9" kindref="member">clock_process</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2697"><highlight class="normal"></highlight></codeline>
<codeline lineno="2703"><highlight class="keywordtype">double</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2704"><highlight class="normal"><ref refid="module_8h_1aac6c5ad4ed25168dd171bd2f9d112d0d" kindref="member">clock_thread</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2705"><highlight class="normal"></highlight></codeline>
<codeline lineno="2710"><highlight class="normal">int64_t</highlight></codeline>
<codeline lineno="2711"><highlight class="normal"><ref refid="module_8h_1a3bbe6ebb913f8356f36c68e724473b45" kindref="member">clock_realtime64</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2712"><highlight class="normal"></highlight></codeline>
<codeline lineno="2717"><highlight class="normal">int64_t</highlight></codeline>
<codeline lineno="2718"><highlight class="normal"><ref refid="module_8h_1a29caad1a3f9995d2a2844a1d4672e3cd" kindref="member">clock_monotonic64</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2719"><highlight class="normal"></highlight></codeline>
<codeline lineno="2724"><highlight class="normal">int64_t</highlight></codeline>
<codeline lineno="2725"><highlight class="normal"><ref refid="module_8h_1a162cf2a3d31840c4a904d5c543980104" kindref="member">clock_process64</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2726"><highlight class="normal"></highlight></codeline>
<codeline lineno="2731"><highlight class="normal">int64_t</highlight></codeline>
<codeline lineno="2732"><highlight class="normal"><ref refid="module_8h_1afac4e0ab14aaaf4b7d101e28c55c18cf" kindref="member">clock_thread64</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2733"><highlight class="normal"></highlight></codeline>
<codeline lineno="2737"><highlight class="comment">/*<sp/>{{{<sp/>decimal<sp/>structure<sp/>and<sp/>constants<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2738"><highlight class="normal"></highlight></codeline>
<codeline lineno="2740" refid="structbox__decimal" refkind="compound"><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structbox__decimal" kindref="compound">box_decimal</ref><sp/>{</highlight></codeline>
<codeline lineno="2750" refid="structbox__decimal_1ab3c586f1f723be9d150e20c67ff0fa9b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint64_t<sp/></highlight><highlight class="keyword">internal</highlight><highlight class="normal">[8];</highlight></codeline>
<codeline lineno="2751"><highlight class="normal">};</highlight></codeline>
<codeline lineno="2752"><highlight class="normal"></highlight></codeline>
<codeline lineno="2779" refid="module_8h_1a90d26cf0c54dfa5e878e95ca0f73202a" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structbox__decimal" kindref="compound">box_decimal</ref><sp/><ref refid="structbox__decimal" kindref="compound">box_decimal_t</ref>;</highlight></codeline>
<codeline lineno="2780"><highlight class="normal"></highlight></codeline>
<codeline lineno="2785" refid="module_8h_1afd0415940d06f795e1f4dcfd40dd6c5b" refkind="member"><highlight class="preprocessor">#define<sp/>BOX_DECIMAL_STRING_BUFFER_SIZE<sp/>128</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2786"><highlight class="normal"></highlight></codeline>
<codeline lineno="2787"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>}}}<sp/>decimal<sp/>structure<sp/>and<sp/>constants<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2788"><highlight class="normal"></highlight></codeline>
<codeline lineno="2789"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>{{{<sp/>decimal<sp/>properties<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2790"><highlight class="normal"></highlight></codeline>
<codeline lineno="2802"><highlight class="normal"><ref refid="module_8h_1a5e3652cae8b48c1ad174f0b06bbd06d0" kindref="member">API_EXPORT</ref><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2803"><highlight class="normal"><ref refid="module_8h_1a1815f3add53077a6f1383db1d9347c99" kindref="member">box_decimal_precision</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbox__decimal" kindref="compound">box_decimal_t</ref><sp/>*dec);</highlight></codeline>
<codeline lineno="2804"><highlight class="normal"></highlight></codeline>
<codeline lineno="2814"><highlight class="normal"><ref refid="module_8h_1a5e3652cae8b48c1ad174f0b06bbd06d0" kindref="member">API_EXPORT</ref><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2815"><highlight class="normal"><ref refid="module_8h_1a3499bd306b660788339570ea8b9f4733" kindref="member">box_decimal_scale</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbox__decimal" kindref="compound">box_decimal_t</ref><sp/>*dec);</highlight></codeline>
<codeline lineno="2816"><highlight class="normal"></highlight></codeline>
<codeline lineno="2824"><highlight class="normal"><ref refid="module_8h_1a5e3652cae8b48c1ad174f0b06bbd06d0" kindref="member">API_EXPORT</ref><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2825"><highlight class="normal"><ref refid="module_8h_1a1adad9501fc38ba6e6a54f58d6152840" kindref="member">box_decimal_is_int</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbox__decimal" kindref="compound">box_decimal_t</ref><sp/>*dec);</highlight></codeline>
<codeline lineno="2826"><highlight class="normal"></highlight></codeline>
<codeline lineno="2834"><highlight class="normal"><ref refid="module_8h_1a5e3652cae8b48c1ad174f0b06bbd06d0" kindref="member">API_EXPORT</ref><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2835"><highlight class="normal"><ref refid="module_8h_1a74749ee03d5f2860c5813b0bf36cabe4" kindref="member">box_decimal_is_neg</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbox__decimal" kindref="compound">box_decimal_t</ref><sp/>*dec);</highlight></codeline>
<codeline lineno="2836"><highlight class="normal"></highlight></codeline>
<codeline lineno="2837"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>}}}<sp/>decimal<sp/>properties<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2838"><highlight class="normal"></highlight></codeline>
<codeline lineno="2839"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>{{{<sp/>decimal<sp/>constructors<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2840"><highlight class="normal"></highlight></codeline>
<codeline lineno="2847"><highlight class="normal"><ref refid="module_8h_1a5e3652cae8b48c1ad174f0b06bbd06d0" kindref="member">API_EXPORT</ref><sp/><ref refid="structbox__decimal" kindref="compound">box_decimal_t</ref><sp/>*</highlight></codeline>
<codeline lineno="2848"><highlight class="normal"><ref refid="module_8h_1ab5057a778894e99543a07aecbce998af" kindref="member">box_decimal_zero</ref>(<ref refid="structbox__decimal" kindref="compound">box_decimal_t</ref><sp/>*dec);</highlight></codeline>
<codeline lineno="2849"><highlight class="normal"></highlight></codeline>
<codeline lineno="2861"><highlight class="normal"><ref refid="module_8h_1a5e3652cae8b48c1ad174f0b06bbd06d0" kindref="member">API_EXPORT</ref><sp/><ref refid="structbox__decimal" kindref="compound">box_decimal_t</ref><sp/>*</highlight></codeline>
<codeline lineno="2862"><highlight class="normal"><ref refid="module_8h_1ae81c9e590563ab312a470066e732c874" kindref="member">box_decimal_from_string</ref>(<ref refid="structbox__decimal" kindref="compound">box_decimal_t</ref><sp/>*dec,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*str);</highlight></codeline>
<codeline lineno="2863"><highlight class="normal"></highlight></codeline>
<codeline lineno="2873"><highlight class="normal"><ref refid="module_8h_1a5e3652cae8b48c1ad174f0b06bbd06d0" kindref="member">API_EXPORT</ref><sp/><ref refid="structbox__decimal" kindref="compound">box_decimal_t</ref><sp/>*</highlight></codeline>
<codeline lineno="2874"><highlight class="normal"><ref refid="module_8h_1a69214f1ba250729dbf5d06894ff7d4cc" kindref="member">box_decimal_from_double</ref>(<ref refid="structbox__decimal" kindref="compound">box_decimal_t</ref><sp/>*dec,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>d);</highlight></codeline>
<codeline lineno="2875"><highlight class="normal"></highlight></codeline>
<codeline lineno="2883"><highlight class="normal"><ref refid="module_8h_1a5e3652cae8b48c1ad174f0b06bbd06d0" kindref="member">API_EXPORT</ref><sp/><ref refid="structbox__decimal" kindref="compound">box_decimal_t</ref><sp/>*</highlight></codeline>
<codeline lineno="2884"><highlight class="normal"><ref refid="module_8h_1a4e0a0856aae8c1c80208eee4027e5f83" kindref="member">box_decimal_from_int64</ref>(<ref refid="structbox__decimal" kindref="compound">box_decimal_t</ref><sp/>*dec,<sp/>int64_t<sp/>num);</highlight></codeline>
<codeline lineno="2885"><highlight class="normal"></highlight></codeline>
<codeline lineno="2893"><highlight class="normal"><ref refid="module_8h_1a5e3652cae8b48c1ad174f0b06bbd06d0" kindref="member">API_EXPORT</ref><sp/><ref refid="structbox__decimal" kindref="compound">box_decimal_t</ref><sp/>*</highlight></codeline>
<codeline lineno="2894"><highlight class="normal"><ref refid="module_8h_1a74864d2137cbd53f64999bd419a721fb" kindref="member">box_decimal_from_uint64</ref>(<ref refid="structbox__decimal" kindref="compound">box_decimal_t</ref><sp/>*dec,<sp/>uint64_t<sp/>num);</highlight></codeline>
<codeline lineno="2895"><highlight class="normal"></highlight></codeline>
<codeline lineno="2908"><highlight class="normal"><ref refid="module_8h_1a5e3652cae8b48c1ad174f0b06bbd06d0" kindref="member">API_EXPORT</ref><sp/><ref refid="structbox__decimal" kindref="compound">box_decimal_t</ref><sp/>*</highlight></codeline>
<codeline lineno="2909"><highlight class="normal"><ref refid="module_8h_1ab67fc69b043029952787aeb05b146145" kindref="member">box_decimal_copy</ref>(<ref refid="structbox__decimal" kindref="compound">box_decimal_t</ref><sp/>*dest,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbox__decimal" kindref="compound">box_decimal_t</ref><sp/>*src);</highlight></codeline>
<codeline lineno="2910"><highlight class="normal"></highlight></codeline>
<codeline lineno="2911"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>}}}<sp/>decimal<sp/>constructors<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2912"><highlight class="normal"></highlight></codeline>
<codeline lineno="2913"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>{{{<sp/>decimal<sp/>conversions<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2914"><highlight class="normal"></highlight></codeline>
<codeline lineno="2924"><highlight class="normal"><ref refid="module_8h_1a5e3652cae8b48c1ad174f0b06bbd06d0" kindref="member">API_EXPORT</ref><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2925"><highlight class="normal"><ref refid="module_8h_1a7a20acf8704e0a8de6b2c6e70cabda94" kindref="member">box_decimal_to_string</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbox__decimal" kindref="compound">box_decimal_t</ref><sp/>*dec,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*buf);</highlight></codeline>
<codeline lineno="2926"><highlight class="normal"></highlight></codeline>
<codeline lineno="2935"><highlight class="normal"><ref refid="module_8h_1a5e3652cae8b48c1ad174f0b06bbd06d0" kindref="member">API_EXPORT</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbox__decimal" kindref="compound">box_decimal_t</ref><sp/>*</highlight></codeline>
<codeline lineno="2936"><highlight class="normal"><ref refid="module_8h_1aa213d0898e63876e3ca57cbe506bdfe6" kindref="member">box_decimal_to_int64</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbox__decimal" kindref="compound">box_decimal_t</ref><sp/>*dec,<sp/>int64_t<sp/>*num);</highlight></codeline>
<codeline lineno="2937"><highlight class="normal"></highlight></codeline>
<codeline lineno="2946"><highlight class="normal"><ref refid="module_8h_1a5e3652cae8b48c1ad174f0b06bbd06d0" kindref="member">API_EXPORT</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbox__decimal" kindref="compound">box_decimal_t</ref><sp/>*</highlight></codeline>
<codeline lineno="2947"><highlight class="normal"><ref refid="module_8h_1af45f83c5dd155eb132a17f0a4e2efa47" kindref="member">box_decimal_to_uint64</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbox__decimal" kindref="compound">box_decimal_t</ref><sp/>*dec,<sp/>uint64_t<sp/>*num);</highlight></codeline>
<codeline lineno="2948"><highlight class="normal"></highlight></codeline>
<codeline lineno="2949"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>}}}<sp/>decimal<sp/>conversions<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2950"><highlight class="normal"></highlight></codeline>
<codeline lineno="2951"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>{{{<sp/>decimal<sp/>rounding<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2952"><highlight class="normal"></highlight></codeline>
<codeline lineno="2975"><highlight class="normal"><ref refid="module_8h_1a5e3652cae8b48c1ad174f0b06bbd06d0" kindref="member">API_EXPORT</ref><sp/><ref refid="structbox__decimal" kindref="compound">box_decimal_t</ref><sp/>*</highlight></codeline>
<codeline lineno="2976"><highlight class="normal"><ref refid="module_8h_1aae4e2827ab276075fedde86a576d15e9" kindref="member">box_decimal_round</ref>(<ref refid="structbox__decimal" kindref="compound">box_decimal_t</ref><sp/>*dec,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>scale);</highlight></codeline>
<codeline lineno="2977"><highlight class="normal"></highlight></codeline>
<codeline lineno="2997"><highlight class="normal"><ref refid="module_8h_1a5e3652cae8b48c1ad174f0b06bbd06d0" kindref="member">API_EXPORT</ref><sp/><ref refid="structbox__decimal" kindref="compound">box_decimal_t</ref><sp/>*</highlight></codeline>
<codeline lineno="2998"><highlight class="normal"><ref refid="module_8h_1a471927fb872be29fdff66d0e198a3878" kindref="member">box_decimal_floor</ref>(<ref refid="structbox__decimal" kindref="compound">box_decimal_t</ref><sp/>*dec,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>scale);</highlight></codeline>
<codeline lineno="2999"><highlight class="normal"></highlight></codeline>
<codeline lineno="3006"><highlight class="normal"><ref refid="module_8h_1a5e3652cae8b48c1ad174f0b06bbd06d0" kindref="member">API_EXPORT</ref><sp/><ref refid="structbox__decimal" kindref="compound">box_decimal_t</ref><sp/>*</highlight></codeline>
<codeline lineno="3007"><highlight class="normal"><ref refid="module_8h_1a8d6b6c8fd7096a6bfe54d65007255281" kindref="member">box_decimal_trim</ref>(<ref refid="structbox__decimal" kindref="compound">box_decimal_t</ref><sp/>*dec);</highlight></codeline>
<codeline lineno="3008"><highlight class="normal"></highlight></codeline>
<codeline lineno="3025"><highlight class="normal"><ref refid="module_8h_1a5e3652cae8b48c1ad174f0b06bbd06d0" kindref="member">API_EXPORT</ref><sp/><ref refid="structbox__decimal" kindref="compound">box_decimal_t</ref><sp/>*</highlight></codeline>
<codeline lineno="3026"><highlight class="normal"><ref refid="module_8h_1ac3599d3e81a8144fa1a10199908a84f2" kindref="member">box_decimal_rescale</ref>(<ref refid="structbox__decimal" kindref="compound">box_decimal_t</ref><sp/>*dec,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>scale);</highlight></codeline>
<codeline lineno="3027"><highlight class="normal"></highlight></codeline>
<codeline lineno="3028"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>}}}<sp/>decimal<sp/>rounding<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3029"><highlight class="normal"></highlight></codeline>
<codeline lineno="3030"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>{{{<sp/>decimal<sp/>arithmetic<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3031"><highlight class="normal"></highlight></codeline>
<codeline lineno="3041"><highlight class="normal"><ref refid="module_8h_1a5e3652cae8b48c1ad174f0b06bbd06d0" kindref="member">API_EXPORT</ref><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3042"><highlight class="normal"><ref refid="module_8h_1aaf0376671f42b04fdafb2706527762b4" kindref="member">box_decimal_compare</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbox__decimal" kindref="compound">box_decimal_t</ref><sp/>*lhs,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbox__decimal" kindref="compound">box_decimal_t</ref><sp/>*rhs);</highlight></codeline>
<codeline lineno="3043"><highlight class="normal"></highlight></codeline>
<codeline lineno="3055"><highlight class="normal"><ref refid="module_8h_1a5e3652cae8b48c1ad174f0b06bbd06d0" kindref="member">API_EXPORT</ref><sp/><ref refid="structbox__decimal" kindref="compound">box_decimal_t</ref><sp/>*</highlight></codeline>
<codeline lineno="3056"><highlight class="normal"><ref refid="module_8h_1a2a33cc8495c4fc3ef343bf4ffe767d81" kindref="member">box_decimal_abs</ref>(<ref refid="structbox__decimal" kindref="compound">box_decimal_t</ref><sp/>*res,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbox__decimal" kindref="compound">box_decimal_t</ref><sp/>*dec);</highlight></codeline>
<codeline lineno="3057"><highlight class="normal"></highlight></codeline>
<codeline lineno="3067"><highlight class="normal"><ref refid="module_8h_1a5e3652cae8b48c1ad174f0b06bbd06d0" kindref="member">API_EXPORT</ref><sp/><ref refid="structbox__decimal" kindref="compound">box_decimal_t</ref><sp/>*</highlight></codeline>
<codeline lineno="3068"><highlight class="normal"><ref refid="module_8h_1ac58747fcce83cdad8ffde68b78ad57da" kindref="member">box_decimal_minus</ref>(<ref refid="structbox__decimal" kindref="compound">box_decimal_t</ref><sp/>*res,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbox__decimal" kindref="compound">box_decimal_t</ref><sp/>*dec);</highlight></codeline>
<codeline lineno="3069"><highlight class="normal"></highlight></codeline>
<codeline lineno="3079"><highlight class="normal"><ref refid="module_8h_1a5e3652cae8b48c1ad174f0b06bbd06d0" kindref="member">API_EXPORT</ref><sp/><ref refid="structbox__decimal" kindref="compound">box_decimal_t</ref><sp/>*</highlight></codeline>
<codeline lineno="3080"><highlight class="normal"><ref refid="module_8h_1a39c5c7bbc81f8c39f8767cccc27b0d09" kindref="member">box_decimal_add</ref>(<ref refid="structbox__decimal" kindref="compound">box_decimal_t</ref><sp/>*res,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbox__decimal" kindref="compound">box_decimal_t</ref><sp/>*lhs,</highlight></codeline>
<codeline lineno="3081"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbox__decimal" kindref="compound">box_decimal_t</ref><sp/>*rhs);</highlight></codeline>
<codeline lineno="3082"><highlight class="normal"></highlight></codeline>
<codeline lineno="3092"><highlight class="normal"><ref refid="module_8h_1a5e3652cae8b48c1ad174f0b06bbd06d0" kindref="member">API_EXPORT</ref><sp/><ref refid="structbox__decimal" kindref="compound">box_decimal_t</ref><sp/>*</highlight></codeline>
<codeline lineno="3093"><highlight class="normal"><ref refid="module_8h_1a26473f8f35e87789e1f7e51e0c9c01d5" kindref="member">box_decimal_sub</ref>(<ref refid="structbox__decimal" kindref="compound">box_decimal_t</ref><sp/>*res,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbox__decimal" kindref="compound">box_decimal_t</ref><sp/>*lhs,</highlight></codeline>
<codeline lineno="3094"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbox__decimal" kindref="compound">box_decimal_t</ref><sp/>*rhs);</highlight></codeline>
<codeline lineno="3095"><highlight class="normal"></highlight></codeline>
<codeline lineno="3105"><highlight class="normal"><ref refid="module_8h_1a5e3652cae8b48c1ad174f0b06bbd06d0" kindref="member">API_EXPORT</ref><sp/><ref refid="structbox__decimal" kindref="compound">box_decimal_t</ref><sp/>*</highlight></codeline>
<codeline lineno="3106"><highlight class="normal"><ref refid="module_8h_1af8ab08f3604f10eb105b18868511a66d" kindref="member">box_decimal_mul</ref>(<ref refid="structbox__decimal" kindref="compound">box_decimal_t</ref><sp/>*res,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbox__decimal" kindref="compound">box_decimal_t</ref><sp/>*lhs,</highlight></codeline>
<codeline lineno="3107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbox__decimal" kindref="compound">box_decimal_t</ref><sp/>*rhs);</highlight></codeline>
<codeline lineno="3108"><highlight class="normal"></highlight></codeline>
<codeline lineno="3118"><highlight class="normal"><ref refid="module_8h_1a5e3652cae8b48c1ad174f0b06bbd06d0" kindref="member">API_EXPORT</ref><sp/><ref refid="structbox__decimal" kindref="compound">box_decimal_t</ref><sp/>*</highlight></codeline>
<codeline lineno="3119"><highlight class="normal"><ref refid="module_8h_1a2246edd7f0b9df9c182038bdbb6d2b11" kindref="member">box_decimal_div</ref>(<ref refid="structbox__decimal" kindref="compound">box_decimal_t</ref><sp/>*res,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbox__decimal" kindref="compound">box_decimal_t</ref><sp/>*lhs,</highlight></codeline>
<codeline lineno="3120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbox__decimal" kindref="compound">box_decimal_t</ref><sp/>*rhs);</highlight></codeline>
<codeline lineno="3121"><highlight class="normal"></highlight></codeline>
<codeline lineno="3133"><highlight class="normal"><ref refid="module_8h_1a5e3652cae8b48c1ad174f0b06bbd06d0" kindref="member">API_EXPORT</ref><sp/><ref refid="structbox__decimal" kindref="compound">box_decimal_t</ref><sp/>*</highlight></codeline>
<codeline lineno="3134"><highlight class="normal"><ref refid="module_8h_1aaeb908abdbaea9d758545b1825604101" kindref="member">box_decimal_remainder</ref>(<ref refid="structbox__decimal" kindref="compound">box_decimal_t</ref><sp/>*res,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbox__decimal" kindref="compound">box_decimal_t</ref><sp/>*lhs,</highlight></codeline>
<codeline lineno="3135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbox__decimal" kindref="compound">box_decimal_t</ref><sp/>*rhs);</highlight></codeline>
<codeline lineno="3136"><highlight class="normal"></highlight></codeline>
<codeline lineno="3137"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>}}}<sp/>decimal<sp/>arithmetic<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3138"><highlight class="normal"></highlight></codeline>
<codeline lineno="3139"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>{{{<sp/>decimal<sp/>math<sp/>functions<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3140"><highlight class="normal"></highlight></codeline>
<codeline lineno="3149"><highlight class="normal"><ref refid="module_8h_1a5e3652cae8b48c1ad174f0b06bbd06d0" kindref="member">API_EXPORT</ref><sp/><ref refid="structbox__decimal" kindref="compound">box_decimal_t</ref><sp/>*</highlight></codeline>
<codeline lineno="3150"><highlight class="normal"><ref refid="module_8h_1af92596f1e666deb84a3569b7af48af95" kindref="member">box_decimal_log10</ref>(<ref refid="structbox__decimal" kindref="compound">box_decimal_t</ref><sp/>*res,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbox__decimal" kindref="compound">box_decimal_t</ref><sp/>*dec);</highlight></codeline>
<codeline lineno="3151"><highlight class="normal"></highlight></codeline>
<codeline lineno="3160"><highlight class="normal"><ref refid="module_8h_1a5e3652cae8b48c1ad174f0b06bbd06d0" kindref="member">API_EXPORT</ref><sp/><ref refid="structbox__decimal" kindref="compound">box_decimal_t</ref><sp/>*</highlight></codeline>
<codeline lineno="3161"><highlight class="normal"><ref refid="module_8h_1afe79a92142c93b7344f6e6559edea7a6" kindref="member">box_decimal_ln</ref>(<ref refid="structbox__decimal" kindref="compound">box_decimal_t</ref><sp/>*res,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbox__decimal" kindref="compound">box_decimal_t</ref><sp/>*dec);</highlight></codeline>
<codeline lineno="3162"><highlight class="normal"></highlight></codeline>
<codeline lineno="3172"><highlight class="normal"><ref refid="module_8h_1a5e3652cae8b48c1ad174f0b06bbd06d0" kindref="member">API_EXPORT</ref><sp/><ref refid="structbox__decimal" kindref="compound">box_decimal_t</ref><sp/>*</highlight></codeline>
<codeline lineno="3173"><highlight class="normal"><ref refid="module_8h_1a78523b113439b54d761c5ffe19317f59" kindref="member">box_decimal_pow</ref>(<ref refid="structbox__decimal" kindref="compound">box_decimal_t</ref><sp/>*res,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbox__decimal" kindref="compound">box_decimal_t</ref><sp/>*lhs,</highlight></codeline>
<codeline lineno="3174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbox__decimal" kindref="compound">box_decimal_t</ref><sp/>*rhs);</highlight></codeline>
<codeline lineno="3175"><highlight class="normal"></highlight></codeline>
<codeline lineno="3184"><highlight class="normal"><ref refid="module_8h_1a5e3652cae8b48c1ad174f0b06bbd06d0" kindref="member">API_EXPORT</ref><sp/><ref refid="structbox__decimal" kindref="compound">box_decimal_t</ref><sp/>*</highlight></codeline>
<codeline lineno="3185"><highlight class="normal"><ref refid="module_8h_1aaf4d239489a058ab770f6da11c16dcd4" kindref="member">box_decimal_exp</ref>(<ref refid="structbox__decimal" kindref="compound">box_decimal_t</ref><sp/>*res,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbox__decimal" kindref="compound">box_decimal_t</ref><sp/>*dec);</highlight></codeline>
<codeline lineno="3186"><highlight class="normal"></highlight></codeline>
<codeline lineno="3195"><highlight class="normal"><ref refid="module_8h_1a5e3652cae8b48c1ad174f0b06bbd06d0" kindref="member">API_EXPORT</ref><sp/><ref refid="structbox__decimal" kindref="compound">box_decimal_t</ref><sp/>*</highlight></codeline>
<codeline lineno="3196"><highlight class="normal"><ref refid="module_8h_1a8947463e9d73c92ffee508b32a3b3d9b" kindref="member">box_decimal_sqrt</ref>(<ref refid="structbox__decimal" kindref="compound">box_decimal_t</ref><sp/>*res,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbox__decimal" kindref="compound">box_decimal_t</ref><sp/>*dec);</highlight></codeline>
<codeline lineno="3197"><highlight class="normal"></highlight></codeline>
<codeline lineno="3198"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>}}}<sp/>decimal<sp/>math<sp/>functions<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3199"><highlight class="normal"></highlight></codeline>
<codeline lineno="3200"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>{{{<sp/>decimal<sp/>encoding<sp/>to/decoding<sp/>from<sp/>msgpack<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3201"><highlight class="normal"></highlight></codeline>
<codeline lineno="3209"><highlight class="normal">uint32_t</highlight></codeline>
<codeline lineno="3210"><highlight class="normal"><ref refid="module_8h_1ad847059b54874f3e4bde5550ec228fd3" kindref="member">box_decimal_mp_sizeof</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbox__decimal" kindref="compound">box_decimal_t</ref><sp/>*dec);</highlight></codeline>
<codeline lineno="3211"><highlight class="normal"></highlight></codeline>
<codeline lineno="3219"><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*</highlight></codeline>
<codeline lineno="3220"><highlight class="normal"><ref refid="module_8h_1afc7cf68d7ca8998fad15492ae99bbf7e" kindref="member">box_decimal_mp_encode</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbox__decimal" kindref="compound">box_decimal_t</ref><sp/>*dec,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*data);</highlight></codeline>
<codeline lineno="3221"><highlight class="normal"></highlight></codeline>
<codeline lineno="3232"><highlight class="normal"><ref refid="structbox__decimal" kindref="compound">box_decimal_t</ref><sp/>*</highlight></codeline>
<codeline lineno="3233"><highlight class="normal"><ref refid="module_8h_1aa91f14822373ac8e50ecb18bd23aeee4" kindref="member">box_decimal_mp_decode</ref>(<ref refid="structbox__decimal" kindref="compound">box_decimal_t</ref><sp/>*dec,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**data);</highlight></codeline>
<codeline lineno="3234"><highlight class="normal"></highlight></codeline>
<codeline lineno="3257"><highlight class="normal"><ref refid="structbox__decimal" kindref="compound">box_decimal_t</ref><sp/>*</highlight></codeline>
<codeline lineno="3258"><highlight class="normal"><ref refid="module_8h_1ae69f4b3c80347bcbfb617a70b57f820e" kindref="member">box_decimal_mp_decode_data</ref>(<ref refid="structbox__decimal" kindref="compound">box_decimal_t</ref><sp/>*dec,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**data,</highlight></codeline>
<codeline lineno="3259"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>size);</highlight></codeline>
<codeline lineno="3260"><highlight class="normal"></highlight></codeline>
<codeline lineno="3261"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>}}}<sp/>decimal<sp/>encoding<sp/>to/decoding<sp/>from<sp/>msgpack<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3262"><highlight class="normal"></highlight></codeline>
<codeline lineno="3270"><highlight class="normal"><ref refid="module_8h_1a5e3652cae8b48c1ad174f0b06bbd06d0" kindref="member">API_EXPORT</ref><sp/><ref refid="structbox__decimal" kindref="compound">box_decimal_t</ref><sp/>*</highlight></codeline>
<codeline lineno="3271"><highlight class="normal"><ref refid="module_8h_1a7062a07e1c119c2c50b65afd23d0ce40" kindref="member">luaT_newdecimal</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>lua_State<sp/>*L);</highlight></codeline>
<codeline lineno="3272"><highlight class="normal"></highlight></codeline>
<codeline lineno="3277"><highlight class="normal"><ref refid="module_8h_1a5e3652cae8b48c1ad174f0b06bbd06d0" kindref="member">API_EXPORT</ref><sp/><ref refid="structbox__decimal" kindref="compound">box_decimal_t</ref><sp/>*</highlight></codeline>
<codeline lineno="3278"><highlight class="normal"><ref refid="module_8h_1aef837b9429a6fe562b43d5bff5c3c426" kindref="member">luaT_pushdecimal</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>lua_State<sp/>*L,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbox__decimal" kindref="compound">box_decimal_t</ref><sp/>*dec);</highlight></codeline>
<codeline lineno="3279"><highlight class="normal"></highlight></codeline>
<codeline lineno="3286"><highlight class="normal"><ref refid="module_8h_1a5e3652cae8b48c1ad174f0b06bbd06d0" kindref="member">API_EXPORT</ref><sp/><ref refid="structbox__decimal" kindref="compound">box_decimal_t</ref><sp/>*</highlight></codeline>
<codeline lineno="3287"><highlight class="normal"><ref refid="module_8h_1a53f6c9c6047142026a2e3727e4e43a24" kindref="member">luaT_isdecimal</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>lua_State<sp/>*L,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index);</highlight></codeline>
<codeline lineno="3288"><highlight class="normal"></highlight></codeline>
<codeline lineno="3290" refid="module_8h_1a029e9d16d637a97b37560ccf24c4adce" refkind="member"><highlight class="keyword">enum</highlight><highlight class="normal"><sp/><ref refid="module_8h_1a029e9d16d637a97b37560ccf24c4adce" kindref="member">box_error_code</ref><sp/>{<sp/>ER_UNKNOWN,<sp/>ER_ILLEGAL_PARAMS,<sp/>ER_MEMORY_ISSUE,<sp/>ER_TUPLE_FOUND,<sp/>ER_TUPLE_NOT_FOUND,<sp/>ER_UNSUPPORTED,<sp/>ER_NONMASTER,<sp/>ER_READONLY,<sp/>ER_INJECTION,<sp/>ER_CREATE_SPACE,<sp/>ER_SPACE_EXISTS,<sp/>ER_DROP_SPACE,<sp/>ER_ALTER_SPACE,<sp/>ER_INDEX_TYPE,<sp/>ER_MODIFY_INDEX,<sp/>ER_LAST_DROP,<sp/>ER_TUPLE_FORMAT_LIMIT,<sp/>ER_DROP_PRIMARY_KEY,<sp/>ER_KEY_PART_TYPE,<sp/>ER_EXACT_MATCH,<sp/>ER_INVALID_MSGPACK,<sp/>ER_PROC_RET,<sp/>ER_TUPLE_NOT_ARRAY,<sp/>ER_FIELD_TYPE,<sp/>ER_INDEX_PART_TYPE_MISMATCH,<sp/>ER_UPDATE_SPLICE,<sp/>ER_UPDATE_ARG_TYPE,<sp/>ER_FORMAT_MISMATCH_INDEX_PART,<sp/>ER_UNKNOWN_UPDATE_OP,<sp/>ER_UPDATE_FIELD,<sp/>ER_FUNCTION_TX_ACTIVE,<sp/>ER_KEY_PART_COUNT,<sp/>ER_PROC_LUA,<sp/>ER_NO_SUCH_PROC,<sp/>ER_NO_SUCH_TRIGGER,<sp/>ER_NO_SUCH_INDEX_ID,<sp/>ER_NO_SUCH_SPACE,<sp/>ER_NO_SUCH_FIELD_NO,<sp/>ER_EXACT_FIELD_COUNT,<sp/>ER_FIELD_MISSING,<sp/>ER_WAL_IO,<sp/>ER_MORE_THAN_ONE_TUPLE,<sp/>ER_ACCESS_DENIED,<sp/>ER_CREATE_USER,<sp/>ER_DROP_USER,<sp/>ER_NO_SUCH_USER,<sp/>ER_USER_EXISTS,<sp/>ER_PASSWORD_MISMATCH,<sp/>ER_UNKNOWN_REQUEST_TYPE,<sp/>ER_UNKNOWN_SCHEMA_OBJECT,<sp/>ER_CREATE_FUNCTION,<sp/>ER_NO_SUCH_FUNCTION,<sp/>ER_FUNCTION_EXISTS,<sp/>ER_BEFORE_REPLACE_RET,<sp/>ER_MULTISTATEMENT_TRANSACTION,<sp/>ER_TRIGGER_EXISTS,<sp/>ER_USER_MAX,<sp/>ER_NO_SUCH_ENGINE,<sp/>ER_RELOAD_CFG,<sp/>ER_CFG,<sp/>ER_SAVEPOINT_EMPTY_TX,<sp/>ER_NO_SUCH_SAVEPOINT,<sp/>ER_UNKNOWN_REPLICA,<sp/>ER_REPLICASET_UUID_MISMATCH,<sp/>ER_INVALID_UUID,<sp/>ER_REPLICASET_UUID_IS_RO,<sp/>ER_INSTANCE_UUID_MISMATCH,<sp/>ER_REPLICA_ID_IS_RESERVED,<sp/>ER_INVALID_ORDER,<sp/>ER_MISSING_REQUEST_FIELD,<sp/>ER_IDENTIFIER,<sp/>ER_DROP_FUNCTION,<sp/>ER_ITERATOR_TYPE,<sp/>ER_REPLICA_MAX,<sp/>ER_INVALID_XLOG,<sp/>ER_INVALID_XLOG_NAME,<sp/>ER_INVALID_XLOG_ORDER,<sp/>ER_NO_CONNECTION,<sp/>ER_TIMEOUT,<sp/>ER_ACTIVE_TRANSACTION,<sp/>ER_CURSOR_NO_TRANSACTION,<sp/>ER_CROSS_ENGINE_TRANSACTION,<sp/>ER_NO_SUCH_ROLE,<sp/>ER_ROLE_EXISTS,<sp/>ER_CREATE_ROLE,<sp/>ER_INDEX_EXISTS,<sp/>ER_SESSION_CLOSED,<sp/>ER_ROLE_LOOP,<sp/>ER_GRANT,<sp/>ER_PRIV_GRANTED,<sp/>ER_ROLE_GRANTED,<sp/>ER_PRIV_NOT_GRANTED,<sp/>ER_ROLE_NOT_GRANTED,<sp/>ER_MISSING_SNAPSHOT,<sp/>ER_CANT_UPDATE_PRIMARY_KEY,<sp/>ER_UPDATE_INTEGER_OVERFLOW,<sp/>ER_GUEST_USER_PASSWORD,<sp/>ER_TRANSACTION_CONFLICT,<sp/>ER_UNSUPPORTED_PRIV,<sp/>ER_LOAD_FUNCTION,<sp/>ER_FUNCTION_LANGUAGE,<sp/>ER_RTREE_RECT,<sp/>ER_PROC_C,<sp/>ER_UNKNOWN_RTREE_INDEX_DISTANCE_TYPE,<sp/>ER_PROTOCOL,<sp/>ER_UPSERT_UNIQUE_SECONDARY_KEY,<sp/>ER_WRONG_INDEX_RECORD,<sp/>ER_WRONG_INDEX_PARTS,<sp/>ER_WRONG_INDEX_OPTIONS,<sp/>ER_WRONG_SCHEMA_VERSION,<sp/>ER_MEMTX_MAX_TUPLE_SIZE,<sp/>ER_WRONG_SPACE_OPTIONS,<sp/>ER_UNSUPPORTED_INDEX_FEATURE,<sp/>ER_VIEW_IS_RO,<sp/>ER_NO_TRANSACTION,<sp/>ER_SYSTEM,<sp/>ER_LOADING,<sp/>ER_CONNECTION_TO_SELF,<sp/>ER_KEY_PART_IS_TOO_LONG,<sp/>ER_COMPRESSION,<sp/>ER_CHECKPOINT_IN_PROGRESS,<sp/>ER_SUB_STMT_MAX,<sp/>ER_COMMIT_IN_SUB_STMT,<sp/>ER_ROLLBACK_IN_SUB_STMT,<sp/>ER_DECOMPRESSION,<sp/>ER_INVALID_XLOG_TYPE,<sp/>ER_ALREADY_RUNNING,<sp/>ER_INDEX_FIELD_COUNT_LIMIT,<sp/>ER_LOCAL_INSTANCE_ID_IS_READ_ONLY,<sp/>ER_BACKUP_IN_PROGRESS,<sp/>ER_READ_VIEW_ABORTED,<sp/>ER_INVALID_INDEX_FILE,<sp/>ER_INVALID_RUN_FILE,<sp/>ER_INVALID_VYLOG_FILE,<sp/>ER_CASCADE_ROLLBACK,<sp/>ER_VY_QUOTA_TIMEOUT,<sp/>ER_PARTIAL_KEY,<sp/>ER_TRUNCATE_SYSTEM_SPACE,<sp/>ER_LOAD_MODULE,<sp/>ER_VINYL_MAX_TUPLE_SIZE,<sp/>ER_WRONG_DD_VERSION,<sp/>ER_WRONG_SPACE_FORMAT,<sp/>ER_CREATE_SEQUENCE,<sp/>ER_ALTER_SEQUENCE,<sp/>ER_DROP_SEQUENCE,<sp/>ER_NO_SUCH_SEQUENCE,<sp/>ER_SEQUENCE_EXISTS,<sp/>ER_SEQUENCE_OVERFLOW,<sp/>ER_NO_SUCH_INDEX_NAME,<sp/>ER_SPACE_FIELD_IS_DUPLICATE,<sp/>ER_CANT_CREATE_COLLATION,<sp/>ER_WRONG_COLLATION_OPTIONS,<sp/>ER_NULLABLE_PRIMARY,<sp/>ER_NO_SUCH_FIELD_NAME_IN_SPACE,<sp/>ER_TRANSACTION_YIELD,<sp/>ER_NO_SUCH_GROUP,<sp/>ER_SQL_BIND_VALUE,<sp/>ER_SQL_BIND_TYPE,<sp/>ER_SQL_BIND_PARAMETER_MAX,<sp/>ER_SQL_EXECUTE,<sp/>ER_UPDATE_DECIMAL_OVERFLOW,<sp/>ER_SQL_BIND_NOT_FOUND,<sp/>ER_ACTION_MISMATCH,<sp/>ER_VIEW_MISSING_SQL,<sp/>ER_FOREIGN_KEY_CONSTRAINT,<sp/>ER_NO_SUCH_MODULE,<sp/>ER_NO_SUCH_COLLATION,<sp/>ER_CREATE_FK_CONSTRAINT,<sp/>ER_DROP_FK_CONSTRAINT,<sp/>ER_NO_SUCH_CONSTRAINT,<sp/>ER_CONSTRAINT_EXISTS,<sp/>ER_SQL_TYPE_MISMATCH,<sp/>ER_ROWID_OVERFLOW,<sp/>ER_DROP_COLLATION,<sp/>ER_ILLEGAL_COLLATION_MIX,<sp/>ER_SQL_NO_SUCH_PRAGMA,<sp/>ER_SQL_CANT_RESOLVE_FIELD,<sp/>ER_INDEX_EXISTS_IN_SPACE,<sp/>ER_INCONSISTENT_TYPES,<sp/>ER_SQL_SYNTAX_WITH_POS,<sp/>ER_SQL_STACK_OVERFLOW,<sp/>ER_SQL_SELECT_WILDCARD,<sp/>ER_SQL_STATEMENT_EMPTY,<sp/>ER_SQL_KEYWORD_IS_RESERVED,<sp/>ER_SQL_SYNTAX_NEAR_TOKEN,<sp/>ER_SQL_UNKNOWN_TOKEN,<sp/>ER_SQL_PARSER_GENERIC,<sp/>ER_SQL_ANALYZE_ARGUMENT,<sp/>ER_SQL_COLUMN_COUNT_MAX,<sp/>ER_HEX_LITERAL_MAX,<sp/>ER_INT_LITERAL_MAX,<sp/>ER_SQL_PARSER_LIMIT,<sp/>ER_INDEX_DEF_UNSUPPORTED,<sp/>ER_CK_DEF_UNSUPPORTED,<sp/>ER_MULTIKEY_INDEX_MISMATCH,<sp/>ER_CREATE_CK_CONSTRAINT,<sp/>ER_CK_CONSTRAINT_FAILED,<sp/>ER_SQL_COLUMN_COUNT,<sp/>ER_FUNC_INDEX_FUNC,<sp/>ER_FUNC_INDEX_FORMAT,<sp/>ER_FUNC_INDEX_PARTS,<sp/>ER_NO_SUCH_FIELD_NAME,<sp/>ER_FUNC_WRONG_ARG_COUNT,<sp/>ER_BOOTSTRAP_READONLY,<sp/>ER_SQL_FUNC_WRONG_RET_COUNT,<sp/>ER_FUNC_INVALID_RETURN_TYPE,<sp/>ER_SQL_PARSER_GENERIC_WITH_POS,<sp/>ER_REPLICA_NOT_ANON,<sp/>ER_CANNOT_REGISTER,<sp/>ER_SESSION_SETTING_INVALID_VALUE,<sp/>ER_SQL_PREPARE,<sp/>ER_WRONG_QUERY_ID,<sp/>ER_SEQUENCE_NOT_STARTED,<sp/>ER_NO_SUCH_SESSION_SETTING,<sp/>ER_UNCOMMITTED_FOREIGN_SYNC_TXNS,<sp/>ER_SYNC_MASTER_MISMATCH,<sp/>ER_SYNC_QUORUM_TIMEOUT,<sp/>ER_SYNC_ROLLBACK,<sp/>ER_TUPLE_METADATA_IS_TOO_BIG,<sp/>ER_XLOG_GAP,<sp/>ER_TOO_EARLY_SUBSCRIBE,<sp/>ER_SQL_CANT_ADD_AUTOINC,<sp/>ER_QUORUM_WAIT,<sp/>ER_INTERFERING_PROMOTE,<sp/>ER_ELECTION_DISABLED,<sp/>ER_TXN_ROLLBACK,<sp/>ER_NOT_LEADER,<sp/>ER_SYNC_QUEUE_UNCLAIMED,<sp/>ER_SYNC_QUEUE_FOREIGN,<sp/>ER_UNABLE_TO_PROCESS_IN_STREAM,<sp/>ER_UNABLE_TO_PROCESS_OUT_OF_STREAM,<sp/>ER_TRANSACTION_TIMEOUT,<sp/>ER_ACTIVE_TIMER,<sp/>ER_TUPLE_FIELD_COUNT_LIMIT,<sp/>ER_CREATE_CONSTRAINT,<sp/>ER_FIELD_CONSTRAINT_FAILED,<sp/>ER_TUPLE_CONSTRAINT_FAILED,<sp/>ER_CREATE_FOREIGN_KEY,<sp/>ER_FOREIGN_KEY_INTEGRITY,<sp/>ER_FIELD_FOREIGN_KEY_FAILED,<sp/>ER_COMPLEX_FOREIGN_KEY_FAILED,<sp/>ER_WRONG_SPACE_UPGRADE_OPTIONS,<sp/>ER_NO_ELECTION_QUORUM,<sp/>ER_SSL,<sp/>ER_SPLIT_BRAIN,<sp/>box_error_code_MAX<sp/>};</highlight></codeline>
<codeline lineno="3291"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(__cplusplus)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3292"><highlight class="normal">}<sp/></highlight><highlight class="comment">/*<sp/>extern<sp/>&quot;C&quot;<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3293"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>defined(__cplusplus)<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3294"><highlight class="normal"></highlight></codeline>
<codeline lineno="3295"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>TARANTOOL_MODULE_H_INCLUDED<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
    </programlisting>
    <location file="src/module.h"/>
  </compounddef>
</doxygen>
